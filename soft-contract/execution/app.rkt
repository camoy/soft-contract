#lang typed/racket/base

(provide app@)

(require racket/set
         racket/list
         racket/match
         typed/racket/unit
         syntax/parse/define
         set-extras
         bnf
         unreachable
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(‚ü¶F‚üß . ‚âú . (Œ£ ‚Ñì W ‚Üí (Values R (‚Ñò Err))))
(‚ü¶G‚üß . ‚âú . (Œ£ ‚Ñì W V^ ‚Üí (Values R (‚Ñò Err))))

(define-unit app@
  (import meta-functions^ static-info^
          sto^ cache^ val^ pretty-print^
          prims^
          exec^ evl^ mon^ hv^ gc^)
  (export app^)

  (: app : Œ£ ‚Ñì V^ W ‚Üí (Values R (‚Ñò Err)))
  (define (app Œ£ ‚Ñì V‚Çï^ W)
    (define W:root (W-root W))
    ((inst fold-ans V)
     (Œª (V‚Çï) (app‚ÇÅ (gc (‚à™ W:root (V-root V‚Çï)) Œ£) ‚Ñì V‚Çï W))
     (unpack V‚Çï^ Œ£))) 

  (: app‚ÇÅ : Œ£ ‚Ñì V W ‚Üí (Values R (‚Ñò Err)))
  (define (app‚ÇÅ Œ£ ‚Ñì V W)
    (define f (match V
                [(? Clo? V) (app-Clo V)]
                [(? Case-Clo? V) (app-Case-Clo V)]
                [(-st-mk ùíæ) (app-st-mk ùíæ)]
                [(-st-p ùíæ) (app-st-p ùíæ)]
                [(-st-ac ùíæ i) (app-st-ac ùíæ i)]
                [(-st-mut ùíæ i) (app-st-mut ùíæ i)]
                [(? symbol? o) (app-prim o)]
                [(Guarded ctx (? Fn/C? G) Œ±)
                 (cond [(==>? G)     (app-==>  ctx G Œ±)]
                       [(==>i? G)    (app-==>i ctx G Œ±)]
                       [(‚àÄ/C? G)     (app-‚àÄ/C  ctx G Œ±)]
                       [(Case-=>? G) (app-Case-=> ctx G Œ±)]
                       [else (app-Terminating/C ctx Œ±)])]
                [(And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Or/C  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-Or/C  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Not/C Œ± ‚Ñì) (app-Not/C Œ± ‚Ñì)]
                [(One-Of/C bs) (app-One-Of/C bs)]
                [(St/C ùíæ Œ±s ‚Ñì) #:when (C-flat? V Œ£) (app-St/C ùíæ Œ±s ‚Ñì)]
                [(-‚óè Ps) (app-opq Ps)]
                [V (app-err V)]))
    (ref-$! ($:Key:App Œ£ ‚Ñì V W) (Œª () (f Œ£ ‚Ñì W))))

  (: app-Clo : Clo ‚Üí ‚ü¶F‚üß)
  (define ((app-Clo V‚Çï) Œ£ ‚Ñì W‚Çì*)
    (match-define (Clo fml E Œ° ‚Ñì‚Çï) V‚Çï)
    (cond [(arity-includes? (shape fml) (length W‚Çì*))
           (match-define (-var xs x·µ£) fml)
           (define W‚Çì (unpack-W W‚Çì* Œ£))
           (define ŒîŒ£‚Çì
             (let-values ([(W‚ÇÄ W·µ£) (if x·µ£ (split-at W‚Çì (length xs)) (values W‚Çì '()))])
               (‚ß∫ (stack-copy Œ° Œ£)
                  (alloc-lex* xs W‚ÇÄ)
                  (if x·µ£ (alloc-vararg x·µ£ W·µ£) ‚ä•ŒîŒ£))))
           (with-pre ŒîŒ£‚Çì (evl (‚ß∫ Œ£ ŒîŒ£‚Çì) E))]
          [else (err (Err:Arity ‚Ñì‚Çï (length W‚Çì*) ‚Ñì))]))

  (: app-Case-Clo : Case-Clo ‚Üí ‚ü¶F‚üß)
  (define ((app-Case-Clo V‚Çï) Œ£ ‚Ñì W‚Çì)
    (match-define (Case-Clo cases ‚Ñì‚Çï) V‚Çï)
    (define n (length W‚Çì))
    (match ((inst findf Clo) (Œª (clo) (arity-includes? (shape (Clo-_0 clo)) n)) cases)
      [(? values clo) ((app-Clo clo) Œ£ ‚Ñì W‚Çì)]
      [#f (err (Err:Arity ‚Ñì‚Çï n ‚Ñì))]))

  (: app-st-mk : -ùíæ ‚Üí ‚ü¶F‚üß)
  (define ((app-st-mk ùíæ) Œ£ ‚Ñì W‚Çì)
    (define n (count-struct-fields ùíæ))
    (if (= n (length W‚Çì))
        (let-values ([(Œ±s ŒîŒ£) (alloc-each W‚Çì (Œª (i) (Œ≤:fld ùíæ ‚Ñì i)))])
          (just (St ùíæ Œ±s) ŒîŒ£))
        (err (Err:Arity (-st-mk ùíæ) (length W‚Çì) ‚Ñì))))

  (: app-st-p : -ùíæ ‚Üí ‚ü¶F‚üß)
  (define ((app-st-p ùíæ) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-p ùíæ) ‚Ñì
      [(list _) (implement-predicate Œ£ (-st-p ùíæ) W‚Çì)]))

  (: app-st-ac : -ùíæ Index ‚Üí ‚ü¶F‚üß)
  (define ((app-st-ac ùíæ i) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-ac ùíæ i) ‚Ñì
      [(list V‚Çì)
       (with-split-Œ£ Œ£ (-st-p ùíæ) W‚Çì
         (Œª (W‚Çì* ŒîŒ£‚ÇÅ) (with-pre ŒîŒ£‚ÇÅ ((unchecked-app-st-ac ùíæ i) (‚ß∫ Œ£ ŒîŒ£‚ÇÅ) ‚Ñì (car W‚Çì*))))
         (Œª (W‚Çì* ŒîŒ£‚ÇÇ) (err (Blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set (-st-p ùíæ)}) W‚Çì*))))]))

  (: unchecked-app-st-ac : -ùíæ Index ‚Üí Œ£ ‚Ñì V^ ‚Üí (Values R (‚Ñò Err)))
  (define ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì V‚Çì)
    ((inst fold-ans V)
     (match-lambda
       [(St _ Œ±s) (just (unpack (list-ref Œ±s i) Œ£))]
       [(? Œ≥? Œ≥) (just (T:@ (-st-ac ùíæ i) (list Œ≥)))]
       [(Guarded ctx (St/C _ Œ±s ‚Ñì‚Çï) Œ±·µ•)
        (with-collapsing/R [(ŒîŒ£ Ws) ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì (unpack Œ±·µ• Œ£))]
          (with-pre ŒîŒ£ (mon (‚ß∫ Œ£ ŒîŒ£) ctx (unpack (list-ref Œ±s i) Œ£) (car (collapse-W^ Ws)))))]
       [_ (just (-‚óè ‚àÖ))])
     V‚Çì))

  (: app-st-mut : -ùíæ Index ‚Üí ‚ü¶F‚üß)
  (define ((app-st-mut ùíæ i) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-mut ùíæ i) ‚Ñì
      [(list V‚Çì V*)
       (with-split-Œ£ Œ£ (-st-p ùíæ) (list V‚Çì)
         (Œª (W‚Çì* ŒîŒ£‚ÇÅ) (with-pre ŒîŒ£‚ÇÅ ((unchecked-app-st-mut ùíæ i) (‚ß∫ Œ£ ŒîŒ£‚ÇÅ) ‚Ñì (car W‚Çì*) V*)))
         (Œª (W‚Çì* ŒîŒ£‚ÇÇ) (err (Blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set (-st-p ùíæ)}) W‚Çì*))))]))

  (: unchecked-app-st-mut : -ùíæ Index ‚Üí Œ£ ‚Ñì V^ V^ ‚Üí (Values R (‚Ñò Err)))
  (define ((unchecked-app-st-mut ùíæ i) Œ£ ‚Ñì V‚Çì V*)
    ((inst fold-ans V)
     (match-lambda
       [(St _ Œ±s) (just -void (mut (list-ref Œ±s i) V*))]
       [(Guarded ctx (St/C _ Œ±s ‚Ñì‚Çï) Œ±·µ•)
        (with-collapsing/R [(ŒîŒ£ Ws) (mon Œ£ (Ctx-flip ctx) (unpack (list-ref Œ±s i) Œ£) V*)]
          (with-pre ŒîŒ£ ((unchecked-app-st-mut ùíæ i) (‚ß∫ Œ£ ŒîŒ£) ‚Ñì (unpack Œ±·µ• Œ£) V*)))]
       [_ (just -void (alloc (Œ≥:hv #f) V*))])
     V‚Çì))

  (: app-prim : Symbol ‚Üí ‚ü¶F‚üß)
  (define ((app-prim o) Œ£ ‚Ñì W‚Çì)
    ; TODO massage raw result
    ((get-prim o) Œ£ ‚Ñì W‚Çì))

  (: app-==> : Ctx ==> Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-==> ctx G Œ±‚Çï) Œ£ ‚Ñì W‚Çì)
    (define (@ [Œ± : Œ±]) (unpack Œ± Œ£))
    (match-define (==> (-var Doms‚ÇÄ Dom·µ£) Rng ‚Ñì‚Çï) G)
    (define n (length Doms‚ÇÄ))
    (define ctx* (Ctx-with-site (Ctx-flip ctx) ‚Ñì))
    (define (mon-Rng [ŒîŒ£ : ŒîŒ£] [W‚Çês : W^])
      (cond [Rng (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
                 ((inst fold-ans W) (Œª (W‚Çê) (mon* Œ£* ctx (map @ Rng) W‚Çê)) W‚Çês)]
            [else (values (hash ŒîŒ£ W‚Çês) ‚àÖ)]))
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [W‚Çì
       #:when (and (not Dom·µ£) (= (length W‚Çì) n))
       (with-collapsing/R [(ŒîŒ£‚Çì Ws) (mon* Œ£ ctx* (map @ Doms‚ÇÄ) W‚Çì)]
         (define W‚Çì* (collapse-W^ Ws))
         (with-each-path [(ŒîŒ£‚Çê W‚Çês) (app (‚ß∫ Œ£ ŒîŒ£‚Çì) ‚Ñì (@ Œ±‚Çï) W‚Çì*)]
           (mon-Rng (‚ß∫ ŒîŒ£‚Çì ŒîŒ£‚Çê) W‚Çês)))]
      [W‚Çì
       #:when (and Dom·µ£ (>= (length W‚Çì) n))
       (define-values (W‚ÇÄ W·µ£) (split-at W‚Çì n))
       (with-collapsing/R [(ŒîŒ£‚ÇÄ W‚ÇÄs) (mon* Œ£ ctx* (map @ Doms‚ÇÄ) W‚ÇÄ)]
         (define W‚ÇÄ* (collapse-W^ W‚ÇÄs))
         (define-values (V·µ£ ŒîŒ£·µ£) (alloc-rest ‚Ñì‚Çï W·µ£))
         (with-collapsing/R [(ŒîŒ£‚ÇÅ W·µ£*) (mon (‚ß∫ Œ£ ŒîŒ£‚ÇÄ ŒîŒ£·µ£) ctx* (@ Dom·µ£) V·µ£)]
           (with-each-path [(ŒîŒ£‚Çê W‚Çês) (app/rest (‚ß∫ Œ£ ŒîŒ£‚ÇÄ ŒîŒ£·µ£ ŒîŒ£‚ÇÅ) ‚Ñì (@ Œ±‚Çï) W‚ÇÄ* (car (collapse-W^ W·µ£*)))]
             (mon-Rng (‚ß∫ ŒîŒ£‚ÇÄ ŒîŒ£·µ£ ŒîŒ£‚ÇÅ ŒîŒ£‚Çê) W‚Çês))))]))

  (: app-==>i : Ctx ==>i Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-==>i ctx G Œ±‚Çï) Œ£‚ÇÄ ‚Ñì W‚Çì)
    (match-define (==>i Doms Rng) G)
    (define (@ [Œ± : Œ±]) (lookup Œ± Œ£‚ÇÄ))

    (: mon-doms : Œ£ Ctx (Listof Dom) W ‚Üí (Values R (‚Ñò Err)))
    (define (mon-doms Œ£ ctx Doms W‚Çì)
      (match* (Doms W‚Çì)
        [('() '()) (values (hash ‚ä•ŒîŒ£ {set '()}) ‚àÖ)]
        [((cons Dom Doms) (cons V‚Çì W‚Çì))
         (with-each-path [(ŒîŒ£‚Çì W‚Çì*s) (mon-dom Œ£ ctx Dom V‚Çì)]
           (with-each-path [(ŒîŒ£* Ws*) (mon-doms (‚ß∫ Œ£ ŒîŒ£‚Çì) ctx Doms W‚Çì)]
             (values (hash (‚ß∫ ŒîŒ£‚Çì ŒîŒ£*) {set (cons (car (collapse-W^ W‚Çì*s)) (collapse-W^ Ws*))}) ‚àÖ)))]))

    (: mon-dom : Œ£ Ctx Dom V^ ‚Üí (Values R (‚Ñò Err)))
    (define (mon-dom Œ£ ctx dom V)
      (match-define (Dom x c ‚Ñì‚Çì) dom)
      (match c
        [(Clo (-var xs #f) E Œ° _)
         (define ŒîŒ£‚ÇÄ (stack-copy Œ° Œ£))
         (define Œ£‚ÇÄ (‚ß∫ Œ£ ŒîŒ£‚ÇÄ))
         (with-each-path [(ŒîŒ£‚ÇÅ Ws) (evl Œ£‚ÇÄ E)]
           (match-define (list C) (collapse-W^ Ws)) ; FIXME catch
           (with-each-path [(ŒîŒ£‚ÇÇ Ws) (mon (‚ß∫ Œ£‚ÇÄ ŒîŒ£‚ÇÅ) ctx C V)]
             (match-define (and W (list V*)) (collapse-W^ Ws)) ; FIXME catch
             (values (hash (‚ß∫ ŒîŒ£‚ÇÄ ŒîŒ£‚ÇÅ ŒîŒ£‚ÇÇ (alloc (Œ≥:lex x) V*)) {set W}) ‚àÖ)))]
        [(? Œ±? Œ±)
         (with-each-path [(ŒîŒ£ Ws) (mon Œ£ ctx (@ Œ±) V)]
           (match-define (and W (list V*)) (collapse-W^ Ws))
           (values (hash (‚ß∫ ŒîŒ£ (alloc (Œ≥:lex x) V*)) {set W}) ‚àÖ))]))
    
    (with-guarded-arity W‚Çì G ‚Ñì
      [W‚Çì
       #:when (= (length W‚Çì) (length Doms))
       (with-each-path [(ŒîŒ£‚Çì W‚Çì*) (mon-doms Œ£‚ÇÄ (Ctx-flip ctx) Doms W‚Çì)]
         (with-each-path [(ŒîŒ£‚Çê W‚Çês) (app (‚ß∫ Œ£‚ÇÄ ŒîŒ£‚Çì) ‚Ñì (@ Œ±‚Çï)
                                         (map (compose1 (inst set Œ≥) (compose1 Œ≥:lex Dom-name)) Doms))]
           (mon-dom (‚ß∫ Œ£‚ÇÄ ŒîŒ£‚Çì ŒîŒ£‚Çê) ctx Rng (car (collapse-W^ W‚Çês)))))]))

  (: app-‚àÄ/C : Ctx ‚àÄ/C Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-‚àÄ/C ctx G Œ±) Œ£ ‚Ñì W‚Çì)
    ???)

  (: app-Case-=> : Ctx Case-=> Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-Case-=> ctx G Œ±) Œ£ ‚Ñì W‚Çì)
    (define n (length W‚Çì))
    (match-define (Case-=> Cs) G)
    (match ((inst findf ==>)
            (match-lambda [(==> doms _ _) (arity-includes? (shape doms) n)])
            Cs)
      [(? values C) ((app-==> ctx C Œ±) Œ£ ‚Ñì W‚Çì)]
      [#f (err (Err:Arity G n ‚Ñì))]))

  (: app-Terminating/C : Ctx Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-Terminating/C ctx Œ±) Œ£ ‚Ñì W‚Çì)
    ???)

  (: app-And/C : Œ± Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path [(ŒîŒ£‚ÇÅ W‚ÇÅs) (app Œ£ ‚Ñì (unpack Œ±‚ÇÅ Œ£) W‚Çì)]
         (define Œ£‚ÇÅ (‚ß∫ Œ£ ŒîŒ£‚ÇÅ))
         (with-split-Œ£ Œ£‚ÇÅ 'values (collapse-W^ W‚ÇÅs)
           (Œª (_ ŒîŒ£*) (with-pre (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) (app (‚ß∫ Œ£‚ÇÅ ŒîŒ£*) ‚Ñì (unpack Œ±‚ÇÇ Œ£) W‚Çì)))
           (Œª (_ ŒîŒ£*) (values (hash (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) {set (list {set -ff})}) ‚àÖ))))]))

  (: app-Or/C : Œ± Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-Or/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path [(ŒîŒ£‚ÇÅ W‚ÇÅs) (app Œ£ ‚Ñì (unpack Œ±‚ÇÅ Œ£) W‚Çì)]
         (define Œ£‚ÇÅ (‚ß∫ Œ£ ŒîŒ£‚ÇÅ))
         (with-split-Œ£ Œ£‚ÇÅ 'values (collapse-W^ W‚ÇÅs)
           (Œª (_ ŒîŒ£*) (values (hash (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) W‚ÇÅs) ‚àÖ))
           (Œª (_ ŒîŒ£*) (with-pre (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) (app (‚ß∫ Œ£‚ÇÅ ŒîŒ£*) ‚Ñì (unpack Œ±‚ÇÇ Œ£) W‚Çì)))))]))

  (: app-Not/C : Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-Not/C Œ± ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path [(ŒîŒ£ Ws) (app Œ£ ‚Ñì (unpack Œ± Œ£) W‚Çì)]
         (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
         (with-split-Œ£ Œ£* 'values (collapse-W^ Ws)
           (Œª (_ ŒîŒ£*) (just -ff (‚ß∫ ŒîŒ£ ŒîŒ£*)))
           (Œª (_ ŒîŒ£*) (just -tt (‚ß∫ ŒîŒ£ ŒîŒ£*)))))]))

  (: app-One-Of/C : (‚Ñò Base) ‚Üí ‚ü¶F‚üß)
  (define ((app-One-Of/C bs) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (One-Of/C bs) ‚Ñì
      [(list V)
       (with-split-Œ£ Œ£ (One-Of/C bs) W‚Çì
         (Œª (_ ŒîŒ£) (just -tt ŒîŒ£))
         (Œª (_ ŒîŒ£) (just -ff ŒîŒ£)))]))

  (: app-St/C : -ùíæ (Listof Œ±) ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-St/C ùíæ Œ±s ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list V‚Çì)
       (with-split-Œ£ Œ£ (-st-p ùíæ) W‚Çì
         (Œª (W‚Çì* ŒîŒ£*) ((app-St/C-fields ùíæ 0 Œ±s ‚Ñì‚Çï) Œ£ ‚Ñì (car W‚Çì*)))
         (Œª (_ ŒîŒ£*) (just -ff ŒîŒ£*)))]))

  (: app-St/C-fields : -ùíæ Index (Listof Œ±) ‚Ñì ‚Üí Œ£ ‚Ñì V^ ‚Üí (Values R (‚Ñò Err)))
  (define ((app-St/C-fields ùíæ i Œ±s ‚Ñì‚Çï) Œ£ ‚Ñì V‚Çì)
    (match Œ±s
      ['() (just -tt)]
      [(cons Œ± Œ±s)
       (with-collapsing/R [(ŒîŒ£·µ¢ W·µ¢s) ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì V‚Çì)]
         (with-each-path [(ŒîŒ£‚Çú W‚Çús) (app (‚ß∫ Œ£ ŒîŒ£·µ¢) ‚Ñì (unpack Œ± Œ£) (collapse-W^ W·µ¢s))]
           (define ŒîŒ£ (‚ß∫ ŒîŒ£·µ¢ ŒîŒ£‚Çú))
           (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
           (with-split-Œ£ Œ£* 'values (collapse-W^ W‚Çús)
             (Œª (_ ŒîŒ£*) (with-pre ŒîŒ£ ((app-St/C-fields ùíæ (assert (+ 1 i) index?) Œ±s ‚Ñì‚Çï) Œ£* ‚Ñì V‚Çì)))
             (Œª (_ ŒîŒ£*) (just -ff ŒîŒ£*)))))]))

  (: app-opq : (‚Ñò P) ‚Üí ‚ü¶F‚üß)
  (define ((app-opq Ps) Œ£ ‚Ñì W‚Çì)
    (define n (length W‚Çì))
    (define es (if (‚àã Ps 'procedure?)
                   (Blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set 'procedure?}) (list {set (-‚óè ‚àÖ)}))
                   ‚àÖ))
    (define Œ±‚Çï·µ• (Œ≥:hv #f))
    (define ŒîŒ£:leak (alloc Œ±‚Çï·µ• (collect-behavioral-values {set W‚Çì} Œ£)))
    (with-pre ŒîŒ£:leak (hv (‚ß∫ Œ£ ŒîŒ£:leak) Œ±‚Çï·µ•)))

  (: app-err : V ‚Üí ‚ü¶F‚üß)
  (define ((app-err V) Œ£ ‚Ñì W‚Çì)
    (err (Blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set 'procedure?}) (list {set V}))))

  (: app/rest : Œ£ ‚Ñì V^ W V^ ‚Üí (Values R (‚Ñò Err)))
  (define (app/rest Œ£ ‚Ñì V‚Çï^ W‚Çì V·µ£)
    (define args:root (‚à™ (W-root W‚Çì) (V^-root V·µ£)))
    ((inst fold-ans V)
     (Œª (V‚Çï) (app‚ÇÅ/rest (gc (‚à™ args:root (V-root V‚Çï)) Œ£) ‚Ñì V‚Çï W‚Çì V·µ£))
     (unpack V‚Çï^ Œ£)))

  (: app‚ÇÅ/rest : Œ£ ‚Ñì V W V^ ‚Üí (Values R (‚Ñò Err)))
  (define (app‚ÇÅ/rest Œ£ ‚Ñì V W‚ÇÄ V·µ£)
    (define f (match V
                [(? Clo? V) (app-Clo/rest V)]
                [(? Case-Clo? V) (app-Case-Clo/rest V)]
                [(-st-mk ùíæ) (app-st-mk/rest ùíæ)]
                [(-st-p ùíæ) (app-st-p/rest ùíæ)]
                [(-st-ac ùíæ i) (app-st-ac/rest ùíæ i)]
                [(-st-mut ùíæ i) (app-st-mut/rest ùíæ i)]
                [(? symbol? o) (app-prim/rest o)]
                [(Guarded ctx (? Fn/C? G) Œ±)
                 (cond [(==>? G)     (app-==>/rest  ctx G Œ±)]
                       [(==>i? G)    (app-==>i/rest ctx G Œ±)]
                       [(‚àÄ/C? G)     (app-‚àÄ/C/rest  ctx G Œ±)]
                       [(Case-=>? G) (app-Case-=>/rest ctx G Œ±)]
                       [else (app-Terminating/C/rest ctx Œ±)])]
                [(And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-And/C/rest Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Or/C  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-Or/C/rest  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Not/C Œ± ‚Ñì) (app-Not/C/rest Œ± ‚Ñì)]
                [(St/C ùíæ Œ±s ‚Ñì) #:when (C-flat? V Œ£) (app-St/C/rest ùíæ Œ±s ‚Ñì)]
                [(-‚óè Ps) (app-opq/rest Ps)]
                [V (app-err/rest V)]))
    (ref-$! ($:Key:App/rest Œ£ ‚Ñì V W‚ÇÄ V·µ£) (Œª () (f Œ£ ‚Ñì W‚ÇÄ V·µ£))))

  (: app-Clo/rest : Clo ‚Üí ‚ü¶G‚üß)
  (define ((app-Clo/rest clo) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    (match-define (Clo (-var xs‚ÇÄ x·µ£) E Œ° ‚Ñì‚Çï) clo)
    (match (adjust-args Œ£ ‚Ñì (length xs‚ÇÄ) (unpack-W W‚ÇÄ Œ£) V·µ£)
      [(list W‚ÇÄ* V·µ£* ŒîŒ£)
       (define ŒîŒ£‚Çì (‚ß∫ (stack-copy Œ° Œ£)
                      (alloc-lex* xs‚ÇÄ W‚ÇÄ*)
                      (if x·µ£ (alloc-lex x·µ£ V·µ£*) ‚ä•ŒîŒ£)))
       (with-pre (‚ß∫ ŒîŒ£ ŒîŒ£‚Çì) (evl (‚ß∫ Œ£ ŒîŒ£ ŒîŒ£‚Çì) E))]
      [#f (err (Err:Arity ‚Ñì‚Çï `(,@W‚ÇÄ ,V·µ£) ‚Ñì))]))
  
  (: app-Case-Clo/rest : Case-Clo ‚Üí ‚ü¶G‚üß)
  (define ((app-Case-Clo/rest case-clo) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)
  
  (: app-st-mk/rest : -ùíæ ‚Üí ‚ü¶G‚üß)
  (define ((app-st-mk/rest ùíæ) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-st-p/rest : -ùíæ ‚Üí ‚ü¶G‚üß)
  (define ((app-st-p/rest ùíæ) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-st-ac/rest : -ùíæ Index ‚Üí ‚ü¶G‚üß)
  (define ((app-st-ac/rest ùíæ i) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-st-mut/rest : -ùíæ Index ‚Üí ‚ü¶G‚üß)
  (define ((app-st-mut/rest ùíæ i) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-prim/rest : -o ‚Üí ‚ü¶G‚üß)
  (define ((app-prim/rest o) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-==>/rest : Ctx ==> Œ± ‚Üí ‚ü¶G‚üß)
  (define ((app-==>/rest ctx G Œ±) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-==>i/rest : Ctx ==>i Œ± ‚Üí ‚ü¶G‚üß)
  (define ((app-==>i/rest ctx G Œ±) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-‚àÄ/C/rest : Ctx ‚àÄ/C Œ± ‚Üí ‚ü¶G‚üß)
  (define ((app-‚àÄ/C/rest ctx G Œ±) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-Case-=>/rest : Ctx Case-=> Œ± ‚Üí ‚ü¶G‚üß)
  (define ((app-Case-=>/rest ctx G Œ±) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-Terminating/C/rest : Ctx Œ± ‚Üí ‚ü¶G‚üß)
  (define ((app-Terminating/C/rest ctx Œ±) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-And/C/rest : Œ± Œ± ‚Ñì ‚Üí ‚ü¶G‚üß)
  (define ((app-And/C/rest Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-Or/C/rest : Œ± Œ± ‚Ñì ‚Üí ‚ü¶G‚üß)
  (define ((app-Or/C/rest Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-Not/C/rest : Œ± ‚Ñì ‚Üí ‚ü¶G‚üß)
  (define ((app-Not/C/rest Œ± ‚Ñì) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-St/C/rest : -ùíæ (Listof Œ±) ‚Ñì ‚Üí ‚ü¶G‚üß)
  (define ((app-St/C/rest ùíæ Œ±s ‚Ñì) Œ£ ‚Ñì W‚ÇÄ V·µ£)
    ???)

  (: app-opq/rest : (‚Ñò P) ‚Üí ‚ü¶G‚üß)
  (define ((app-opq/rest Ps) Œ£ ‚Ñì W‚ÇÄ V·µ£) ((app-opq Ps) Œ£ ‚Ñì `(,@W‚ÇÄ ,V·µ£)))
  
  (: app-err/rest : V ‚Üí ‚ü¶G‚üß)
  (define ((app-err/rest V) Œ£ ‚Ñì W‚ÇÄ V·µ£) ((app-err V) Œ£ ‚Ñì `(,@W‚ÇÄ ,V·µ£)))

  (: adjust-args : Œ£ ‚Ñì Natural W V^ ‚Üí (Option (List W V^ ŒîŒ£)))
  (define (adjust-args Œ£ ‚Ñì required-inits W‚ÇÄ V·µ£)
    (match (- required-inits (length W‚ÇÄ))
      [(? positive? remaining-inits)
       (match (unalloc-prefix remaining-inits V·µ£ Œ£)
         [(cons W‚ÇÅ V·µ£*) (list (append W‚ÇÄ W‚ÇÅ) V·µ£* ‚ä•ŒîŒ£)]
         [#f #f])]
      [0 (list W‚ÇÄ V·µ£ ‚ä•ŒîŒ£)]
      [(? negative?)
       (define-values (W‚ÇÄ* W‚ÇÅ) (split-at W‚ÇÄ required-inits))
       (define-values (V·µ£* ŒîŒ£) (alloc-rest ‚Ñì W‚ÇÅ #:tail V·µ£))
       (list W‚ÇÄ* V·µ£* ŒîŒ£)]))

  (define-simple-macro (with-guarded-arity W f ‚Ñì [p body ...] ...)
    (match W
      [p body ...] ...
      [_ (err (Err:Arity f (length W) ‚Ñì))]))
  
  )
