#lang typed/racket/base

(provide app@)

(require racket/set
         racket/list
         racket/match
         racket/vector
         (only-in racket/function curry)
         typed/racket/unit
         syntax/parse/define
         set-extras
         bnf
         unreachable
         "../utils/map.rkt"
         "../utils/patterns.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(‚ü¶F‚üß . ‚âú . (Œ£ ‚Ñì W ‚Üí R))
(‚ü¶G‚üß . ‚âú . (Œ£ ‚Ñì W V^ ‚Üí R))

(define-unit app@
  (import meta-functions^ static-info^
          sto^ cache^ val^ pretty-print^
          prims^ prover^
          exec^ evl^ mon^ hv^ gc^ termination^)
  (export app^)

  ;; A call history tracks the call chain that leads to the current expression, modulo loops
  (Stk . ‚âú . (Listof E))
  (define current-chain ((inst make-parameter Stk) '()))
  ;; Global table remembering the widest store for each chain
  ;; FIXME: memory leak. Reset for each program.
  (define global-stores : (HashTable (Pairof Stk Œì) Œ£) (make-hash))

  (: app : Œ£ ‚Ñì V^ W ‚Üí R)
  (define (app Œ£ ‚Ñì V‚Çï^ W*)
    (define-values (W ŒîŒ£‚ÇÅ) (escape-clos Œ£ W*))
    (define W:root (W-root W))
    (define r
      ((inst fold-ans V)
       (Œª (V‚Çï)
         (define root (‚à™ W:root (V-root V‚Çï)))
         (define Œ£* (gc root (‚ß∫ Œ£ ŒîŒ£‚ÇÅ)))
         (ref-$! ($:Key:App Œ£* (current-MS) ‚Ñì V‚Çï W)
                 (Œª () (gc-R root Œ£* (ŒîŒ£‚ß∫R ŒîŒ£‚ÇÅ (app‚ÇÅ Œ£* ‚Ñì V‚Çï W))))))
       (unpack V‚Çï^ Œ£)))

    (define T‚Çê : (Option T)
      (match* (V‚Çï^ W*)
        [({singleton-set (? K? o)}
          (list {singleton-set (and #{T‚Çì : (Listof (U T -b))} (or (? -b?) (? T?)))} ...))
         #:when (for/or : Boolean ([T (in-list T‚Çì)])
                  (or (Œ≥? T)
                      (and (T:@? T) (not (set-empty? (T-root T))))))
         (T:@/simp o T‚Çì)]
        [(_ _) #f]))
    (if T‚Çê
        (let ([W‚Çê* (list {set T‚Çê})])
          (for/fold ([r* : R r])
                    ([(W‚Çê ŒîŒ£s) (in-hash r)]
                     #:when (= 1 (length W‚Çê)))
            (match-define (list Vs‚Çê) W‚Çê)
            (for/fold ([r* : R (hash-remove r* W‚Çê)])
                      ([ŒîŒ£·µ¢ : ŒîŒ£ (in-set ŒîŒ£s)])
              (define Vs‚Çê* (unpack Vs‚Çê (‚ß∫ Œ£ ŒîŒ£·µ¢)))
              (define ŒîŒ£*
                (match T‚Çê ; ignore mapping for symbolic accesses
                  [(T:@ (? -st-ac?) _) ŒîŒ£·µ¢]
                  [_
                   (match-define (cons ŒîŒû ŒîŒì) ŒîŒ£·µ¢)
                   (define Vs‚Çê**
                     (match (hash-ref ŒîŒì T‚Çê #f)
                       [(? set? Vs‚Çê‚ÇÄ) (V‚äì Vs‚Çê‚ÇÄ Vs‚Çê*)]
                       [#f Vs‚Çê*]))
                   (and Vs‚Çê**
                        (let ([ŒîŒì‚ÇÅ (hash-set ŒîŒì T‚Çê Vs‚Çê**)])
                          (define ŒîŒì*
                            (match Vs‚Çê
                              [{singleton-set (? T? T*)}
                               (hash-set ŒîŒì‚ÇÅ (T:@ (K:‚â°) (list T‚Çê T*)) {set -tt})]
                              [_ ŒîŒì‚ÇÅ]))
                          (cons ŒîŒû ŒîŒì*)))]))
              (if ŒîŒ£*
                  (hash-update r* W‚Çê* (Œª ([ŒîŒ£s* : (‚Ñò ŒîŒ£)]) (set-add ŒîŒ£s* ŒîŒ£*)) mk-‚àÖ)
                  r*))))
        r))

  (: app/C : Œ£ ‚Ñì V^ W ‚Üí R)
  (define (app/C Œ£ ‚Ñì Cs W)
    (define-values (bs Cs*) (set-partition -b? Cs))
    (R‚äî (cond [(set-empty? Cs*) ‚ä•R]
              [else (app Œ£ ‚Ñì Cs* W)])
        (cond [(set-empty? bs) ‚ä•R]
              [else (app‚ÇÅ Œ£ ‚Ñì 'equal? (cons bs W))])))

  (: app‚ÇÅ : Œ£ ‚Ñì V W ‚Üí R)
  (define (app‚ÇÅ Œ£ ‚Ñì V W)
    (define f (match V
                [(? -Œª? V) (app-Œª V)]
                [(? Clo? V) (app-Clo V)]
                [(? Case-Clo? V) (app-Case-Clo V)]
                [(-st-mk ùíæ) (app-st-mk ùíæ)]
                [(-st-p ùíæ) (app-st-p ùíæ)]
                [(-st-ac ùíæ i) (app-st-ac ùíæ i)]
                [(-st-mut ùíæ i) (app-st-mut ùíæ i)]
                [(? symbol? o) (app-prim o)]
                [(Guarded ctx (? Fn/C? G) Œ±)
                 (cond [(==>i? G) (app-==>i ctx G Œ±)]
                       [(‚àÄ/C? G) (app-‚àÄ/C  ctx G Œ±)]
                       [else     (app-Case-=> ctx G Œ±)])]
                [(And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Or/C  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) #:when (C-flat? V Œ£) (app-Or/C  Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì)]
                [(Not/C Œ± ‚Ñì) (app-Not/C Œ± ‚Ñì)]
                [(X/C Œ±) (app-X/C Œ±)]
                [(One-Of/C bs) (app-One-Of/C bs)]
                [(? St/C?) #:when (C-flat? V Œ£) (app-St/C V)]
                [(-‚óè Ps) (app-opq Ps)]
                [(P:‚â° T) (app-P 'equal? T)]
                [(P:= T) (app-P '= T)]
                [(P:> T) (app-P '< T)]
                [(P:‚â• T) (app-P '<= T)]
                [(P:< T) (app-P '> T)]
                [(P:‚â§ T) (app-P '>= T)]
                [V (app-err! V)]))
    (f Œ£ ‚Ñì W))

  (: app-Œª : -Œª ‚Üí ‚ü¶F‚üß)
  (define ((app-Œª V‚Çï) Œ£ ‚Ñì W‚Çì*)
    (match-define (-Œª fml E ‚Ñì‚Çï) V‚Çï)
    (with-guarded-arity W‚Çì* ‚Ñì‚Çï ‚Ñì
      [(app length (? (curry arity-includes? (shape fml))))
       (with-sct-guard Œ£ ‚Ñì V‚Çï W‚Çì*
         (Œª ()
           (define-values (ŒîŒ£‚Çì W‚Çì) (alloc-args Œ£ fml W‚Çì*))
           ;; gc one more time against unpacked arguments
           ;; TODO: clean this up so only need to gc once?
           ;; TODO: code dup
           (let* ([root (‚à™ (E-root V‚Çï) (W-root W‚Çì))]
                  [Œ£‚ÇÅ (gc root Œ£)])
             (define r‚Çê (evl/history (‚ß∫ Œ£‚ÇÅ ŒîŒ£‚Çì) E))
             (define rn (make-renamings fml W‚Çì*))
             (fix-return rn Œ£‚ÇÅ (R-escape-clos Œ£‚ÇÅ (ŒîŒ£‚ß∫R ŒîŒ£‚Çì r‚Çê))))))]))

  (: app-Clo : Clo ‚Üí ‚ü¶F‚üß)
  (define ((app-Clo V‚Çï) Œ£ ‚Ñì W‚Çì*)
    (match-define (Clo fml E (and Œ±‚Çï (Œ±:dyn (Œ≤:clo ‚Ñì‚Çï) _))) V‚Çï)
    (with-guarded-arity W‚Çì* ‚Ñì‚Çï ‚Ñì
      [(app length (? (curry arity-includes? (shape fml))))
       (with-sct-guard Œ£ ‚Ñì (-Œª fml E ‚Ñì‚Çï) W‚Çì*
         (Œª ()
           (define-values (ŒîŒ£‚Çì W‚Çì) (alloc-args Œ£ fml W‚Çì*))
           ;; gc one more time against unpacked arguments
           ;; TODO: clean this up so only need to gc once?
           (let* ([root (‚à™ (V-root V‚Çï) (W-root W‚Çì))]
                  [Œì* (Œ£@/env Œ±‚Çï Œ£)]
                  [Œ£‚ÇÅ (cons (car (gc root Œ£)) Œì*)])
             (define r‚Çê (evl/history (‚ß∫ Œ£‚ÇÅ ŒîŒ£‚Çì) E)) ; no `ŒîŒ£‚Çì` in result
             (define rn (insert-fv-erasures Œì* (make-renamings fml W‚Çì*)))
             (fix-return rn Œ£‚ÇÅ (R-escape-clos Œ£‚ÇÅ (ŒîŒ£‚ß∫R ŒîŒ£‚Çì r‚Çê))))))]))

  (: alloc-args : Œ£ -formals W ‚Üí (Values ŒîŒ£ W))
  ;; Unpack and allocate the arguments given parameter list
  (define (alloc-args Œ£ fml W*)
    (define W (unpack-W W* Œ£))
    (match-define (-var xs x·µ£) fml)
    (define-values (W‚ÇÄ W·µ£) (if x·µ£ (split-at W (length xs)) (values W '())))
    (values (‚ß∫ (alloc-lex* Œ£ xs W‚ÇÄ)
               (if x·µ£ (alloc-vararg Œ£ x·µ£ W·µ£) ‚ä•ŒîŒ£)
               (cons ‚ä•Œû (rename-props Œ£ xs W*)))
            W))

  (: rename-props : Œ£ (Listof Symbol) W ‚Üí Œì)
  (define (rename-props Œ£ xs W)
    (define caller-props
      (for/hash : Œì ([(T D) (in-hash (cdr Œ£))] #:when (prop? T D))
        (values T D)))

    (: acc-rn : Renamings Œ≥ T ‚Üí Renamings)
    (define (acc-rn rn lhs rhs)
      (let loop ([rn : Renamings rn] [lhs : T lhs] [rhs : T rhs])
        (define rn* (hash-set rn rhs lhs))
        (match rhs
          [(T:@ (-st-mk ùíæ) Ts)
           (for/fold ([rn : Renamings rn*])
                     ([(T·µ¢ i) (in-indexed Ts)] #:when (T? T·µ¢))
             (loop rn (T:@ (-st-ac ùíæ (assert i index?)) (list lhs)) T·µ¢))]
          [_ rn*])))
    (define rn
      (rename (for/fold ([rn : Renamings (hash)])
                        ([x (in-list xs)]
                         [Vs (in-list W)]
                         #:when (= 1 (set-count Vs))
                         [V (in-value (set-first Vs))]
                         #:when (T? V))
                (acc-rn rn (Œ≥:lex x) V))))
    (for*/hash : Œì ([(T D) (in-hash caller-props)]
                    [T* (in-value (rn T))] #:when (T? T*))
      (values T* D)))

  (: with-sct-guard : Œ£ ‚Ñì V W (‚Üí R) ‚Üí R)
  (define (with-sct-guard Œ£ ‚Ñì ee:raw W comp)
    (define ee (check-point ee:raw))
    (match (current-MS)
      [(MS l+ ‚Ñì‚Çí M)
       (match (current-app)
         [(? values er)
          (match (update-M Œ£ M er ee W)
            [(? values M*)
             (parameterize ([current-MS (MS l+ ‚Ñì‚Çí M*)]
                            [current-app ee])
               (comp))]
            [#f (err! (Err:Term l+ ‚Ñì ‚Ñì‚Çí (assert ee -Œª?) W))
                ‚ä•R])]
         [#f (parameterize ([current-app ee])
               (comp))])]
      [#f (comp)]))

  (: evl/history : Œ£ E ‚Üí R)
  (define (evl/history Œ£‚ÇÅ E)
    (define stk (current-chain))
    (define stk* (cond [(memq E stk) => values]
                       [else (cons E stk)]))
    (define k (cons stk* (remove-props (cdr Œ£‚ÇÅ))))
    (define Œ£* (match (hash-ref global-stores k #f)
                 [(? values Œ£‚ÇÄ) (ŒîŒ£‚äî Œ£‚ÇÄ Œ£‚ÇÅ)]
                 [_ Œ£‚ÇÅ]))
    (hash-set! global-stores k Œ£*)
    (parameterize ([current-chain stk*])
      (evl Œ£* E)))

  (: remove-props : Œì ‚Üí Œì)
  (define (remove-props Œì‚ÇÄ)
    (for/fold ([acc : Œì Œì‚ÇÄ]) ([(T D) (in-hash Œì‚ÇÄ)] #:when (prop? T D))
      (hash-remove acc T)))

  (: app-Case-Clo : Case-Clo ‚Üí ‚ü¶F‚üß)
  (define ((app-Case-Clo V‚Çï) Œ£ ‚Ñì W‚Çì)
    (match-define (Case-Clo cases ‚Ñì‚Çï) V‚Çï)
    (define n (length W‚Çì))
    (match ((inst findf Clo) (Œª (clo) (arity-includes? (shape (Clo-_0 clo)) n)) cases)
      [(? values clo) ((app-Clo clo) Œ£ ‚Ñì W‚Çì)]
      [#f (err! (Err:Arity ‚Ñì‚Çï n ‚Ñì)) ‚ä•R]))

  (: app-st-mk : -ùíæ ‚Üí ‚ü¶F‚üß)
  (define ((app-st-mk ùíæ) Œ£ ‚Ñì W‚Çì)
    (define n (count-struct-fields ùíæ))
    (if (= n (length W‚Çì))
        (let ([Œ± (Œ±:dyn (Œ≤:st-elems ‚Ñì ùíæ) H‚ÇÄ)])
          (R-of (St Œ± ‚àÖ) (alloc Œ± (list->vector (unpack-W W‚Çì Œ£)))))
        (begin (err! (Err:Arity (-st-mk ùíæ) (length W‚Çì) ‚Ñì))
               ‚ä•R)))

  (: app-st-p : -ùíæ ‚Üí ‚ü¶F‚üß)
  (define ((app-st-p ùíæ) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-p ùíæ) ‚Ñì
      [(list _) (implement-predicate Œ£ (-st-p ùíæ) W‚Çì)]))

  (: app-st-ac : -ùíæ Index ‚Üí ‚ü¶F‚üß)
  (define ((app-st-ac ùíæ i) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-ac ùíæ i) ‚Ñì
      [(list V‚Çì)
       (with-split-Œ£ Œ£ (-st-p ùíæ) W‚Çì
         (Œª (W‚Çì* ŒîŒ£‚ÇÅ) (ŒîŒ£‚ß∫R ŒîŒ£‚ÇÅ ((unchecked-app-st-ac ùíæ i) (‚ß∫ Œ£ ŒîŒ£‚ÇÅ) ‚Ñì (car W‚Çì*))))
         (Œª (W‚Çì* ŒîŒ£‚ÇÇ)
           (define ‚Ñì‚Çí (‚Ñì-with-src +‚Ñì‚ÇÄ (-ùíæ-name ùíæ)))
           (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì ‚Ñì‚Çí (list {set (-st-p ùíæ)}) W‚Çì*))
           ‚ä•R))]))

  (: unchecked-app-st-ac : -ùíæ Index ‚Üí Œ£ ‚Ñì V^ ‚Üí R)
  (define ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì V‚Çì)
    (define ac‚ÇÅ : (V ‚Üí R)
      (match-lambda
        [(St Œ± Ps)
         (define V·µ¢ (vector-ref (Œ£@/blob Œ± Œ£) i))
         (define-values (V* ŒîŒ£)
           (refine (unpack V·µ¢ Œ£) (ac-Ps (-st-ac ùíæ i) Ps) Œ£))
         (R-of V* ŒîŒ£)]
        [(Guarded (cons l+ l-) (? St/C? C) Œ±·µ•)
         (define-values (Œ±‚Çï ‚Ñì‚Çï _) (St/C-fields C))
         (define C·µ¢ (vector-ref (Œ£@/blob Œ±‚Çï Œ£) i))
         (with-collapsing/R [(ŒîŒ£ Ws) ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì (Œ£@ Œ±·µ• Œ£))]
           (ŒîŒ£‚ß∫R ŒîŒ£ (mon (‚ß∫ Œ£ ŒîŒ£) (Ctx l+ l- ‚Ñì‚Çï ‚Ñì) C·µ¢ (car (collapse-W^ Ws)))))]
        [(and V‚ÇÄ (-‚óè Ps))
         (case (sat Œ£ (-st-p ùíæ) {set V‚ÇÄ})
           [(‚úó) ‚ä•R]
           [else (R-of (st-ac-‚óè ùíæ i Ps Œ£))])]
        [_ ‚ä•R]))
    
    (fold-ans/collapsing ac‚ÇÅ (unpack V‚Çì Œ£)))

  (: st-ac-‚óè : -ùíæ Index (‚Ñò P) Œ£ ‚Üí V^)
  (define (st-ac-‚óè ùíæ i Ps Œ£)
    (define V
      (if (prim-struct? ùíæ)
          {set (-‚óè ‚àÖ)}
          ;; Track access to user-defined structs
          (Œ£@ (Œ≥:escaped-field ùíæ i) Œ£)))
    (define-values (V* _) (refine V (ac-Ps (-st-ac ùíæ i) Ps) Œ£))
    V*)

  (: app-st-mut : -ùíæ Index ‚Üí ‚ü¶F‚üß)
  (define ((app-st-mut ùíæ i) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (-st-mut ùíæ i) ‚Ñì
      [(list V‚Çì V*)
       (with-split-Œ£ Œ£ (-st-p ùíæ) (list V‚Çì)
         (Œª (W‚Çì* ŒîŒ£‚ÇÅ) (ŒîŒ£‚ß∫R ŒîŒ£‚ÇÅ ((unchecked-app-st-mut ùíæ i) (‚ß∫ Œ£ ŒîŒ£‚ÇÅ) ‚Ñì (car W‚Çì*) V*)))
         (Œª (W‚Çì* ŒîŒ£‚ÇÇ) (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set (-st-p ùíæ)}) W‚Çì*))
            ‚ä•R))]))

  (: unchecked-app-st-mut : -ùíæ Index ‚Üí Œ£ ‚Ñì V^ V^ ‚Üí R)
  (define ((unchecked-app-st-mut ùíæ i) Œ£ ‚Ñì V‚Çì V*‚ÇÄ)
    (define V* (unpack V*‚ÇÄ Œ£))
    ((inst fold-ans V)
     (match-lambda
       [(St Œ± _)
        (define S (Œ£@/blob Œ± Œ£))
        (define S* (vector-copy S))
        (vector-set! S* i V*)
        (R-of -void (mut Œ± S* Œ£))]
       [(Guarded (cons l+ l-) (? St/C? C) Œ±·µ•)
        (define-values (Œ±‚Çï ‚Ñì‚Çï _) (St/C-fields C))
        (define C·µ¢ (vector-ref (Œ£@/blob Œ±‚Çï Œ£) i))
        (with-collapsing/R [(ŒîŒ£ Ws) (mon Œ£ (Ctx l- l+ ‚Ñì‚Çï ‚Ñì) C·µ¢ V*)]
          (ŒîŒ£‚ß∫R ŒîŒ£ ((unchecked-app-st-mut ùíæ i) (‚ß∫ Œ£ ŒîŒ£) ‚Ñì (Œ£@ Œ±·µ• Œ£) V*)))]
       [(? -‚óè?) (R-of -void (alloc (Œ≥:hv #f) V*))]
       [_ ‚ä•R])
     (unpack V‚Çì Œ£)))

  (: app-prim : Symbol ‚Üí ‚ü¶F‚üß)
  (define ((app-prim o) Œ£ ‚Ñì W‚Çì)
    ; TODO massage raw result
    ((get-prim o) Œ£ ‚Ñì W‚Çì))

  (: app-==>i : (Pairof -l -l) ==>i Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-==>i ctx:saved G Œ±‚Çï) Œ£‚ÇÄ-full ‚Ñì W‚Çì*)
    (match-define (cons l+ l-) ctx:saved)
    (define W‚Çì (unpack-W W‚Çì* Œ£‚ÇÄ-full))
    (define Œ£‚ÇÄ (gc (‚à™ (set-add (V-root G) Œ±‚Çï) (W-root W‚Çì)) Œ£‚ÇÄ-full))
    (match-define (==>i (-var Doms ?Doms:rest) Rngs ?total) G)

    (: mon-doms : Œ£ -l -l (Listof Dom) W ‚Üí R)
    (define (mon-doms Œ£‚ÇÄ l+ l- Doms‚ÇÄ W‚Çì‚ÇÄ)
      (let go ([Œ£ : Œ£ Œ£‚ÇÄ] [Doms : (Listof Dom) Doms‚ÇÄ] [W‚Çì : W W‚Çì‚ÇÄ])
        (match* (Doms W‚Çì)
          [('() '()) (R-of '())]
          [((cons Dom Doms) (cons V‚Çì W‚Çì))
           (with-each-path ([(ŒîŒ£‚Çì W‚Çì*) (mon-dom Œ£ l+ l- Dom V‚Çì)]
                            [(ŒîŒ£* W*) (go (‚ß∫ Œ£ ŒîŒ£‚Çì) Doms W‚Çì)])
             (R-of (cons (car W‚Çì*) W*) (‚ß∫ ŒîŒ£‚Çì ŒîŒ£*)))]
          [(_ _)
           (define Cs
             (for/list : W ([D (in-list Doms‚ÇÄ)])
               (match (Dom-ctc D)
                 [(? Clo? C) {set C}]
                 [(? Œ±? Œ±) (unpack (Œ£@ Œ± Œ£‚ÇÄ) Œ£‚ÇÄ)])))
           (err! (blm l+ ‚Ñì #|FIXME|# (‚Ñì-with-src +‚Ñì‚ÇÄ 'Œõ) Cs W‚Çì‚ÇÄ))
           ‚ä•R])))

    (: mon-dom : Œ£ -l -l Dom V^ ‚Üí R)
    (define (mon-dom Œ£ l+ l- dom V)
      (match-define (Dom x c ‚Ñì‚Çì) dom)
      (define ctx (Ctx l+ l- ‚Ñì‚Çì ‚Ñì))
      (match c
        ;; Dependent domain
        [(Clo (-var xs #f) E (and Œ±‚Çï (Œ±:dyn (Œ≤:clo ‚Ñì) _)))
         (define Œ£‚ÇÄ
           (match-let ([(cons Œû Œì:ctx) Œ£])
             (define Œì* ; TODO make sure ok due to "closure" in `->i` not being general
               (for/fold ([Œì* : Œì Œì:ctx])
                         ([(T D) (in-hash (Œ£@/env Œ±‚Çï Œ£))]
                          #:unless (hash-has-key? Œì* T))
                 (hash-set Œì* T D)))
             (cons Œû Œì*)))
         (with-each-path ([(ŒîŒ£‚ÇÅ W) (evl Œ£‚ÇÄ E)]
                         [(ŒîŒ£‚ÇÇ W) (mon (‚ß∫ Œ£‚ÇÄ ŒîŒ£‚ÇÅ) ctx (car W) V)])
           (match-define (list V*) W) ; FIXME catch
           (R-of W (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£‚ÇÇ (alloc-lex Œ£ x V*))))]
        ;; Non-dependent domain
        [(? Œ±? Œ±)
         (with-each-path ([(ŒîŒ£ W) (mon Œ£ ctx (Œ£@ Œ± Œ£‚ÇÄ) V)])
           (match-define (list V*) W)
           (R-of W (‚ß∫ ŒîŒ£ (alloc-lex Œ£ x V*))))]))

    (define Dom-ref (match-lambda [(Dom x _ _) {set (Œ≥:lex x)}]))

    ;; Maybe monitor the result from applying the inner function
    (define (with-result [ŒîŒ£-acc : ŒîŒ£] [comp : (‚Üí R)])
      (define r
        (if Rngs
            (with-each-path ([(ŒîŒ£‚Çê W‚Çê) (comp)])
              (ŒîŒ£‚ß∫R (‚ß∫ ŒîŒ£-acc ŒîŒ£‚Çê) (mon-doms (‚ß∫ Œ£‚ÇÄ ŒîŒ£-acc ŒîŒ£‚Çê) l+ l- Rngs W‚Çê)))
            (ŒîŒ£‚ß∫R ŒîŒ£-acc (comp))))
      (fix-return (make-renamings (map Dom-name Doms) W‚Çì*) Œ£‚ÇÄ r))

    (: maybe-check-termination : (‚Üí R) ‚Üí (‚Üí R))
    (define ((maybe-check-termination comp))
      (with-sct-guard Œ£‚ÇÄ ‚Ñì (Guarded ctx:saved G Œ±‚Çï) W‚Çì*
        (cond [(not ?total) comp]
              [else (Œª ()
                      (parameterize ([current-MS
                                      (MS l+ ?total (match (current-MS)
                                                      [(MS _ _ M) M]
                                                      [#f         (hash)]))])
                        (comp)))])))

    (with-guarded-arity W‚Çì G ‚Ñì
      [W‚Çì
       #:when (and (not ?Doms:rest) (= (length W‚Çì) (length Doms)))
       (with-each-path ([(ŒîŒ£‚Çì _) (mon-doms Œ£‚ÇÄ l- l+ Doms W‚Çì)])
         (define args (map Dom-ref Doms))
         (with-result ŒîŒ£‚Çì (maybe-check-termination (Œª () (app (‚ß∫ Œ£‚ÇÄ ŒîŒ£‚Çì) ‚Ñì (Œ£@ Œ±‚Çï Œ£‚ÇÄ) args)))))]
      [W‚Çì
       #:when (and ?Doms:rest (>= (length W‚Çì) (length Doms)))
       (define-values (W‚ÇÄ W·µ£) (split-at W‚Çì (length Doms)))
       (define-values (V·µ£ ŒîŒ£·µ£) (alloc-rest (Dom-loc ?Doms:rest) W·µ£))
       (with-each-path ([(ŒîŒ£-init _) (mon-doms Œ£‚ÇÄ l- l+ Doms W‚ÇÄ)]
                       [(ŒîŒ£-rest _) (mon-dom (‚ß∫ Œ£‚ÇÄ ŒîŒ£-init ŒîŒ£·µ£) l- l+ ?Doms:rest V·µ£)])
         (define args-init (map Dom-ref Doms))
         (define arg-rest (Dom-ref ?Doms:rest))
         (with-result (‚ß∫ ŒîŒ£-init ŒîŒ£·µ£ ŒîŒ£-rest)
           (maybe-check-termination
            (Œª () (app/rest (‚ß∫ Œ£‚ÇÄ ŒîŒ£-init ŒîŒ£·µ£ ŒîŒ£-rest) ‚Ñì (Œ£@ Œ±‚Çï Œ£‚ÇÄ) args-init arg-rest)))))]))

  (: app-‚àÄ/C : (Pairof -l -l) ‚àÄ/C Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-‚àÄ/C ctx G Œ±) Œ£‚ÇÄ ‚Ñì W‚Çì)
    (with-each-path ([(ŒîŒ£ W‚Çï) (inst-‚àÄ/C Œ£‚ÇÄ ctx G Œ± ‚Ñì)])
      (ŒîŒ£‚ß∫R ŒîŒ£ (app (‚ß∫ Œ£‚ÇÄ ŒîŒ£) ‚Ñì (car W‚Çï) W‚Çì))))

  (: app-Case-=> : (Pairof -l -l) Case-=> Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-Case-=> ctx G Œ±) Œ£ ‚Ñì W‚Çì)
    (define n (length W‚Çì))
    (match-define (Case-=> Cs) G)
    (match ((inst findf ==>i)
            (match-lambda [(==>i doms _ _) (arity-includes? (shape doms) n)])
            Cs)
      [(? values C) ((app-==>i ctx C Œ±) Œ£ ‚Ñì W‚Çì)]
      [#f (err! (Err:Arity G n ‚Ñì)) ‚ä•R]))

  (: app-And/C : Œ± Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path ([(ŒîŒ£‚ÇÅ W‚ÇÅ) (app/C Œ£ ‚Ñì (Œ£@ Œ±‚ÇÅ Œ£) W‚Çì)])
         (define Œ£‚ÇÅ (‚ß∫ Œ£ ŒîŒ£‚ÇÅ))
         (with-split-Œ£ Œ£‚ÇÅ 'values W‚ÇÅ
           (Œª (_ ŒîŒ£*) (ŒîŒ£‚ß∫R (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) (app/C (‚ß∫ Œ£‚ÇÅ ŒîŒ£*) ‚Ñì (Œ£@ Œ±‚ÇÇ Œ£) W‚Çì)))
           (Œª (_ ŒîŒ£*) (R-of -ff (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*)))))]))

  (: app-Or/C : Œ± Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-Or/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path ([(ŒîŒ£‚ÇÅ W‚ÇÅ) (app/C Œ£ ‚Ñì (Œ£@ Œ±‚ÇÅ Œ£) W‚Çì)])
         (define Œ£‚ÇÅ (‚ß∫ Œ£ ŒîŒ£‚ÇÅ))
         (with-split-Œ£ Œ£‚ÇÅ 'values W‚ÇÅ
           (Œª (_ ŒîŒ£*) (R-of W‚ÇÅ (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*)))
           (Œª (_ ŒîŒ£*) (ŒîŒ£‚ß∫R (‚ß∫ ŒîŒ£‚ÇÅ ŒîŒ£*) (app/C (‚ß∫ Œ£‚ÇÅ ŒîŒ£*) ‚Ñì (Œ£@ Œ±‚ÇÇ Œ£) W‚Çì)))))]))

  (: app-Not/C : Œ± ‚Ñì ‚Üí ‚ü¶F‚üß)
  (define ((app-Not/C Œ± ‚Ñì‚Çï) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list _)
       (with-each-path ([(ŒîŒ£ W) (app/C Œ£ ‚Ñì (Œ£@ Œ± Œ£) W‚Çì)])
         (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
         (with-split-Œ£ Œ£* 'values W
           (Œª (_ ŒîŒ£*) (R-of -ff (‚ß∫ ŒîŒ£ ŒîŒ£*)))
           (Œª (_ ŒîŒ£*) (R-of -tt (‚ß∫ ŒîŒ£ ŒîŒ£*)))))]))

  (: app-X/C : Œ± ‚Üí ‚ü¶F‚üß)
  (define ((app-X/C Œ±) Œ£ ‚Ñì W‚Çì) (app/C Œ£ ‚Ñì (Œ£@ Œ± Œ£) (unpack-W W‚Çì Œ£)))

  (: app-One-Of/C : (‚Ñò Base) ‚Üí ‚ü¶F‚üß)
  (define ((app-One-Of/C bs) Œ£ ‚Ñì W‚Çì)
    (with-guarded-arity W‚Çì (One-Of/C bs) ‚Ñì
      [(list V)
       (with-split-Œ£ Œ£ (One-Of/C bs) W‚Çì
         (Œª (_ ŒîŒ£) (R-of -tt ŒîŒ£))
         (Œª (_ ŒîŒ£) (R-of -ff ŒîŒ£)))]))

  (: app-St/C : St/C ‚Üí ‚ü¶F‚üß)
  (define ((app-St/C C) Œ£ ‚Ñì W‚Çì)
    (define-values (Œ± ‚Ñì‚Çï ùíæ) (St/C-fields C))
    (define S (Œ£@/blob Œ± Œ£))
    (with-guarded-arity W‚Çì ‚Ñì‚Çï ‚Ñì
      [(list V‚Çì)
       (with-split-Œ£ Œ£ (-st-p ùíæ) W‚Çì
         (Œª (W‚Çì* ŒîŒ£*) (ŒîŒ£‚ß∫R ŒîŒ£* ((app-St/C-fields ùíæ 0 S ‚Ñì‚Çï) (‚ß∫ Œ£ ŒîŒ£*) ‚Ñì (car W‚Çì*))))
         (Œª (_ ŒîŒ£*) (R-of -ff ŒîŒ£*)))]))

  (: app-St/C-fields : -ùíæ Index (Vectorof V^) ‚Ñì ‚Üí Œ£ ‚Ñì V^ ‚Üí R)
  (define ((app-St/C-fields ùíæ i Cs ‚Ñì‚Çï) Œ£‚ÇÄ ‚Ñì V‚Çì)
    (let loop ([i : Index 0] [Œ£ : Œ£ Œ£‚ÇÄ])
      (if (>= i (vector-length Cs))
          (R-of -tt)
          (with-collapsing/R [(ŒîŒ£·µ¢ W·µ¢s) ((unchecked-app-st-ac ùíæ i) Œ£ ‚Ñì V‚Çì)]
            (with-each-path ([(ŒîŒ£‚Çú W‚Çú) (app/C (‚ß∫ Œ£ ŒîŒ£·µ¢) ‚Ñì (vector-ref Cs i) (collapse-W^ W·µ¢s))])
              (define ŒîŒ£ (‚ß∫ ŒîŒ£·µ¢ ŒîŒ£‚Çú))
              (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
              (with-split-Œ£ Œ£* 'values W‚Çú
                (Œª _ (ŒîŒ£‚ß∫R ŒîŒ£ (loop (assert (+ 1 i) index?) Œ£*)))
                (Œª _ (R-of -ff ŒîŒ£))))))))

  (: app-opq : (‚Ñò P) ‚Üí ‚ü¶F‚üß)
  (define ((app-opq Ps) Œ£ ‚Ñì W‚Çì*)
    (define W‚Çï (list {set (-‚óè Ps)}))
    (define ‚Ñì‚Çí (‚Ñì-with-src +‚Ñì‚ÇÄ 'Œõ))
    (with-split-Œ£ Œ£ 'procedure? W‚Çï
      (Œª _
        (define P-arity (P:arity-includes (length W‚Çì*)))
        (with-split-Œ£ Œ£ P-arity W‚Çï
          (Œª _
            (define (run-opq)
              (leak Œ£ (Œ≥:hv #f) ((inst foldl V^ V^) ‚à™ ‚àÖ (unpack-W W‚Çì* Œ£))))
            (cond
              [(not (transparent-module? (‚Ñì-src ‚Ñì))) (run-opq)]
              [(current-MS) => (match-lambda
                                 [(MS l+ ‚Ñì‚Çí _)
                                  (err! (Err:Term l+ ‚Ñì ‚Ñì‚Çí (-‚óè Ps) W‚Çì*))
                                  (run-opq)])]
              [else (run-opq)]))
          (Œª _ (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì ‚Ñì‚Çí (list {set P-arity}) W‚Çï))
             ‚ä•R)))
      (Œª _ (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì ‚Ñì‚Çí (list {set 'procedure?}) W‚Çï))
         ‚ä•R)))

  (: app-P : Symbol (U T -b) ‚Üí ‚ü¶F‚üß)
  (define ((app-P o T) Œ£ ‚Ñì W‚Çì) ((app-prim o) Œ£ ‚Ñì (cons {set T} W‚Çì)))

  (: app-err! : V ‚Üí ‚ü¶F‚üß)
  (define ((app-err! V) Œ£ ‚Ñì W‚Çì)
    (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ (list {set 'procedure?}) (list {set V})))
    ‚ä•R)

  (: app/rest : Œ£ ‚Ñì V^ W V^ ‚Üí R)
  (define (app/rest Œ£ ‚Ñì V‚Çï^ W‚Çì V·µ£)
    (define args:root (‚à™ (W-root W‚Çì) (V^-root V·µ£)))
    (define-values (W·µ£s snd?) (unalloc V·µ£ Œ£))
    (unless snd?
      (err! (Err:Varargs W‚Çì V·µ£ ‚Ñì)))
    (fold-ans (Œª ([W·µ£ : W]) (app Œ£ ‚Ñì V‚Çï^ (append W‚Çì W·µ£))) W·µ£s))

  (: insert-fv-erasures : Œì Renamings ‚Üí Renamings)
  ;; Add erasure of free variables that were stack-copied
  (define (insert-fv-erasures Œì rn)
    (for/fold ([rn : Renamings rn]) ([Œ≥ (in-hash-keys Œì)]
                                     #:when (Œ≥:lex? Œ≥)
                                     #:unless (hash-has-key? rn Œ≥))
      (hash-set rn Œ≥ #f)))

  (: unalloc : V^ Œ£ ‚Üí (Values (‚Ñò W) Boolean))
  ;; Convert list in object language into one in meta-language
  (define (unalloc Vs Œ£)
    (define-set touched : Œ± #:mutable? #t)
    (define elems : (Mutable-HashTable Integer V^) (make-hasheq))
    (define-set ends : Integer #:eq? #t #:mutable? #t)
    (define sound? : Boolean #t)

    (let touch! ([i : Integer 0] [Vs : V^ Vs])
      (for ([V (in-set Vs)])
        (match V
          [(St (and Œ± (Œ±:dyn (Œ≤:st-elems _ (== -ùíæ-cons)) _)) _)
           (match-define (vector V‚Çï V‚Çú) (Œ£@/blob Œ± Œ£))
           (hash-update! elems i (Œª ([V‚ÇÄ : V^]) (V‚äî V‚ÇÄ V‚Çï)) mk-‚àÖ)
           (cond [(touched-has? Œ±)
                  (set! sound? #f)
                  (ends-add! (+ 1 i))]
                 [else (touched-add! Œ±)
                       (touch! (+ 1 i) V‚Çú)])]
          [(-b '()) (ends-add! i)]
          [_ (set! sound? #f)
             (ends-add! i)])))

    (define Ws (for/set: : W^ ([n (in-ends)])
                 (for/list : W ([i (in-range n)]) (hash-ref elems i))))
    (values Ws sound?))

  (: inst-‚àÄ/C : Œ£ (Pairof -l -l) ‚àÄ/C Œ± ‚Ñì ‚Üí R)
  ;; Monitor function against freshly instantiated parametric contract
  (define (inst-‚àÄ/C Œ£‚ÇÄ ctx G Œ± ‚Ñì)
    (match-define (‚àÄ/C xs c (and Œ±‚Çí (Œ±:dyn (Œ≤:clo ‚Ñì‚Çí) _))) G)
    (match-define (cons l+ (and l- l-seal)) ctx)
    (define Œì* (Œ£@/env Œ±‚Çí Œ£‚ÇÄ))
    (define ŒîŒ£:seals
      (for/fold ([acc : ŒîŒ£ ‚ä•ŒîŒ£]) ([x (in-list xs)])
        (define Œ±‚Çì (Œ±:dyn (Œ≤:sealed x ‚Ñì) H‚ÇÄ))
        (‚ß∫ acc
           (alloc Œ±‚Çì ‚àÖ)
           (alloc-lex Œ£‚ÇÄ x {set (Seal/C Œ±‚Çì l-seal)}))))
    (define Œ£‚ÇÅ (‚ß∫ (cons (car Œ£‚ÇÄ) Œì*) ŒîŒ£:seals))
    (with-each-path ([(ŒîŒ£‚ÇÅ W:c) (evl Œ£‚ÇÅ c)])
      (ŒîŒ£‚ß∫R (‚ß∫ ŒîŒ£:seals ŒîŒ£‚ÇÅ)
            (mon (‚ß∫ Œ£‚ÇÅ ŒîŒ£‚ÇÅ) (Ctx l+ l- ‚Ñì‚Çí ‚Ñì) (car W:c) (Œ£@ Œ± Œ£‚ÇÄ)))))
  (define-simple-macro (with-guarded-arity W f ‚Ñì [p body ...] ...)
    (match W
      [p body ...] ...
      [_ (err! (Err:Arity f (length W) ‚Ñì)) ‚ä•R]))
  )
