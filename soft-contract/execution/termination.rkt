#lang typed/racket/base

(provide termination@)

(require typed/racket/unit
         racket/match
         racket/set
         set-extras
         unreachable
         "../runtime/signatures.rkt"
         "../ast/signatures.rkt"
         "signatures.rkt"
         )

(define-unit termination@
  (import static-info^
          prover^)
  (export termination^)

  (: update-M : Œ£ M -Œª -Œª W ‚Üí (Option M))
  (define (update-M Œ£ M er ee W)
    (define G
      (match-let ([(-Œª fml _ _) er])
        (make-sc-graph Œ£ fml W)))
    (cond
      ;; Immediate graph fails sc, fail
      [(and (equal? er ee) (sc-violating? G)) #f]
      [else
       (define ŒîM (transitive-graphs M er ee G))
       (and (not (set-ormap sc-violating? (hash-ref ŒîM ee mk-‚àÖ)))
            (merge-M (merge-M M ee (hash er {set G})) ee ŒîM))]))

  (: transitive-graphs : M -Œª -Œª SCG ‚Üí (Immutable-HashTable -Œª (‚Ñò SCG)))
  (define (transitive-graphs M‚ÇÄ src tgt G)
    (for/hash : (Immutable-HashTable -Œª (‚Ñò SCG))
        ([(src‚ÇÄ Gs‚ÇÄ) (in-hash (hash-ref M‚ÇÄ src (inst hash -Œª (‚Ñò SCG))))])
      (values src‚ÇÄ ((inst map/set SCG SCG) (Œª ([G‚ÇÄ : SCG]) (concat-graph G‚ÇÄ G)) Gs‚ÇÄ))))

  (: sc-violating? : SCG ‚Üí Boolean)
  (define (sc-violating? G)
    (and (equal? G (concat-graph G G))
         (not (for/or : Boolean ([(edge ch) (in-hash G)])
                (and (eq? ch '‚Üì)
                     (eq? (car edge) (cdr edge)))))))

  (: merge-M : M -Œª (Immutable-HashTable -Œª (‚Ñò SCG)) ‚Üí M)
  (define (merge-M M‚ÇÄ tgt tbl)
    ((inst hash-update -Œª (Immutable-HashTable -Œª (‚Ñò SCG)))
     M‚ÇÄ tgt
     (Œª (tbl‚ÇÄ)
       (for/fold ([tbl* : (Immutable-HashTable -Œª (‚Ñò SCG)) tbl‚ÇÄ])
                 ([(src Gs) (in-hash tbl)])
         (hash-update tbl* src (Œª ([Gs‚ÇÄ : (‚Ñò SCG)]) (‚à™ Gs‚ÇÄ Gs)) mk-‚àÖ)))
     hash))

  (: has-sc-violation? : M ‚Üí Boolean)
  (define (has-sc-violation? M)
    (for/or : Boolean ([(tgt M*) (in-hash M)])
      (set-ormap sc-violating? (hash-ref M* tgt mk-‚àÖ))))

  (: make-sc-graph : Œ£ -formals W ‚Üí SCG)
  (define (make-sc-graph Œ£ fml W)
    (match-define (-var xs _) fml) ; nobody decreases by rest-arg?
    (for*/hash : SCG ([(x i‚ÇÄ) (in-indexed xs)]
                      [(Vs‚ÇÅ i‚ÇÅ) (in-indexed W)]
                      [?‚Üì (in-value (cmp (with-dummy x Œ£) (Œ≥:lex x) Vs‚ÇÅ))]
                      #:when ?‚Üì)
      (values (cons i‚ÇÄ i‚ÇÅ) ?‚Üì)))

  (: with-dummy : Symbol Œ£ ‚Üí Œ£)
  (define (with-dummy x Œ£)
    (define Œ≥ (Œ≥:lex x))
    (if (hash-has-key? (cdr Œ£) Œ≥)
        Œ£
        (cons (car Œ£) (hash-set (cdr Œ£) Œ≥ {set (-‚óè ‚àÖ)}))))

  (: concat-graph : SCG SCG ‚Üí SCG)
  (define (concat-graph G‚ÇÅ G‚ÇÇ)
    (for*/fold ([G* : SCG (hash)])
               ([(edge‚ÇÅ ch‚ÇÅ) (in-hash G‚ÇÅ)]
                [i (in-value (cdr edge‚ÇÅ))]
                [(edge‚ÇÇ ch‚ÇÇ) (in-hash G‚ÇÇ)] #:when (eq? i (car edge‚ÇÇ)))
      (hash-update G* (cons (car edge‚ÇÅ) (cdr edge‚ÇÇ))
                   (Œª ([ch‚ÇÄ : Ch]) (Ch-best ch‚ÇÄ ch‚ÇÅ ch‚ÇÇ))
                   (Œª () '‚Üß))))

  (define Ch-best : (Ch * ‚Üí Ch)
    (match-lambda*
      [(list '‚Üß ...) '‚Üß]
      [_ '‚Üì]))

  (: cmp : Œ£ T V^ ‚Üí (Option Ch))
  (define (cmp Œ£ T‚ÇÄ Vs‚ÇÅ)

    (: must-be? : V P ‚Üí Boolean)
    (define (must-be? V P) (eq? '‚úì (sat Œ£ P {set V})))
    (: must-be?‚ÇÇ : V P V ‚Üí Boolean)
    (define (must-be?‚ÇÇ V‚ÇÅ P V‚ÇÇ) (eq? '‚úì (sat Œ£ P {set V‚ÇÅ} {set V‚ÇÇ})))

    (: ‚â∫? : V T ‚Üí Boolean)
    ;; Check for definite "smaller-ness". `#f` means "don't know"
    (define (‚â∫? V‚ÇÄ T)
      (or (V‚ÇÄ . sub-value? . T)
          (and (V‚ÇÄ . must-be? . 'integer?)
               (T  . must-be? . 'integer?)
               (or (and (-zero . must-be?‚ÇÇ . '<= V‚ÇÄ)
                        (V‚ÇÄ . must-be?‚ÇÇ . '< T))
                   (and (V‚ÇÄ . must-be?‚ÇÇ . '<= -zero)
                        (T  . must-be?‚ÇÇ . '< V‚ÇÄ))))))
    
    (cond [(equal? '‚úì (sat Œ£ 'equal? {set T‚ÇÄ} Vs‚ÇÅ)) '‚Üß]
          [(for/and : Boolean ([V‚ÇÅ (in-set Vs‚ÇÅ)])
             (‚â∫? V‚ÇÅ T‚ÇÄ))
           '‚Üì]
          [else #f]))

  (: sub-value? : V T ‚Üí Boolean)
  (define (T‚ÇÅ . sub-value? . T‚ÇÇ)
    (match T‚ÇÅ
      [(T:@ (? sub-ac?) (list T*))
       (let loop ([T : (U T -b) T*])
         (match T
           [(== T‚ÇÇ) #t]
           [(T:@ (? sub-ac?) (list T*)) (loop T*)]
           [_ #f]))]
      [_ #f]))

  (: sub-ac? : K ‚Üí Boolean)
  ;; Check for function whose result is guaranteed smaller than argument
  (define (sub-ac? K)
    (case K
      [(caar cdar cadr cddr
        caaar caadr cadar caddr cdaar cdadr cddar cdddr
        caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr
        cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr)
       #t]
      [else
       (match K
         [(-st-ac ùíæ i) (not (struct-mutable? ùíæ i))] ; TODO make sure right for substructs
         [_ #f])]))

  )
