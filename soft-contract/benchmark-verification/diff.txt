4,6c4,6
<    [circle (real? string? string? . -> . image/c)]
<    [empty-scene (real? real? . -> . image/c)]
<    [place-image (image/c real? real? image/c . -> . image/c)])
---
>    [circle (number? string? string? . -> . image/c)]
>    [empty-scene (number? number? . -> . image/c)]
>    [place-image (image/c number? number? image/c . -> . image/c)])
12c12
<    [struct posn ([x real?] [y real?])]
---
>    [struct posn ([x number?] [y number?])]
22c22
<   (define POSN/C (struct/c posn real? real?))
---
>   (define POSN/C (struct/c posn number? number?))
40,43c40,43
<    [GRID-SIZE real?]
<    [BOARD-HEIGHT-PIXELS (-> real?)]
<    [BOARD-WIDTH real?]
<    [BOARD-HEIGHT real?])
---
>    [GRID-SIZE number?]
>    [BOARD-HEIGHT-PIXELS (-> number?)]
>    [BOARD-WIDTH number?]
>    [BOARD-HEIGHT number?])
193c193
<    [place-image-on-grid (image/c real? real? image/c . -> . image/c)]
---
>    [place-image-on-grid (image/c number? number? image/c . -> . image/c)]
234d233
< 
3,4c3,4
<    [struct block ([x real?] [y real?] [color COLOR/C])]
<    [struct posn ([x real?] [y real?])]
---
>    [struct block ([x number?] [y number?] [color COLOR/C])]
>    [struct posn ([x number?] [y number?])]
16,17c16,17
<   (define POSN/C (struct/c posn real? real?))
<   (define BLOCK/C (struct/c block real? real? COLOR/C))
---
>   (define POSN/C (struct/c posn number? number?))
>   (define BLOCK/C (struct/c block number? number? COLOR/C))
31,33c31,34
<   (provide/contract [block-size integer?]
<            [board-width integer?]
<            [board-height integer?])
---
>   (provide/contract
>    [block-size integer?]
>    [board-width integer?]
>    [board-height integer?])
43c44
<    [block-move (real? real? BLOCK/C . -> . BLOCK/C)])
---
>    [block-move (number? number? BLOCK/C . -> . BLOCK/C)])
72,73c73,74
<    [max (real? real? . -> . real?)]
<    [min (real? real? . -> . real?)]
---
>    [max (number? number? . -> . number?)]
>    [min (number? number? . -> . number?)]
82c83
<    [foldr-n ((BLOCK/C real? . -> . real?) real? BSET/C . -> . real?)])
---
>    [foldr-n ((BLOCK/C number? . -> . number?) number? BSET/C . -> . number?)])
91c92
<    [blocks-count (BSET/C . -> . real?)]
---
>    [blocks-count (BSET/C . -> . number?)]
93c94
<    [blocks-move (real? real? BSET/C . -> . BSET/C)]
---
>    [blocks-move (number? number? BSET/C . -> . BSET/C)]
97,98c98,99
<    [blocks-row (BSET/C real? . -> . BSET/C)]
<    [full-row? (BSET/C real? . -> . boolean?)]
---
>    [blocks-row (BSET/C number? . -> . BSET/C)]
>    [full-row? (BSET/C number? . -> . boolean?)]
100,102c101,103
<    [blocks-max-x (BSET/C . -> . real?)]
<    [blocks-min-x (BSET/C . -> . real?)]
<    [blocks-max-y (BSET/C . -> . real?)])
---
>    [blocks-max-x (BSET/C . -> . number?)]
>    [blocks-min-x (BSET/C . -> . number?)]
>    [blocks-max-y (BSET/C . -> . number?)])
214c215
<    [build-tetra-blocks (COLOR/C real? real? integer? integer? integer? integer? integer? integer? integer? integer?
---
>    [build-tetra-blocks (COLOR/C number? number? integer? integer? integer? integer? integer? integer? integer? integer?
265,266c266
<   (require (submod ".." data) (submod ".." bset) (submod ".." block) (submod ".." tetras)
< 	   (submod ".." aux) (submod ".." elim) (submod ".." consts))
---
>   (require (submod ".." data) (submod ".." bset) (submod ".." block) (submod ".." tetras) (submod ".." aux) (submod ".." elim) (submod ".." consts))
357,360c357,360
<    [circle (real? real? string? . -> . image?)]
<    [rectangle (real? real? COLOR/C COLOR/C . -> . image?)]
<    [place-image (image? real? real? image? . -> . image?)]
<    [empty-scene (real? real? . -> . image?)])
---
>    [circle (number? number? string? . -> . image?)]
>    [rectangle (number? number? COLOR/C COLOR/C . -> . image?)]
>    [place-image (image? number? number? image? . -> . image?)]
>    [empty-scene (number? number? . -> . image?)])
377,378c377
<   (require (submod ".." image) (submod ".." data) (submod ".." consts) (submod ".." world)
< 	   (submod ".." list-fun) (submod ".." aux))
---
>   (require (submod ".." image) (submod ".." data) (submod ".." consts) (submod ".." world) (submod ".." list-fun) (submod ".." aux))
415d413
< 
4,6c4,6
<    [empty-scene (real? real? . -> . image?)]
<    [place-image (image? real? real? image? . -> . image?)]
<    [circle (real? string? string? . -> . image?)])
---
>    [empty-scene (number? number? . -> . image?)]
>    [place-image (image? number? number? image? . -> . image?)]
>    [circle (number? string? string? . -> . image?)])
11,15c11,15
<    [min (real? real? . -> . real?)]
<    [max (real? real? . -> . real?)]
<    [abs (real? . -> . real?)]
<    [sqrt (real? . -> . real?)]
<    [sqr (real? . -> . real?)])
---
>    [min (number? number? . -> . number?)]
>    [max (number? number? . -> . number?)]
>    [abs (number? . -> . number?)]
>    [sqrt (number? . -> . number?)]
>    [sqr (number? . -> . number?)])
36c36
<    [new-posn (real? real? . -> . posn/c)]
---
>    [new-posn (number? number? . -> . posn/c)]
53,54c53,54
< 	       [(equal? msg 'x) (-> real?)]
< 	       [(equal? msg 'y) (-> real?)]
---
> 	       [(equal? msg 'x) (-> number?)]
> 	       [(equal? msg 'y) (-> number?)]
56c56
< 	       [(equal? msg 'move-toward/speed) (posn/c real? . -> . posn/c)]
---
> 	       [(equal? msg 'move-toward/speed) (posn/c number? . -> . posn/c)]
58c58
< 	       [(equal? msg 'dist) (posn/c . -> . real?)]
---
> 	       [(equal? msg 'dist) (posn/c . -> . number?)]
106c106
< 	       [(equal? msg 'on-mouse) (real? real? string? . -> . world/c)]
---
> 	       [(equal? msg 'on-mouse) (number? number? string? . -> . world/c)]
2,5c2,7
<   (provide/contract [f (->i ([x (any/c . -> . integer?)])
< 		   (res (x)
< 			((and/c (any/c . -> . integer?)
< 				(λ (y) (not (and (> (x #f) 0) (< (y #f) 0))))) . -> . integer?)))]))
---
>   (provide f-spec)
>   (define f-spec
>     (->i ([x (any/c . -> . integer?)])
> 	 (res (x)
> 	      ((and/c (any/c . -> . integer?)
> 		      (λ (y) (not (and (< (x #f) 0) (< (y #f) 0))))) . -> . integer?)))))
12c14
<   (provide/contract [g (integer? . -> . integer?)])
---
>   (provide/contract [g (f-spec integer? . -> . integer?)])
14c16
<   (define (g n) ((f (h n)) (h n))))
---
>   (define (g f n) ((f (h n)) (h n))))
17,22c19,21
<   (provide/contract [main (integer? . -> . integer?)])
<   (require (submod ".." g))
<   (define (main m) (g m)))
< 
< (require 'main)
< (main •)
---
>   (provide/contract [main (f-spec integer? . -> . integer?)])
>   (require (submod ".." f) (submod ".." g))
>   (define (main f m) (g f m)))
13c13
<     (let ([n (rand)]) (if (> n 0) n (randpos))))
---
>     (let ([n (rand)]) (if (#|HERE >|# >= n 0) n (randpos))))
12c12
<         (cons (λ (m) (+ m n)) (mk-list (- n 1)))))
---
>         (cons (λ (m) (- m n)) (mk-list (- n 1)))))
19d18
< 
21c20
< (main •)
---
> (• main)
28c28
<   (define (main n) (s n 0)))
---
>   (define (main n) (s n #|HERE|#n)))
5c5
<     (if (>= x 0) (g x) (f (λ (x) (f g x)) (g x))))
---
>     (if (<= x 0) (g x) (f (λ (x) (f g x)) (g x))))
5c5
<   (provide/contract [h ((and/c integer? (>/c 0)) . -> . any/c)])
---
>   (provide/contract [h ((and/c integer? (>/c 1)) . -> . any/c)])
11c11
<     (if (> n 0) (f n h) 'unit)))
---
>     (if (>= n 0) (f n h) 'unit)))
5c5
<   (provide/contract [h ((and/c integer? (>/c 0)) . -> . any/c)])
---
>   (provide/contract [h ((and/c integer? (>/c 1)) . -> . any/c)])
3c3
<   (define (f x g) (g (+ x 1))))
---
>   (define (f x g) (g x)))
11c11
<     (if (>= n 0) (f n (h n)) 'unit)))
---
>     (if (> n 0) (f n (h n)) 'unit)))
5c5
< 				     (λ (l) (implies (> n 0) (not (empty? l)))))))])
---
> 				     (λ (l) (implies (>= n 0) (not (empty? l)))))))])
3c3
<   (define (max max2 x y z) (max2 (max2 x y) z)))
---
>   (define (max max2 x y z) #|HERE|# (max2 y z)))
8c8
<     (if (< n 0) empty (cons x (mk-list (- n 1) x))))
---
>     (if (< n 0) empty (cons (- x 1) (mk-list (- n 1) x))))
3c3
< 		    [sqr (->i ([n integer?]) (res (n) (and/c integer? (>=/c n))))])
---
> 		    [sqr (->i ([n integer?]) (res (n) (and/c integer? (>=/c (+ n 1)))))])
7c7
<     (if (= n 0) (car xs) (nth (- n 1) (cdr xs))))
---
>     (if (= n #|HERE|# 1) (car xs) (nth (- n 1) (cdr xs))))
9c9
<    [readit ((one-of/c 'opened 'ignore) . -> . (one-of/c 'opened 'ignore))]
---
>    [readit ((one-of/c 'opened 'ignore) . -> . (one-of/c 'opened #|HERE|# #;'ignore))]
55,57d54
< 
< (require 'main)
< (main • •)
3c3
<            [unlock ((one-of/c 1) . -> . (one-of/c 0))])
---
> 		    [unlock ((one-of/c 1) . -> . (one-of/c 0))])
12c12
<   (define (g n st) (if (> n 0) (unlock st) st)))
---
>   (define (g n st) (if (>= n 0) (unlock st) st)))
11c11
<     (if (= n 0) empty (cons n (mk-list (- n 1))))))
---
>     (if (#|HERE|#< n 0) empty (cons n (mk-list (- n 1))))))
4c4
<     (if (number? x) (add1 x) 0)))
---
>     (if (number? x) 0 #|HERE|# (add1 x))))
7c7
< (f •)
---
> (• f)
2c2
<   (provide/contract [f ((or/c string? number?) . -> . number?)])
---
>   (provide/contract [f (#|HERE|# any/c . -> . number?)])
8c8
<       (if x (false? f) #f))))
---
>       (if x x #f))))
10c10
<     (if (or (number? x) (string? x)) (f x) 0)))
---
>     (#|HERE|# f x)))
2c2
<   (provide/contract [f (any/c any/c . -> . number?)])
---
>   (provide/contract [f (#|HERE|# any/c string? . -> . number?)])
4c4,6
<     (if (and (number? x) (string? y)) (+ x (string-length y)) 0)))
---
>     (if (and (number? x) (string? y))
>         (+ x (string-length y))
>         (string-length x))))
4,6c4
<     (if (if (number? x) (string? y) #f)
<         (+ x (string-length y))
<         0)))
---
>     (+ x (string-length y))))
2c2,3
<   (provide/contract [strnum? (->i ([x any/c]) (res (x) (and/c boolean? (λ (a) (equal? a (or (string? x) (number? x)))))))])
---
>   (provide/contract [strnum? (->i ([x any/c])
> 				  (res (x) (and/c boolean? (λ (a) (equal? a (or (string? x) (number? x)))))))])
4c5
<     (or (string? x) (number? x))))
---
>     (or (string? x) (#|HERE|# integer? x))))
10,13c10
<     (if (let ([tmp (number? x)])
<           (if tmp tmp (string? x)))
<         (f x)
<         0)))
---
>     (f x)))
4c4
<     (if (number? (car p)) (add1 (car p)) 7)))
---
>     (if (number? (#|HERE|# cdr p)) (add1 (car p)) 7)))
5c5
<     (if (and (number? (car p)) (number? (cdr p))) (g p) 'no)))
---
>     (if (and (number? (car p)) (number? (#|HERE|# car p))) (g p) 'no)))
2c2,3
<   (provide/contract [carnum? (->i ([p cons?]) (res (p) (and/c boolean? (λ (a) (equal? a (number? (car p)))))))])
---
>   (provide/contract [carnum? (->i ([p #|HERE|# any/c])
> 				  (res (p) (and/c boolean? (λ (a) (equal? a (number? (car p)))))))])
7c7
<       [else (not (number? x))])))
---
>       [else #|HERE|# (number? x)])))
3c3
<    [f ([or/c number? string?] cons? . -> . number?)])
---
>    [f (#|HERE|# any/c cons? . -> . number?)])
1,2c1,2
< (module ack racket
<   (provide/contract [ack (integer? integer? . -> . integer?)])
---
> (module ack racket ; weakening the 1st arg will make program loop (never wrong)
>   (provide/contract [ack (integer? #|HERE|#real? . -> . integer?)])
2c2
<   (provide/contract [all ((any/c . -> . any/c) (listof any/c) . -> . any/c)])
---
>   (provide/contract [all ((any/c . -> . any/c) (listof any/c) . -> . #|HERE|#boolean?)])
3c3
<    [append ((listof any/c) (listof any/c) . -> . (listof any/c))])
---
>    [append ((listof any/c) (listof any/c) . -> . #|HERE|# cons?)])
4c4
<       [argmin ((any/c . -> . real?) (cons/c any/c (listof any/c)) . -> . any/c)]))
---
>       [argmin ((any/c . -> . number?) (cons/c any/c (listof any/c)) . -> . any/c)]))
15a16
> 
10c10
<       [(cons? x) (append [flatten (car x)] [flatten (cdr x)])]
---
>       [(cons? x) (append [flatten (car x)] (cdr x) #|HERE|##;[flatten ])]
3c3
<    [foldl ((any/c any/c . -> . any/c) any/c (listof any/c) . -> . any/c)])
---
>    [foldl ((number? boolean? . -> . boolean?) boolean? (listof number?) . -> . boolean?)])
6c6
<         (foldl f (f (car xs) z) (cdr xs)))))
---
>         (foldl f (f #|HERE|# z (car xs)) (cdr xs)))))
2c2
<   (provide/contract [foldl1 ((any/c any/c . -> . any/c) (nelistof any/c) . -> . any/c)])
---
>   (provide/contract [foldl1 ((any/c any/c . -> . any/c) (#|HERE|# listof any/c) . -> . any/c)])
3c3
<    [foldr ((any/c any/c . -> . any/c) any/c (listof any/c) . -> . any/c)])
---
>    [foldr ((number? boolean? . -> . boolean?) boolean? (listof any/c) . -> . boolean?)])
6c6
<         (f (car xs) (foldr f z (cdr xs))))))
---
>         (f #|HERE|# (foldr f z (cdr xs)) (car xs)))))
2c2
<   (provide/contract [foldr1 ((any/c any/c . -> . any/c) (nelistof any/c) . -> . any/c)])
---
>   (provide/contract [foldr1 ((any/c any/c . -> . any/c) (#|HERE|#listof any/c) . -> . any/c)])
7,10c7,8
< 	 (res (msg)
< 	      (cond
< 	       [(equal? msg "hd") string?]
< 	       [else (or/c false? path/c)]))))
---
> 	 (res (msg) (cond [(equal? msg "hd") string?]
> 			  [else (or/c false? path/c)]))))
12c10,11
<     (-> (one-of/c "get-child") (string? . -> . dom/c))))
---
>     (->i ([msg (one-of/c "get-child")])
> 	 (res (msg) (string? . -> . dom/c)))))
22c21
<                (path "tl"))
---
>           (path #|HERE|# "hd" #;"tl"))
1,3d0
< (module opaque racket
<   (provide/contract [n real?]))
< 
5c2,3
<   (provide/contract [f (->i ([x real?]) (res (x) (=/c x)))])
---
>   (provide/contract
>    [f (->i ([x number?]) (res (x) (=/c x)))])
9c7
< (f n)
---
> (f •)
5c5
<   (provide/contract [inc-or-greet (boolean? (or/c string? integer?) . -> . (or/c false? integer? string?))])
---
>   (provide/contract [inc-or-greet (boolean? (or/c string? integer?) . -> . (or/c #|HERE|# #;false? integer? string?))])
5c5
<     (if (cons? (cdr x)) (lastpair (cdr x)) x)))
---
>     (if (cons? #|HERE|# x) (lastpair (cdr x)) x)))
11c11
<   (provide/contract [last ((cons/c any/c (listof any/c)) . -> . any/c)])
---
>   (provide/contract [last (#|HERE|#(listof any/c) . -> . any/c)])
3c3
<    [member (any/c (listof any/c) . -> . (listof any/c))])
---
>    [member (any/c (listof any/c) . -> . #|HERE|# boolean?)])
5,6c5,8
<     (if (empty? l) empty
<         (if (equal? x (car l)) l (member x (cdr l))))))
---
>     (cond
>      [(empty? l) empty]
>      [(equal? x (car l)) l]
>      [else (member x (cdr l))])))
2,3c2,4
<   (provide/contract [recip (non-zero/c . -> . non-zero/c)]
< 		    [non-zero/c any/c])
---
>   (provide/contract
>    [recip (number? . -> . non-zero/c)]
>    [non-zero/c any/c])
Diff for snake.sch:

Diff for tetris.sch:

Diff for zombie.sch:

Diff for fhnhn.sch:

Diff for fold-div.sch:

Diff for fold-fun-list.sch:

Diff for hors.sch:

Diff for hrec.sch:

Diff for intro1.sch:

Diff for intro2.sch:

Diff for intro3.sch:

Diff for isnil.sch:

Diff for max.sch:

Diff for mem.sch:

Diff for mult.sch:

Diff for nth0.sch:

Diff for r-file.sch:

Diff for r-lock.sch:

Diff for reverse.sch:

Diff for ex-01.sch:

Diff for ex-02.sch:

Diff for ex-03.sch:

Diff for ex-04.sch:

Diff for ex-05.sch:

Diff for ex-07.sch:

Diff for ex-08.sch:

Diff for ex-09.sch:

Diff for ex-10.sch:

Diff for ex-11.sch:

Diff for ex-12.sch:

Diff for ex-13.sch:

Diff for ex-14.sch:

Diff for ack.sch:

Diff for all.sch:

Diff for append.sch:

Diff for argmin.sch:

Diff for flatten.sch:

Diff for foldl.sch:

Diff for foldl1.sch:

Diff for foldr.sch:

Diff for foldr1.sch:

Diff for get-path.sch:

Diff for id-dependent.sch:

Diff for inc-or-greet.sch:

Diff for last-pair.sch:

Diff for last.sch:

Diff for member.sch:

Diff for recip-contract.sch:

