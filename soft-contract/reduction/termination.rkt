#lang typed/racket/base

(provide termination@)

(require racket/match
         (except-in racket/set for/set for/seteq for*/set for*/seteq)
         typed/racket/unit
         typed-racket-hacks
         unreachable
         bnf
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt")

(define-unit termination@
  (import static-info^
          val^
          prover^)
  (export termination^)

  (?Ch . ‚âú . (Option Ch))

  (: update-call-record : H M Clo W ‚Ñì Œ¶^ Œ£ ‚Üí (Option M))
  (define (update-call-record H M‚ÇÄ V‚Çï W‚Çì ‚Ñì Œ¶^ Œ£)
    (match (hash-ref M‚ÇÄ V‚Çï #f)
      [(? values G‚ÇÄ)
       (when (-var-rest (Clo-_0 V‚Çï))
         (error 'update-call-record "TODO: handle rest args ~a" (-var-rest (Clo-_0 V‚Çï))))
       (define G
         (let ([W‚ÇÄ (for/list : (Listof S:Œ±) ([x (in-list (-var-init (Clo-_0 V‚Çï)))])
                     (S:Œ± (mk-Œ± (-Œ±:x x H))))])
           (make-sc-graph W‚ÇÄ W‚Çì Œ¶^ Œ£)))
       (and (strict-progress? G)
            (let ([G* (concat-graph G‚ÇÄ G)])
              (and (strict-progress? G*)
                   (hash-set M‚ÇÄ V‚Çï G*))))]
      [#f (hash-set M‚ÇÄ V‚Çï (init-sc-graph (T-arity V‚Çï)))]))

  (define/memo (init-sc-graph [a : (U Natural arity-at-least)]) : SCG
    (define n (match a
                [(arity-at-least n) (+ 1 n)]
                [(? integer? n) n]))
    (for/hash : SCG ([i (in-range n)])
      (values (cons i i) '‚Üì)))

  (: make-sc-graph : (Listof S:Œ±) W Œ¶^ Œ£ ‚Üí SCG)
  (define (make-sc-graph W‚ÇÄ W‚ÇÅ Œ¶^ Œ£)
    (unless (= (length W‚ÇÄ) (length W‚ÇÅ))
      (error 'make-sc-graph "TODO: generalize construction of size-change graphs for argument lists of mismatched lengths ~a and ~a" (length W‚ÇÄ) (length W‚ÇÅ)))
    (for*/hash : SCG ([(T^‚ÇÄ i‚ÇÄ) (in-indexed W‚ÇÄ)]
                      [(T^‚ÇÅ i‚ÇÅ) (in-indexed W‚ÇÅ)]
                      [?‚Üì (in-value (cmp T^‚ÇÄ T^‚ÇÅ Œ¶^ Œ£))] #:when ?‚Üì)
      (values (cons i‚ÇÄ i‚ÇÅ) ?‚Üì)))

  (: cmp : T^ T^ Œ¶^ Œ£ ‚Üí ?Ch)
  (define (cmp T^‚ÇÄ T^‚ÇÅ Œ¶^ Œ£)
    (cond [(defly? (Œª () (partition-results Œ£ (R (list T^‚ÇÄ T^‚ÇÅ) Œ¶^) 'equal?))) '‚Üß]
          [(check-‚â∫ Œ£ Œ¶^ T^‚ÇÅ T^‚ÇÄ) '‚Üì]
          [else #f]))

  (: concat-graph : SCG SCG ‚Üí SCG)
  (define (concat-graph G‚ÇÅ G‚ÇÇ)
    (for*/fold ([G* : SCG (hash)])
               ([(edge‚ÇÅ ‚Üù‚ÇÅ) (in-hash G‚ÇÅ)]
                [i (in-value (cdr edge‚ÇÅ))]
                [(edge‚ÇÇ ‚Üù‚ÇÇ) (in-hash G‚ÇÇ)]
                #:when (eq? i (car edge‚ÇÇ)))
      (hash-update G* (cons (car edge‚ÇÅ) (cdr edge‚ÇÇ))
                   (Œª ([‚Üù‚ÇÄ : Ch]) (Ch-best ‚Üù‚ÇÄ ‚Üù‚ÇÅ ‚Üù‚ÇÇ))
                   (Œª () '‚Üß))))

  (define Ch-best : (Ch * ‚Üí Ch)
    (Œª chs (if (memq '‚Üì chs) '‚Üì '‚Üß)))
  
  (define Ch-worst : (Ch ?Ch ‚Üí ?Ch)
    (match-lambda**
     [(_  #f) #f]
     [('‚Üß _ ) '‚Üß]
     [(_  '‚Üß) '‚Üß]
     [(_  _ ) '‚Üì]))

  (: strict-progress? : SCG ‚Üí Boolean)
  (define (strict-progress? G) (for/or ([d (in-hash-values G)]) (eq? d '‚Üì)))

  (: check-‚â∫ : Œ£ Œ¶^ T^ T^ ‚Üí Boolean)
  (define (check-‚â∫ Œ£ Œ¶^ T^‚ÇÄ T^‚ÇÅ)
    (: must-be? : P T^ * ‚Üí Boolean)
    (define (must-be? P . T^s) (defly? (Œª () (partition-results Œ£ (R T^s Œ¶^) P))))
    (or (T^‚ÇÄ . sub-value? . T^‚ÇÅ)
        (and (must-be? 'integer? T^‚ÇÄ)
             (must-be? 'integer? T^‚ÇÅ)
             (must-be? '<= -zero T^‚ÇÄ)
             (must-be? '< T^‚ÇÄ T^‚ÇÅ))))

  (: sub-value? : T^ T^ ‚Üí Boolean)
  (define (x . sub-value? . y)
    (define sub-ac? : (S ‚Üí Boolean)
      (match-lambda [(-st-ac ùíæ i) (not (struct-mutable? ùíæ i))]
                    [_ #f]))
    
    (match* (x y)
      [((S:@ (? sub-ac?) (list x*)) (? S? y))
       (let loop ([x : S x*])
         (match x
           [(== y) #t]
           [(S:@ (? sub-ac?) (list x*)) (loop x*)]
           [_ #f]))]
      [(_ _) #f]))

  (: defly? : (‚Üí (Values R^ R^ R^)) ‚Üí Boolean)
  (define (defly? e)
    (define-values (_ R‚ÇÇ R‚ÇÉ) (e))
    (and (set-empty? R‚ÇÇ) (set-empty? R‚ÇÉ)))
  )
