#lang typed/racket/base

(provide (all-defined-out))

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         racket/set
         racket/splicing
         syntax/parse/define
         "../../utils/main.rkt"
         "../../runtime/main.rkt"
         "../../proof-relation/main.rkt")

(define-simple-macro (with-error-handling (‚ü¶k‚üß:id A:id $:id Œì:id ùíû:id Œ£:id) e ...)
  (let ([Œ±‚Çñ (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß)])
    (define ‚ü¶k‚üß* : -‚ü¶k‚üß!
      (Œª (A $ Œì ùíû Œ£)
        (cond [(-blm? A)
               (case (-blm-violator A)
                 [(havoc Œõ ‚Ä†) ‚àÖ]
                 [else {set (-œÇ‚Üì Œ±‚Çñ Œì A)}])]
              [else e ...])))
    (set-‚ü¶k‚üß->Œ±‚Çñ! ‚ü¶k‚üß* Œ±‚Çñ)
    ‚ü¶k‚üß*))

(define-simple-macro (with-Œì+/- ([(Œì‚ÇÅ:id Œì‚ÇÇ:id) e])
                       #:true  e‚ÇÅ
                       #:false e‚ÇÇ)
  (let-values ([(Œì‚ÇÅ Œì‚ÇÇ) e])
    (‚à™ (if Œì‚ÇÅ e‚ÇÅ ‚àÖ)
       (if Œì‚ÇÇ e‚ÇÇ ‚àÖ))))

;; TMP hack for part of root set from stack frames
(splicing-let ([m ((inst make-hasheq -‚ü¶k‚üß! (‚Ñò -Œ±)))])
  
  (define (add-‚ü¶k‚üß-roots [‚ü¶k‚üß : -‚ü¶k‚üß!] [Œ±s : (‚Ñò -Œ±)]) : Void
    (hash-update! m ‚ü¶k‚üß (Œª ([Œ±s‚ÇÄ : (‚Ñò -Œ±)]) (‚à™ Œ±s‚ÇÄ Œ±s)) ‚Üí‚àÖ))
  
  ;; Return the root set spanned by the stack chunk for current block
  (define (‚ü¶k‚üß->roots [‚ü¶k‚üß : -‚ü¶k‚üß!])
    (hash-ref m ‚ü¶k‚üß (Œª () (error '‚ü¶k‚üß->Œ±s "nothing for ~a" ‚ü¶k‚üß)))))

;; TMP hack for mapping stack to stack address to return to
(splicing-let ([m ((inst make-hasheq -‚ü¶k‚üß! -Œ±‚Çñ))])

  (define (set-‚ü¶k‚üß->Œ±‚Çñ! [‚ü¶k‚üß : -‚ü¶k‚üß!] [Œ±‚Çñ : -Œ±‚Çñ]) : Void
    (hash-update! m ‚ü¶k‚üß
                  (Œª ([Œ±‚Çñ‚ÇÄ : -Œ±‚Çñ]) ; just for debugging
                    (assert (equal? Œ±‚Çñ‚ÇÄ Œ±‚Çñ))
                    Œ±‚Çñ‚ÇÄ)
                  (Œª () Œ±‚Çñ)))
  
  (define (‚ü¶k‚üß->Œ±‚Çñ [‚ü¶k‚üß : -‚ü¶k‚üß!]) : -Œ±‚Çñ
    (hash-ref m ‚ü¶k‚üß (Œª () (error '‚ü¶k‚üß->Œ±‚Çñ "nothing for ~a" ‚ü¶k‚üß)))))
