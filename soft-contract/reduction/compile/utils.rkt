#lang typed/racket/base

(provide (all-defined-out))

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         racket/match
         racket/set
         racket/splicing
         syntax/parse/define
         "../../settings.rkt"
         "../../utils/main.rkt"
         "../../runtime/main.rkt"
         "../../proof-relation/main.rkt")


(splicing-let-syntax ([compute-frame-roots
                       (syntax-parser
                         [(_) #'‚àÖeq]
                         [(_ root:id) #'(->‚ü™Œ±‚ü´s root)]
                         [(_ root:id ...) #'(‚à™ (->‚ü™Œ±‚ü´s root) ...)])])
  (define-simple-macro (with-error-handling (‚ü¶k‚üß:id A:id $:id Œì:id ‚ü™‚Ñã‚ü´:id Œ£:id)
                         #:roots (root:id ...)
                         e ...)
    (let ([Œ±‚Çñ (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß)]
          [frame-roots (compute-frame-roots root ...)]
          [tail-roots (‚ü¶k‚üß->roots ‚ü¶k‚üß)])
      (define ‚ü¶k‚üß‚ÇÄ (rt Œ±‚Çñ))
      (define ‚ü¶k‚üß* : -‚ü¶k‚üß
        (Œª (A $ Œì ‚ü™‚Ñã‚ü´ Œ£)
          (cond [(-blm? A) (‚ü¶k‚üß‚ÇÄ A $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
                [else e ...])))
      (set-‚ü¶k‚üß->Œ±‚Çñ! ‚ü¶k‚üß* Œ±‚Çñ)
      (add-‚ü¶k‚üß-roots! ‚ü¶k‚üß* (‚à™ frame-roots tail-roots))
      ‚ü¶k‚üß*)))


(splicing-local
    ((define print-cache : (HashTable -blm Void) (make-hash)))

  ;; Base continuation that returns locally finished configuration
  (define/memo (rt [Œ±‚Çñ : -Œ±‚Çñ]) : -‚ü¶k‚üß
    (let ()
      (define ‚ü¶k‚üß : -‚ü¶k‚üß
        (Œª (A $ Œì ‚ü™‚Ñã‚ü´ Œ£)
          (define (maybe-print-blame)
            (when (and (debug-iter?)
                       (-blm? A)
                       (= 0 (set-count (œÉ‚Çñ@ (-Œ£-œÉ‚Çñ Œ£) Œ±‚Çñ))))
              (hash-ref! print-cache
                         A
                         (Œª ()
                           (printf "~a~n" (show-blm A))))))
          (match A
            [(-blm l+ _ _ _ _) #:when (symbol? l+) ; ignore blames on system
             ‚àÖ]
            [_
             (match-define (-Œ£ _ _ M) Œ£)
             (define A*
               (match A
                 [(-W (list V) s) (-W (list (V+ (-Œ£-œÉ Œ£) V (predicates-of Œì s))) s)]
                 [_ A]))
             (unless (-‚Ñãùí±? Œ±‚Çñ)
               (M‚äï! Œ£ Œ±‚Çñ Œì A*))
             (maybe-print-blame)
             {set (-œÇ‚Üì Œ±‚Çñ Œì A*)}])))
      (set-‚ü¶k‚üß->Œ±‚Çñ! ‚ü¶k‚üß Œ±‚Çñ)
      (add-‚ü¶k‚üß-roots! ‚ü¶k‚üß ‚àÖeq)
      ‚ü¶k‚üß)))
