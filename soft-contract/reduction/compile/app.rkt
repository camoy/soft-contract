#lang typed/racket/base

(provide app mon flat-chk
         ap‚à∑ let‚à∑ if‚à∑ and‚à∑ or‚à∑ bgn‚à∑ bgn0.v‚à∑ bgn0.e‚à∑ rst-Œì‚à∑
         mon.c‚à∑ mon.v‚à∑
         make-memoized-‚ü¶k‚üß
         mk-mon-‚ü¶e‚üß mk-rt-‚ü¶e‚üß mk-app-‚ü¶e‚üß)

(require "../../utils/main.rkt"
         "../../ast/main.rkt"
         "../../runtime/main.rkt"
         "../../proof-relation/main.rkt"
         "../../primitives/main.rkt"
         "../../externals/def-ext-runtime.rkt"
         "utils.rkt"
         "base.rkt"
         racket/set
         racket/match
         (only-in racket/list split-at))

(: app : -l -$ -‚Ñí -W¬π (Listof -W¬π) -Œì -‚ü™‚Ñã‚ü´ -Œ£ -‚ü¶k‚üß ‚Üí (‚Ñò -œÇ))
(define (app l $ ‚Ñí W‚Çï W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  
  (match-define (-Œ£ œÉ œÉ‚Çñ M) Œ£)
  (match-define (-W¬π V‚Çï s‚Çï) W‚Çï)
  (define-values (V‚Çìs s‚Çìs) (unzip-by -W¬π-V -W¬π-s W‚Çìs))
  (define s‚Çê
    (let ([s‚Çï* (match V‚Çï
                 [(? -o? o) o]
                 [_ s‚Çï])])
      (apply -?@ s‚Çï* s‚Çìs)))

  (: blm-arity ([Arity Natural] [#:name -s] . ->* . -blm))
  (define (blm-arity required provided #:name [f s‚Çï])
    ;; HACK for error message. Probably no need to fix
    (define msg : Symbol
      (cond
        [f (format-symbol "~a requires ~a arguments" (format "~a" (show-e f)) required)]
        [else (format-symbol "require ~a arguments" required)]))
    (-blm l 'Œõ (list msg) V‚Çìs))

  (define-syntax-rule (with-guarded-arity a* e ...)
    (let ([n (length W‚Çìs)]
          [a a*])
      (cond
        [(arity-includes? a n) e ...]
        [else (‚ü¶k‚üß (blm-arity a n) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

  (: make-arg-list! : Arity (Listof -W¬π) ‚Üí (‚Ñò (U (Listof -W¬π) -blm)))
  (define (make-arg-list! a Ws)
    (match a
      [(? exact-nonnegative-integer? n)
       (error 'make-arg-list! "TODO: exact arity ~a" n)]
      [(arity-at-least n)
       (error 'make-arg-list! "TODO: arity-at-least ~a" n)]
      [(? list?)
       (error 'make-arg-list! "TODO: case-lambda")]))

  (: app-prim-or-ext : Symbol ‚Üí (‚Ñò -œÇ))
  (define (app-prim-or-ext o)
    (cond
      [(get-prim o) =>
       (Œª ([‚ü¶o‚üß : -‚ü¶o‚üß])
         (match-define (-‚Ñí _ ‚Ñì) ‚Ñí)
         (for/union : (‚Ñò -œÇ) ([ŒìA (in-set (‚ü¶o‚üß ‚ü™‚Ñã‚ü´ ‚Ñì l Œ£ Œì W‚Çìs))])
           (match-define (-ŒìA Œì A) ŒìA)
           (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£)))]
      [(get-ext o) =>
       (Œª ([‚ü¶f‚üß : -‚ü¶f‚üß])
         (‚ü¶f‚üß l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))]
      [else (error 'app "don't know how to apply `~a`" o)]))

  (define (app-clo [xs : -formals] [‚ü¶e‚üß : -‚ü¶e‚üß] [œÅ‚Çï : -œÅ] [Œì‚Çï : -Œì])

    (define plausible? ; conserivative `plausible?` to filter out some
      (cond [s‚Çï
             (for/and : Boolean ([Œ≥ (in-list (-Œì-tails Œì))])
               (match-define (-Œ≥ Œ±‚Çñ _ s‚Çï* _) Œ≥)
               (cond [(equal? s‚Çï s‚Çï*)
                      (and (-‚Ñ¨? Œ±‚Çñ) (equal? (-‚Ñ¨-exp Œ±‚Çñ) ‚ü¶e‚üß))]
                     [else #t]))]
            [else #t]))

    (cond
      [plausible?
       (define ‚ÑØ (-edge ‚ü¶e‚üß ‚Ñí))
       ;; Extended call history
       (define ‚ü™‚Ñã‚ü´* (‚ü™‚Ñã‚ü´+ ‚ü™‚Ñã‚ü´ ‚ÑØ))
       ;; Context for allocating the value address
       (define ‚ü™‚Ñã‚ü´‚ÇÄ (if (eq? ‚ü™‚Ñã‚ü´ ‚ü™‚Ñã‚ü´*) (‚ü™‚Ñã‚ü´@ ‚ü™‚Ñã‚ü´* ‚ü¶e‚üß) ‚ü™‚Ñã‚ü´*))
       ;; Call history for context jumped to
       (define ‚ü™‚Ñã‚ü´‚Çë‚Çë ‚ü™‚Ñã‚ü´‚ÇÄ #;(if (eq? ‚ü™‚Ñã‚ü´* ‚ü™‚Ñã‚ü´) ‚ü™‚Ñã‚ü´‚ÇÄ ‚ü™‚Ñã‚ü´*))
       ;; Target's environment
       (define œÅ* : -œÅ
         (match xs
           [(? list? xs)
            (alloc-init-args! œÉ Œì œÅ‚Çï ‚ü™‚Ñã‚ü´‚ÇÄ xs W‚Çìs)]
           [(-varargs zs z)
            (define-values (Ws‚ÇÄ Ws·µ£) (split-at W‚Çìs (length zs)))
            (define œÅ‚ÇÄ (alloc-init-args! œÉ Œì œÅ‚Çï ‚ü™‚Ñã‚ü´‚ÇÄ zs Ws‚ÇÄ))
            (define V·µ£ (alloc-rest-args! œÉ Œì ‚ü™‚Ñã‚ü´‚ÇÄ ‚Ñí Ws·µ£))
            (define Œ±·µ£ (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x z ‚ü™‚Ñã‚ü´‚ÇÄ)))
            (œÉ‚äï! œÉ Œ±·µ£ V·µ£)
            (œÅ+ œÅ‚ÇÄ z Œ±·µ£)]))

       (define Œ±‚Çñ (-‚Ñ¨ xs ‚ü¶e‚üß œÅ*))
       (define Œ∫ (-Œ∫ (make-memoized-‚ü¶k‚üß ‚ü¶k‚üß) Œì ‚ü™‚Ñã‚ü´ s‚Çï s‚Çìs))
       (œÉ‚Çñ‚äî! œÉ‚Çñ Œ±‚Çñ Œ∫)
       {set (-œÇ‚Üë Œ±‚Çñ Œì‚Çï ‚ü™‚Ñã‚ü´‚Çë‚Çë)}]
      [else ‚àÖ]))

  (define (app-And/C [W‚ÇÅ : -W¬π] [W‚ÇÇ : -W¬π]) : (‚Ñò -œÇ)
    (define ‚ü¶rhs‚üß (mk-app-‚ü¶e‚üß l ‚Ñí (mk-rt-‚ü¶e‚üß W‚ÇÇ) (list (mk-rt-‚ü¶e‚üß (car W‚Çìs)))))
    (app l $ ‚Ñí W‚ÇÅ W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ (and‚à∑ l (list ‚ü¶rhs‚üß) ‚ä•œÅ ‚ü¶k‚üß)))

  (define (app-Or/C [W‚ÇÅ : -W¬π] [W‚ÇÇ : -W¬π]) : (‚Ñò -œÇ)
    (define ‚ü¶rhs‚üß (mk-app-‚ü¶e‚üß l ‚Ñí (mk-rt-‚ü¶e‚üß W‚ÇÇ) (list (mk-rt-‚ü¶e‚üß (car W‚Çìs)))))
    (app l $ ‚Ñí W‚ÇÅ W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ (or‚à∑ l (list ‚ü¶rhs‚üß) ‚ä•œÅ ‚ü¶k‚üß)))
  
  (define (app-Not/C [W·µ§ : -W¬π]) : (‚Ñò -œÇ)
    (app l $ ‚Ñí W·µ§ W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ (neg‚à∑ l ‚ü¶k‚üß)))

  (define (app-St/C [ùíæ : -ùíæ] [W-Cs : (Listof -W¬π)]) : (‚Ñò -œÇ)
    ;; TODO fix ‚Ñì
    (match-define (list W‚Çì) W‚Çìs)
    (match-define (-W¬π V‚Çì _) W‚Çì)
    (match V‚Çì
      [(or (-St (== ùíæ) _) (-St* (== ùíæ) _ _ _))
       (define ‚ü¶chk-field‚üßs : (Listof -‚ü¶e‚üß)
         (for/list ([W-C (in-list W-Cs)]
                    [i (in-naturals)] #:when (index? i))
           (define Ac (let ([ac (-st-ac ùíæ i)]) (-W¬π ac ac)))
           (mk-app-‚ü¶e‚üß l ‚Ñí (mk-rt-‚ü¶e‚üß W-C)
                       (list (mk-app-‚ü¶e‚üß l ‚Ñí (mk-rt-‚ü¶e‚üß Ac) (list (mk-rt-‚ü¶e‚üß W‚Çì)))))))
       (define P (let ([p (-st-p ùíæ)]) (-W¬π p p)))
       (app l $ ‚Ñí P (list W‚Çì) Œì ‚ü™‚Ñã‚ü´ Œ£ (and‚à∑ l ‚ü¶chk-field‚üßs ‚ä•œÅ ‚ü¶k‚üß))]
      [_
       (‚ü¶k‚üß -False/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))

  (define (app-Ar [C : -V] [c : -s] [V·µ§ : -V] [l¬≥ : -l¬≥]) : (‚Ñò -œÇ)
    (match-define (-l¬≥ l+ l- lo) l¬≥)
    (define W·µ§ (-W¬π V·µ§ s‚Çï)) ; inner function
    (match-define (-=> Œ±‚Ñìs Œ≤‚Ñì _) C)
    (match-define (cons Œ≤ ‚Ñì·µ£) Œ≤‚Ñì)
    (define-values (cs d) (-->-split c (length Œ±‚Ñìs)))
    (match-define (-Œ£ œÉ _ _) Œ£)
    (cond
      ;; FIXME: prevent this
      [(equal? V·µ§ V‚Çï)
       (log-warning "TODO: generalize to handle cycle properly")
       ‚àÖ]
      [else
       (match cs
         ['() ; no arg
          (for/union : (‚Ñò -œÇ) ([D (œÉ@ œÉ Œ≤)])
            (app lo $ ‚Ñí W·µ§ '() Œì ‚ü™‚Ñã‚ü´ Œ£
                 (mon.c‚à∑ l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) (-W¬π D d) ‚ü¶k‚üß)))]
         [(? pair?)
          (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
          (define l¬≥* (-l¬≥ l- l+ lo))
          (for/union : (‚Ñò -œÇ) ([Cs (in-set (œÉ@/list œÉ Œ±s))])
            (match-define (cons ‚ü¶mon-x‚üß ‚ü¶mon-x‚üßs)
              (for/list : (Listof -‚ü¶e‚üß) ([C Cs] [c cs] [W‚Çì W‚Çìs] [‚Ñì‚Çê : -‚Ñì ‚Ñìs])
                ;(printf "mon-arg: ~a ~a ~a~n" (+‚Ñì/‚Ñì¬≤ ‚Ñì ‚Ñì‚Çê) (show-W¬π (-W¬π C c)) (show-W¬π W‚Çì))
                (mk-mon-‚ü¶e‚üß l¬≥* (‚Ñí-with-mon ‚Ñí ‚Ñì‚Çê) (mk-rt-‚ü¶e‚üß (-W¬π C c)) (mk-rt-‚ü¶e‚üß W‚Çì))))
            (for/union : (‚Ñò -œÇ) ([D (in-set (œÉ@ œÉ Œ≤))])
              (‚ü¶mon-x‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£
               (ap‚à∑ (list W·µ§) ‚ü¶mon-x‚üßs ‚ä•œÅ lo ‚Ñí
                    (mon.c‚à∑ l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) (-W¬π D d) ‚ü¶k‚üß)))))])]))

  (define (app-Indy [C : -V] [c : -s] [V·µ§ : -V] [l¬≥ : -l¬≥]) : (‚Ñò -œÇ)
    (match-define (-l¬≥ l+ l- lo) l¬≥)
    (define l¬≥* (-l¬≥ l- l+ lo))
    (define W·µ§ (-W¬π V·µ§ s‚Çï)) ; inner function
    (match-define (-=>i Œ±‚Ñìs (list Mk-D mk-d ‚Ñì·µ£) _) C)
    (match-define (-Clo xs ‚ü¶d‚üß œÅ·µ£ _) Mk-D)
    (define W-rng (-W¬π Mk-D mk-d))
    ;(match-define (cons Œ≥ ‚Ñì·µ£) Œ≥‚Ñì)
    (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
    (define cs
      (let-values ([(cs _) (-->i-split c (length Œ±‚Ñìs))])
        cs))

    ;; FIXME tmp. copy n paste. Remove duplication
    (match mk-d
      [(-Œª (? list? xs) d)
       (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list œÉ Œ±s)])
         (define ‚ü¶mon-x‚üßs : (Listof -‚ü¶e‚üß)
           (for/list ([C Cs] [c cs] [W‚Çì W‚Çìs] [‚Ñì‚Çê : -‚Ñì ‚Ñìs])
             (mk-mon-‚ü¶e‚üß l¬≥* (‚Ñí-with-mon ‚Ñí ‚Ñì‚Çê) (mk-rt-‚ü¶e‚üß (-W¬π C c)) (mk-rt-‚ü¶e‚üß W‚Çì))))
         (define ‚ü¶x‚üßs : (Listof -‚ü¶e‚üß) (for/list ([x xs]) (‚Üì‚Çì 'Œõ x)))
         (match* (xs ‚ü¶x‚üßs ‚ü¶mon-x‚üßs)
           [('() '() '())
            (define ‚ü¶ap‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W·µ§) '()))
            (define ‚ü¶mon‚üß (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) ‚ü¶d‚üß ‚ü¶ap‚üß))
            (‚ü¶mon‚üß œÅ·µ£ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
           [((cons x xs*) (cons ‚ü¶x‚üß ‚ü¶x‚üßs*) (cons ‚ü¶mon-x‚üß ‚ü¶mon-x‚üßs*))
            (define ‚ü¶app‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W·µ§) ‚ü¶x‚üßs))
            (define ‚ü¶mon‚üß (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) ‚ü¶d‚üß ‚ü¶app‚üß))
            (‚ü¶mon-x‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£
             (let‚à∑ lo
                   (list x)
                   (for/list ([x·µ¢ xs*] [‚ü¶mon‚üß·µ¢ ‚ü¶mon-x‚üßs*])
                     (cons (list x·µ¢) ‚ü¶mon‚üß·µ¢))
                   '()
                   ‚ü¶mon‚üß
                   œÅ·µ£
                    ‚ü¶k‚üß))]))]
      [_
       (match xs
         [(? list? xs)
          (define ‚ü¶x‚üßs : (Listof -‚ü¶e‚üß) (for/list ([x xs]) (‚Üì‚Çì lo x)))
          (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list œÉ Œ±s)] [‚Ñì‚Çê : -‚Ñì ‚Ñìs])
            (define ‚ü¶mon-x‚üßs : (Listof -‚ü¶e‚üß)
              (for/list ([C Cs] [c cs] [W‚Çì W‚Çìs])
                (mk-mon-‚ü¶e‚üß l¬≥* (‚Ñí-with-mon ‚Ñí ‚Ñì‚Çê) (mk-rt-‚ü¶e‚üß (-W¬π C c)) (mk-rt-‚ü¶e‚üß W‚Çì))))
            (match* (xs ‚ü¶x‚üßs ‚ü¶mon-x‚üßs)
              [('() '() '())
               (define ‚ü¶app‚üß  (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W·µ§   ) '()))
               (define ‚ü¶mk-d‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W-rng) '()))
               (define ‚ü¶mon‚üß (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) ‚ü¶mk-d‚üß ‚ü¶app‚üß))
               (‚ü¶mon‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
              [((cons x xs*) (cons ‚ü¶x‚üß ‚ü¶x‚üßs*) (cons ‚ü¶mon-x‚üß ‚ü¶mon-x‚üßs*))
               (define ‚ü¶mon-y‚üß
                 (let ([‚ü¶mk-d‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W-rng) ‚ü¶x‚üßs)]
                       [‚ü¶app‚üß  (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß W·µ§   ) ‚ü¶x‚üßs)])
                   (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ£) ‚ü¶mk-d‚üß ‚ü¶app‚üß)))
               (‚ü¶mon-x‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£
                (let‚à∑ lo
                      (list x)
                      (for/list ([x·µ¢ xs*] [‚ü¶mon‚üß·µ¢ ‚ü¶mon-x‚üßs*])
                        (cons (list x·µ¢) ‚ü¶mon‚üß·µ¢))
                      '()
                      ‚ü¶mon-y‚üß
                      ‚ä•œÅ
                       ‚ü¶k‚üß))]))]
         [(-varargs zs z)
          (error 'app-Indy "Apply variable arity arrow")])]))

  (define (app-Case [C : -V] [c : -s] [V·µ§ : -V] [l¬≥ : -l¬≥]) : (‚Ñò -œÇ)
    (error 'app-Case "TODO"))

  (match V‚Çï
    ;; In the presence of struct contracts, field accessing is not an atomic operation
    ;; because structs can be contract-wrapped arbitrarily deeply,
    ;; plus contracts can be arbitrary code.
    ;; This means field accessing cannot be implemented in `Œ¥`
    [(-st-p  ùíæ) ((app-st-p ùíæ) l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
    [(-st-mk ùíæ) ((app-st-mk ùíæ) l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
    [(-st-ac  ùíæ i) ((app-st-ac  ùíæ i) l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
    [(-st-mut ùíæ i) ((app-st-mut ùíæ i) l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
    ['apply (app-apply l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]

    ;; Regular stuff
    [(? symbol? o) (app-prim-or-ext o)]
    [(-Clo xs ‚ü¶e‚üß œÅ‚Çï Œì‚Çï)
     (with-guarded-arity (formals-arity xs)
       (app-clo xs ‚ü¶e‚üß œÅ‚Çï Œì‚Çï))]
    [(-Case-Clo clauses œÅ Œì)
     (define n (length W‚Çìs))
     (define clause
       (for/or : (Option (Pairof (Listof Symbol) -‚ü¶e‚üß)) ([clause clauses])
         (match-define (cons xs _) clause)
         (and (equal? n (length xs)) clause)))
     (cond
       [clause
        (match-define (cons xs ‚ü¶e‚üß) clause)
        (app-clo xs ‚ü¶e‚üß œÅ Œì)]
       [else
        (define a (assert (V-arity V‚Çï)))
        (‚ü¶k‚üß (blm-arity a n) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])]
    [(-Ar C Œ± l¬≥)
     (with-guarded-arity (guard-arity C)
       (define-values (c _) (-ar-split s‚Çï))
       (cond
         [(-=>? C)  (for/union : (‚Ñò -œÇ) ([V·µ§ (œÉ@ œÉ Œ±)]) (app-Ar   C c V·µ§ l¬≥))]
         [(-=>i? C) (for/union : (‚Ñò -œÇ) ([V·µ§ (œÉ@ œÉ Œ±)]) (app-Indy C c V·µ§ l¬≥))]
         [else      (for/union : (‚Ñò -œÇ) ([V·µ§ (œÉ@ œÉ Œ±)]) (app-Case C c V·µ§ l¬≥))]))]
    [(-And/C #t (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ))
     (with-guarded-arity 1
       (define-values (c‚ÇÅ c‚ÇÇ)
         (match-let ([(list s‚ÇÅ s‚ÇÇ) (-app-split s‚Çï 'and/c 2)])
           (values (or s‚ÇÅ (‚ü™Œ±‚ü´->s Œ±‚ÇÅ))
                   (or s‚ÇÇ (‚ü™Œ±‚ü´->s Œ±‚ÇÇ)))))
       (for*/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
         (app-And/C (-W¬π C‚ÇÅ c‚ÇÅ) (-W¬π C‚ÇÇ c‚ÇÇ))))]
    [(-Or/C #t (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ))
     (with-guarded-arity 1
       (define-values (c‚ÇÅ c‚ÇÇ)
         (match-let ([(list s‚ÇÅ s‚ÇÇ) (-app-split s‚Çï 'or/c 2)])
           (values (or s‚ÇÅ (‚ü™Œ±‚ü´->s Œ±‚ÇÅ))
                   (or s‚ÇÇ (‚ü™Œ±‚ü´->s Œ±‚ÇÇ)))))
       (for*/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
         (app-Or/C (-W¬π C‚ÇÅ c‚ÇÅ) (-W¬π C‚ÇÇ c‚ÇÇ))))]
    [(-Not/C (cons Œ± ‚Ñì*))
     (with-guarded-arity 1
       (define c*
         (match-let ([(list s) (-app-split s‚Çï 'not/c 1)])
           (or s (‚ü™Œ±‚ü´->s Œ±))))
       (for/union : (‚Ñò -œÇ) ([C* (œÉ@ œÉ Œ±)])
         (app-Not/C (-W¬π C* c*))))]
    [(-St/C #t s Œ±‚Ñìs)
     (with-guarded-arity 1
       (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
       (define cs : (Listof -s)
         (for/list ([s (-struct/c-split s‚Çï s)]
                    [Œ± : -‚ü™Œ±‚ü´ Œ±s])
           (or s (‚ü™Œ±‚ü´->s Œ±))))
       (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list œÉ Œ±s)])
         (app-St/C s (map -W¬π Cs cs))))]
    [(-‚óè _)
     (case (MŒì‚ä¢oW M œÉ Œì 'procedure? W‚Çï)
       [(‚úì ?) ((app-opq s‚Çï) l $ ‚Ñí W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
       [(‚úó) (‚ü¶k‚üß (-blm l 'Œõ (list 'procedure?) (list V‚Çï)) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])]
    [_
     (define blm (-blm l 'Œõ (list 'procedure?) (list V‚Çï)))
     (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Applications
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-type -‚ü¶f‚üß (-l -$ -‚Ñí (Listof -W¬π) -Œì -‚ü™‚Ñã‚ü´ -Œ£ -‚ü¶k‚üß ‚Üí (‚Ñò -œÇ)))

(: app-st-p : -ùíæ ‚Üí -‚ü¶f‚üß)
(define (app-st-p ùíæ)
  (define st-p (-st-p ùíæ))
  (Œª (l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (match Ws
      [(list (and W (-W¬π _ s)))
       (match-define (-Œ£ œÉ _ M) Œ£)
       (define s‚Çê (-?@ st-p s))
       (define A
         (case (MŒì‚ä¢oW M œÉ Œì st-p W)
           [(‚úì) -True/Vs]
           [(‚úó) -False/Vs]
           [(?) -Bool/Vs]))
       (‚ü¶k‚üß (-W A s‚Çê) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
      [_
       (define blm (blm-arity l (show-o st-p) 1 (map -W¬π-V Ws)))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(: app-st-mk : -ùíæ ‚Üí -‚ü¶f‚üß)
(define (app-st-mk ùíæ)
  (define st-mk (-st-mk ùíæ))
  (define n (get-struct-arity ùíæ))
  (Œª (l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (cond
      [(= n (length Ws))
       (match-define (-Œ£ œÉ _ M) Œ£)
       (define s‚Çê (apply -?@ st-mk (map -W¬π-s Ws)))
       (define Œ±s : (Listof -‚ü™Œ±‚ü´)
         (for/list ([i : Index n])
           (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.fld ùíæ ‚Ñí ‚ü™‚Ñã‚ü´ i))))
       (for ([Œ± : -‚ü™Œ±‚ü´ Œ±s] [W (in-list Ws)])
         (match-define (-W¬π V s) W)
         (define V* (V+ œÉ V (predicates-of Œì s)))
         (œÉ‚äï! œÉ Œ± V*))
       (define V (-St ùíæ Œ±s))
       (‚ü¶k‚üß (-W (list V) s‚Çê) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
      [else
       (define blm (blm-arity l (show-o st-mk) n (map -W¬π-V Ws)))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(: app-st-ac : -ùíæ Index ‚Üí -‚ü¶f‚üß)
(define (app-st-ac ùíæ i)
  (define ac (-st-ac ùíæ i))
  (define p  (-st-p ùíæ))
  (define n (get-struct-arity ùíæ))
  (define mutable-field? (struct-mutable? ùíæ i))
  
  (: ‚ü¶ac‚üß : -‚ü¶f‚üß)
  (define (‚ü¶ac‚üß l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (match Ws
      [(list (and W (-W¬π V s)))
       (define (blm) (-blm l (show-o ac) (list p) (list V)))
       (match-define (-Œ£ œÉ _ M) Œ£)
       (define s‚Çê (-?@ ac s))
       (match V
         [(-St (== ùíæ) Œ±s)
          (define Œ± (list-ref Œ±s i))
          (cond
            [(and (not mutable-field?) ($@ $ s‚Çê)) =>
             (Œª ([V : -V])
               (cond [(plausible-V-s? (-Œì-facts Œì) V s‚Çê)
                      (define $* ($+ $ s‚Çê V))
                      (‚ü¶k‚üß (-W (list V) s‚Çê) $* Œì ‚ü™‚Ñã‚ü´ Œ£)]
                     [else ‚àÖ]))]
            [else
             (define Vs (œÉ@ œÉ Œ±))
             (for/union : (‚Ñò -œÇ) ([V Vs])
                (cond [(plausible-V-s? (-Œì-facts Œì) V s‚Çê)
                       (define $* (if mutable-field? $ ($+ $ s‚Çê V)))
                       (‚ü¶k‚üß (-W (list V) s‚Çê) $* Œì ‚ü™‚Ñã‚ü´ Œ£)]
                      [else ‚àÖ]))])]
         [(-St* (== ùíæ) Œ±s Œ± l¬≥)
          (match-define (-l¬≥ _ _ l‚Çí) l¬≥)
          (define Ac (-W¬π ac ac))
          (cond
            ;; field is wrapped
            [(list-ref Œ±s i) =>
             (Œª ([Œ±·µ¢ : -‚ü™Œ±‚ü´])
               (define C·µ¢s (œÉ@ œÉ Œ±·µ¢))
               (define Vs  (œÉ@ œÉ Œ±))
               (define c·µ¢ (‚ü™Œ±‚ü´->s Œ±·µ¢))
               (for*/union : (‚Ñò -œÇ) ([C·µ¢ (in-set C·µ¢s)] [V* (in-set Vs)])
                 (‚ü¶ac‚üß l‚Çí $ ‚Ñí (list (-W¬π V* s)) Œì ‚ü™‚Ñã‚ü´ Œ£
                   (mon.c‚à∑ l¬≥ ‚Ñí (-W¬π C·µ¢ c·µ¢) ‚ü¶k‚üß))))]
            ;; field is unwrapped because it's immutable
            [else
             ;; TODO: could this loop forever due to cycle?
             (for/union : (‚Ñò -œÇ) ([V* (in-set (œÉ@ œÉ Œ±))])
                (‚ü¶ac‚üß l‚Çí $ ‚Ñí (list (-W¬π V* s)) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))])]
         [(-‚óè ps)
          (with-Œì+/- ([(Œì‚Çí‚Çñ Œì‚Çë·µ£) (MŒì+/-oW M œÉ Œì p W)])
            #:true  (‚ü¶k‚üß (-W (if (and (equal? ùíæ -ùíæ-cons) (equal? i 1) (‚àã ps 'list?))
                                 (list (-‚óè {set 'list?}))
                                 -‚óè/Vs)
                             s‚Çê)
                     $ Œì‚Çí‚Çñ ‚ü™‚Ñã‚ü´ Œ£)
            #:false (‚ü¶k‚üß (blm) $ Œì‚Çë·µ£ ‚ü™‚Ñã‚ü´ Œ£))]
         [_ (‚ü¶k‚üß (blm) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])]
      [_
       (define blm (blm-arity l (show-o ac) 1 (map -W¬π-V Ws)))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))
  ‚ü¶ac‚üß)

(: app-st-mut : -ùíæ Index ‚Üí -‚ü¶f‚üß)
(define (app-st-mut ùíæ i)
  (define mut (-st-mut ùíæ i))
  (define p (-st-p ùíæ))
  
  (: ‚ü¶mut‚üß : -‚ü¶f‚üß)
  (define (‚ü¶mut‚üß l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (match Ws
      [(list W‚Çõ W·µ•)
       (match-define (-Œ£ œÉ _ M) Œ£)
       (match-define (-W¬π V‚Çõ s‚Çõ) W‚Çõ)
       (match-define (-W¬π V·µ• _ ) W·µ•)
       (define (blm) (-blm l (show-o mut) (list p) (list V‚Çõ)))
       
       (match V‚Çõ
         [(-St (== ùíæ) Œ±s)
          (define Œ± (list-ref Œ±s i))
          (œÉ‚äï! œÉ Œ± V·µ• #:mutating? #t)
          (‚ü¶k‚üß -Void/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
         [(-St* (== ùíæ) Œ≥s Œ± l¬≥)
          (match-define (-l¬≥ l+ l- lo) l¬≥)
          (define l¬≥* (-l¬≥ l- l+ lo))
          (match-define (? -Œ±? Œ≥) (list-ref Œ≥s i))
          (define c (‚ü™Œ±‚ü´->s Œ≥))
          (define Mut (-W¬π mut mut))
          (for*/union : (‚Ñò -œÇ) ([C (œÉ@ œÉ Œ≥)] [V‚Çõ* (œÉ@ œÉ Œ±)])
                      (define W-c (-W¬π C c))
                      (define W‚Çõ* (-W¬π V‚Çõ* s‚Çõ))
                      (mon l¬≥* $ ‚Ñí W-c W·µ• Œì ‚ü™‚Ñã‚ü´ Œ£
                           (ap‚à∑ (list W‚Çõ Mut) '() ‚ä•œÅ lo ‚Ñí ‚ü¶k‚üß)))]
         [(-‚óè _)
          (define ‚ü¶ok‚üß
            (let ([‚ü¶hv‚üß (mk-app-‚ü¶e‚üß 'havoc ‚Ñí
                                    (mk-rt-‚ü¶e‚üß (-W¬π -‚óè/V #f))
                                    (list (mk-rt-‚ü¶e‚üß W·µ•)))])
              (mk-app-‚ü¶e‚üß 'havoc ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π 'void 'void)) (list ‚ü¶hv‚üß))))
          (define ‚ü¶er‚üß (mk-rt-‚ü¶e‚üß (blm)))
          (app 'Œõ $ ‚Ñí (-W¬π p p) (list W‚Çõ) Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶ok‚üß ‚ü¶er‚üß ‚ä•œÅ ‚ü¶k‚üß))]
         [_ (‚ü¶k‚üß (blm) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])]
      [_
       (define blm (blm-arity l (show-o mut) 2 (map -W¬π-V Ws)))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))
  ‚ü¶mut‚üß)

(: app-apply : -‚ü¶f‚üß)
(define (app-apply l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ _ M) Œ£)
  (match-define (cons W‚ÇÄ W·µ¢s) Ws)
  ;; special case for `slatex`
  (match* (W‚ÇÄ W·µ¢s)
    [((-W¬π (-Clo (-varargs (list x) x·µ£) ‚ü¶e‚üß œÅ Œì) s‚Çï) (list W‚ÇÅ W‚ÇÇ W·µ£))
     (match-define (-W¬π V‚ÇÇ s‚ÇÇ) W‚ÇÇ)
     (match-define (-W¬π V·µ£ s·µ£) W·µ£)
     (define W‚Çó
       (let ([s‚Çó (-?@ -cons s‚ÇÇ s·µ£)]
             [Œ±‚Çï (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-car ‚Ñí ‚ü™‚Ñã‚ü´ 0))]
             [Œ±‚Çú (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-cdr ‚Ñí ‚ü™‚Ñã‚ü´ 1))])
         (define V‚Çó (-Cons Œ±‚Çï Œ±‚Çú))
         (œÉ‚äï*! œÉ [Œ±‚Çï ‚Ü¶ V‚ÇÇ] [Œ±‚Çú ‚Ü¶ V·µ£])
         (-W¬π V‚Çó s‚Çó)))
     (app l $ ‚Ñí (-W¬π (-Clo (list x x·µ£) ‚ü¶e‚üß œÅ Œì) s‚Çï) (list W‚ÇÅ W‚Çó) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
    [(_ _)
     (error 'app-apply "TODO: ~a ~a" (show-W¬π W‚ÇÄ) (map show-W¬π W·µ¢s))]))

(: app-opq : -s ‚Üí -‚ü¶f‚üß)
(define ((app-opq s‚Çï) l $ ‚Ñí Ws Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ œÉ‚Çñ _) Œ£)
  (define s‚Çê (apply -?@ s‚Çï (map -W¬π-s Ws)))
  (define Œ±‚Çñ (-‚Ñãùí±* ‚Ñí (for/set: : (‚Ñò -V) ([W (in-list Ws)]) (-W¬π-V W))))
  (define Œ∫ (-Œ∫ (bgn0.e‚à∑ (-W -‚óè/Vs s‚Çê) '() ‚ä•œÅ ‚ü¶k‚üß) Œì ‚ü™‚Ñã‚ü´ 'void '()))
  (œÉ‚Çñ‚äî! œÉ‚Çñ Œ±‚Çñ Œ∫)
  {set (-œÇ‚Üë Œ±‚Çñ Œì ‚ü™‚Ñã‚ü´)})

(: alloc-init-args! : -œÉ -Œì -œÅ -‚ü™‚Ñã‚ü´ (Listof Symbol) (Listof -W¬π) ‚Üí -œÅ)
(define (alloc-init-args! œÉ Œì œÅ ‚ü™‚Ñã‚ü´ xs Ws)
  (define œÅ‚ÇÄ (œÅ+ œÅ -x-dummy (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x -x-dummy ‚ü™‚Ñã‚ü´))))
  (for/fold ([œÅ : -œÅ œÅ‚ÇÄ]) ([x xs] [W‚Çì Ws])
    (match-define (-W¬π V‚Çì s‚Çì) W‚Çì)
    (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´)))
    (define V‚Çì*
      ;; Refine arguments by type-like contracts before proceeding
      ;; This could save lots of spurious errors to eliminate later
      (V+ œÉ V‚Çì (predicates-of Œì s‚Çì)))
    (œÉ‚äï! œÉ Œ± V‚Çì*)
    
    ;; Debug for `slatex`
    #;(when (and (member x '(raw-filename s‚ÇÉ filename filename‚ÇÅ))
               (match? W‚Çì (-W¬π (? -‚óè?) _)))
      (printf "binding ~a as ~a~n~n" x (show-W¬π W‚Çì)))

    (œÅ+ œÅ x Œ±)))

(: alloc-rest-args! : -œÉ -Œì -‚ü™‚Ñã‚ü´ -‚Ñí (Listof -W¬π) ‚Üí -V)
(define (alloc-rest-args! œÉ Œì ‚ü™‚Ñã‚ü´ ‚Ñí Ws)

  (: precise-alloc! ([(Listof -W¬π)] [Natural] . ->* . -V))
  ;; Allocate vararg list precisely, preserving length
  (define (precise-alloc! Ws [i 0])
    (match Ws
      [(list) -null]
      [(cons (-W¬π V‚Çï _) Ws*)
       (define Œ±‚Çï (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-car ‚Ñí ‚ü™‚Ñã‚ü´ i)))
       (define Œ±‚Çú (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-cdr ‚Ñí ‚ü™‚Ñã‚ü´ i)))
       (œÉ‚äï*! œÉ [Œ±‚Çï ‚Ü¶ V‚Çï]
               [Œ±‚Çú ‚Ü¶ (precise-alloc! Ws* (+ 1 i))])
       (-Cons Œ±‚Çï Œ±‚Çú)]))
  
  ;; Allocate length up to 2 precisely to let `splay` to go through
  ;; This is because `match-lambda*` expands to varargs with specific
  ;; expectation of arities
  (match Ws
    [(or (list) (list _) (list _ _))
     (precise-alloc! Ws)]
    [(? pair?)
     (define Œ±‚Çï (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-car ‚Ñí ‚ü™‚Ñã‚ü´ #f)))
     (define Œ±‚Çú (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.var-cdr ‚Ñí ‚ü™‚Ñã‚ü´ #f)))
     (define V‚Çú (-Cons Œ±‚Çï Œ±‚Çú))
     ;; Allocate spine for var-arg lists
     (œÉ‚äï*! œÉ [Œ±‚Çú ‚Ü¶ V‚Çú] [Œ±‚Çú ‚Ü¶ -null])
     ;; Allocate elements in var-arg lists
     (for ([W Ws])
       (match-define (-W¬π V‚Çï s‚Çï) W)
       (œÉ‚äï! œÉ Œ±‚Çï (V+ œÉ V‚Çï (predicates-of Œì s‚Çï))))
     V‚Çú]))

(: mon : -l¬≥ -$ -‚Ñí -W¬π -W¬π -Œì -‚ü™‚Ñã‚ü´ -Œ£ -‚ü¶k‚üß ‚Üí (‚Ñò -œÇ))
(define (mon l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-W¬π C _) W-C)
  (define mon*
    (cond
      [(-=>_? C) mon-=>_]
      [(-St/C? C) mon-struct/c]
      [(-x/C? C) mon-x/c]
      [(-And/C? C) mon-and/c]
      [(-Or/C? C) mon-or/c]
      [(-Not/C? C) mon-not/c]
      [(-Vectorof? C) mon-vectorof]
      [(-Vector/C? C) mon-vector/c]
      [else mon-flat/c]))
  (mon* l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Stack frames
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Application
(define/memo (ap‚à∑ [Ws : (Listof -W¬π)]
                  [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)]
                  [œÅ : -œÅ]
                  [l : -l]
                  [‚Ñí : -‚Ñí]
                  [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (Ws œÅ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list V)
       (define Ws* (cons (-W¬π V s) Ws))
       (match ‚ü¶e‚üßs
         ['()
          (match-define (cons W‚Çï W‚Çìs) (reverse Ws*))
          (app l $ ‚Ñí W‚Çï W‚Çìs Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
         [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
          (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ Ws* ‚ü¶e‚üßs* œÅ l ‚Ñí ‚ü¶k‚üß))])]
      [_
       (define blm
         (-blm l 'Œõ (list '1-value) (list (format-symbol "~a values" (length Vs)))))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (mon.c‚à∑ [l¬≥ : -l¬≥]
                     [‚Ñí : -‚Ñí]
                     [C : (U (Pairof -‚ü¶e‚üß -œÅ) -W¬π)]
                     [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match-define (-l¬≥ _ _ lo) l¬≥)
  (define root (if (pair? C) (cdr C) C))
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (root)
    (match-define (-W Vs s) A)
    (match Vs
      [(list V)
       (define W-V (-W¬π V s))
       (cond [(-W¬π? C) (mon l¬≥ $ ‚Ñí C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
             [else
              (match-define (cons ‚ü¶c‚üß œÅ) C)
              (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (mon.v‚à∑ l¬≥ ‚Ñí W-V ‚ü¶k‚üß))])]
      [else
       (define blm (-blm lo 'Œõ '(|1 value|) Vs))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (mon.v‚à∑ [l¬≥ : -l¬≥]
                     [‚Ñí : -‚Ñí]
                     [V : (U (Pairof -‚ü¶e‚üß -œÅ) -W¬π)]
                     [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match-define (-l¬≥ _ _ lo) l¬≥)
  (define root (if (pair? V) (cdr V) V))
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (root)
    (match-define (-W Vs s) A)
    (match Vs
      [(list C)
       (define W-C (-W¬π C s))
       (cond [(-W¬π? V) (mon l¬≥ $ ‚Ñí W-C V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
             [else
              (match-define (cons ‚ü¶v‚üß œÅ) V)
              (‚ü¶v‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (mon.c‚à∑ l¬≥ ‚Ñí W-C ‚ü¶k‚üß))])]
      [else
       (define blm (-blm lo 'Œõ '(|1 value|) Vs))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

;; let-values
(define/memo (let‚à∑ [l : -l]
                   [xs : (Listof Symbol)]
                   [‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))]
                   [bnd-Ws : (Listof (List Symbol -V -s))]
                   [‚ü¶e‚üß : -‚ü¶e‚üß]
                   [œÅ : -œÅ]
                   [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (œÅ)
    (match-define (-W Vs s) A)
    (define n (length xs))
    
    (cond
      [(= n (length Vs))
       (define bnd-Ws*
         (for/fold ([acc : (Listof (List Symbol -V -s)) bnd-Ws])
                   ([x xs] [V Vs] [s‚Çì (split-values s n)])
           (cons (list x V s‚Çì) acc)))
       (match ‚ü¶bnd‚üßs
         ['()
          (match-define (-Œ£ œÉ _ _) Œ£)
          (define-values (œÅ* Œì*) ; with side effect widening store
            (for/fold ([œÅ : -œÅ œÅ] [Œì : -Œì Œì])
                      ([bnd-W bnd-Ws*])
              (match-define (list (? symbol? x) (? -V? V‚Çì) (? -s? s‚Çì)) bnd-W)
              (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´)))
              (œÉ‚äï! œÉ Œ± (V+ œÉ V‚Çì (predicates-of Œì s‚Çì)))
              (values (œÅ+ œÅ x Œ±) (-Œì-with-aliases Œì x s‚Çì))))
          (‚ü¶e‚üß œÅ* $ Œì* ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
         [(cons (cons xs* ‚ü¶e‚üß*) ‚ü¶bnd‚üßs*)
          (‚ü¶e‚üß* œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (let‚à∑ l xs* ‚ü¶bnd‚üßs* bnd-Ws* ‚ü¶e‚üß œÅ ‚ü¶k‚üß))])]
      [else
       (define blm
         (-blm l 'let-values
               (list (format-symbol "requires ~a values" (length xs)))
               (list (format-symbol "provided ~a values" (length Vs)))))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

;; begin
(define/memo (bgn‚à∑ [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match ‚ü¶e‚üßs
    ['() ‚ü¶k‚üß]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
     (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (œÅ)
       (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (rst-Œì‚à∑ Œì (make-memoized-‚ü¶k‚üß (bgn‚à∑ ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß)))))]))

;; begin0, waiting on first value
(define/memo (bgn0.v‚à∑ [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match ‚ü¶e‚üßs
    ['() ‚ü¶k‚üß]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
     (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (œÅ)
       (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (rst-Œì‚à∑ Œì (bgn0.e‚à∑ A ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß))))]))

;; begin0, already have first value
(define/memo (bgn0.e‚à∑ [W : -W] [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match ‚ü¶e‚üßs
    ['()
     (with-error-handling (‚ü¶k‚üß _ $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W)
       (‚ü¶k‚üß W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
     (with-error-handling (‚ü¶k‚üß _ $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W œÅ)
       (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (rst-Œì‚à∑ Œì (bgn0.e‚à∑ W ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß))))]))

;; clean-up path-condition
(define/memo (rst-Œì‚à∑ [Œì : -Œì] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ _ ‚ü™‚Ñã‚ü´ Œ£) #:roots ()
    (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(:* mon-=>_ mon-struct/c mon-x/c mon-and/c mon-or/c mon-not/c mon-vectorof mon-vector/c mon-flat/c :
    -l¬≥ -$ -‚Ñí -W¬π -W¬π -Œì -‚ü™‚Ñã‚ü´ -Œ£ -‚ü¶k‚üß ‚Üí (‚Ñò -œÇ))

(define (mon-=>_ l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-W¬π (? -=>_? grd) c) W-C)
  (match-define (-W¬π V v) W-V)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-Œ£ œÉ _ M) Œ£)

  (define arity
    (let* ([a (guard-arity grd)]
           [b (-b a)])
      (-W¬π b b)))
  
  (define-values (Œì‚ÇÅ Œì‚ÇÇ) (MŒì+/-oW M œÉ Œì 'procedure? W-V))
  (define-values (Œì‚ÇÅ‚ÇÅ Œì‚ÇÅ‚ÇÇ)
    (if Œì‚ÇÅ
        (let ([A (V-arity V)]
              [a (-?@ 'procedure-arity v)])
          (define W-a (-W¬π (if A (-b A) -‚óè/V) a))
          (MŒì+/-oW M œÉ Œì‚ÇÅ 'arity-includes? W-a arity))
        (values #f #f)))
  #;(match-define (-‚Ñí _ ‚Ñì) ‚Ñí)
  (‚à™ (cond [Œì‚ÇÅ‚ÇÅ
            (define grd-‚Ñì
              (cond [(-=>? grd) (-=>-pos grd)]
                    [(-=>i? grd) (-=>i-pos grd)]
                    [else (error 'mon-=>_ "unexpected")]))
            (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (or (keep-if-const v) (-Œ±.fn ‚Ñí grd-‚Ñì ‚ü™‚Ñã‚ü´))))
            (define Ar (-Ar grd Œ± l¬≥))
            (œÉ‚äï! œÉ Œ± V)
            (define v* ; hack
              (match v
                [(-ar (== c) _) v]
                [_ (-?ar c v)]))
            (‚ü¶k‚üß (-W (list Ar) v*) $ Œì‚ÇÅ‚ÇÅ ‚ü™‚Ñã‚ü´ Œ£)]
           [else ‚àÖ])
     (cond [Œì‚ÇÅ‚ÇÇ
            (define C #|HACK|#
              (match arity
                [(-W¬π (-b (? integer? n)) _)
                 (format-symbol "(arity-includes/c ~a)" n)]
                [(-W¬π (-b (arity-at-least n)) _)
                 (format-symbol "(arity-at-least/c ~a)" n)]))
            (‚ü¶k‚üß (-blm l+ lo (list C) (list V)) $ Œì‚ÇÅ‚ÇÇ ‚ü™‚Ñã‚ü´ Œ£)]
           [else ‚àÖ])
     (cond [Œì‚ÇÇ (‚ü¶k‚üß (-blm l+ lo (list 'procedure?) (list V)) $ Œì‚ÇÇ ‚ü™‚Ñã‚ü´ Œ£)]
           [else ‚àÖ])))

(define (mon-struct/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-W¬π C c) W-C)
  (match-define (-W¬π V v) W-V)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-St/C flat? ùíæ Œ±‚Ñìs) C)
  (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
  (define cs (-struct/c-split c ùíæ))
  (define p (-st-p ùíæ))
  (define K (let ([k (-st-mk ùíæ)]) (-W¬π k k)))
  (define all-immutable? (struct-all-immutable? ùíæ))

  (define ‚ü¶field‚üßs : (Listof -‚ü¶e‚üß)
    (for/list ([Œ± (in-list Œ±s)]
               [i (in-naturals)] #:when (index? i))
      (define ac (-st-ac ùíæ i))
      (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π ac ac)) (list (mk-rt-‚ü¶e‚üß (-W¬π V v))))))

  (match V ; FIXME code dup
    [(or (-St (== ùíæ) _) (-St* (== ùíæ) _ _ _))
     (cond
       [(null? ‚ü¶field‚üßs)
        (‚ü¶k‚üß (-W (list V) v) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
       [else
        (match-define (-‚Ñí _ ‚Ñì) ‚Ñí)
        (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list (-Œ£-œÉ Œ£) Œ±s)])
                   (define ‚ü¶mon‚üßs : (Listof -‚ü¶e‚üß)
                     (for/list ([C·µ¢ Cs] [c·µ¢ cs] [‚ü¶field‚üß ‚ü¶field‚üßs] [‚Ñì·µ¢ : -‚Ñì ‚Ñìs])
                       (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ¢) (mk-rt-‚ü¶e‚üß (-W¬π C·µ¢ c·µ¢)) ‚ü¶field‚üß)))
                   (define ‚ü¶reconstr‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß K) ‚ü¶mon‚üßs))
                   (define ‚ü¶k‚üß*
                     (cond [all-immutable? ‚ü¶k‚üß]
                           [else
                            (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.st ùíæ ‚Ñì ‚ü™‚Ñã‚ü´)))
                            (wrap-st‚à∑ ùíæ Œ±s Œ± l¬≥ ‚ü¶k‚üß)]))
                   (‚ü¶reconstr‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß*))])]
    [(-‚óè _)
     (match-define (-‚Ñí _ ‚Ñì) ‚Ñí)
     (define ‚ü¶chk‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π p p)) (list (mk-rt-‚ü¶e‚üß W-V))))
     (define ‚ü¶blm‚üß (mk-rt-‚ü¶e‚üß (-blm l+ lo (list p) (list V))))
     (cond
       [(null? ‚ü¶field‚üßs)
        (define ‚ü¶rt‚üß (mk-rt-‚ü¶e‚üß W-V))
        (‚ü¶chk‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ lo ‚ü¶rt‚üß ‚ü¶blm‚üß ‚ä•œÅ ‚ü¶k‚üß))]
       [else
        (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list (-Œ£-œÉ Œ£) Œ±s)])
          (define ‚ü¶mon‚üßs : (Listof -‚ü¶e‚üß)
            (for/list ([C·µ¢ Cs] [c·µ¢ cs] [‚ü¶field‚üß ‚ü¶field‚üßs] [‚Ñì·µ¢ : -‚Ñì ‚Ñìs])
              (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì·µ¢) (mk-rt-‚ü¶e‚üß (-W¬π C·µ¢ c·µ¢)) ‚ü¶field‚üß)))
          (define ‚ü¶reconstr‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß K) ‚ü¶mon‚üßs))
          (define ‚ü¶k‚üß*
            (cond
              [all-immutable? ‚ü¶k‚üß]
              [else
               (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.st ùíæ ‚Ñì ‚ü™‚Ñã‚ü´)))
               (wrap-st‚à∑ ùíæ Œ±s Œ± l¬≥ ‚ü¶k‚üß)]))
          (‚ü¶chk‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£
           (if‚à∑ lo ‚ü¶reconstr‚üß ‚ü¶blm‚üß ‚ä•œÅ ‚ü¶k‚üß*)))])]
    [_ (‚ü¶k‚üß (-blm l+ lo (list C) (list V)) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))

(define (mon-x/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-W¬π C c) W-C)
  (match-define (-W¬π V v) W-V)
  (match-define (-x/C ‚ü™Œ±‚ü´) C)
  (define x (match-let ([(-Œ±.x/c x*) (-‚ü™Œ±‚ü´->-Œ± ‚ü™Œ±‚ü´)])
              (+x!/memo 'mon x*)))
  (define ùê± (-x x))
  (match-define (-Œ£ œÉ œÉ‚Çñ _) Œ£)
  (for/set: : (‚Ñò -œÇ) ([C* (œÉ@ œÉ ‚ü™Œ±‚ü´)])
    (define Œ±‚Çñ
      (let ([W-C* (-W¬π C* c)]
            [W-V* (-W¬π V ùê±)])
        (-‚Ñ≥ x l¬≥ ‚Ñí W-C* W-V*)))
    (define Œ∫ (-Œ∫ ‚ü¶k‚üß Œì ‚ü™‚Ñã‚ü´ #|FIXME hack|# 'values (list v)))
    (œÉ‚Çñ‚äî! œÉ‚Çñ Œ±‚Çñ Œ∫)
    (-œÇ‚Üë Œ±‚Çñ ‚ä§Œì #;Œì* ‚ü™‚Ñã‚ü´)))

(define (mon-and/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ _ _) Œ£)
  (match-define (-W¬π (-And/C _ (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ)) c) W-C)
  (match-define (list c‚ÇÅ c‚ÇÇ) (-app-split c 'and/c 2))
  (for/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
    (mon l¬≥ $ (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÅ) (-W¬π C‚ÇÅ c‚ÇÅ) W-V Œì ‚ü™‚Ñã‚ü´ Œ£ 
         (mon.c‚à∑ l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÇ) (-W¬π C‚ÇÇ c‚ÇÇ) ‚ü¶k‚üß))))

(define (mon-or/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ _ _) Œ£)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-W¬π (-Or/C flat? (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ)) c) W-C)
  (define-values (c‚ÇÅ c‚ÇÇ)
    (match-let ([(list s‚ÇÅ s‚ÇÇ) (-app-split c 'or/c 2)])
      (values (or s‚ÇÅ (‚ü™Œ±‚ü´->s Œ±‚ÇÅ))
              (or s‚ÇÇ (‚ü™Œ±‚ü´->s Œ±‚ÇÇ)))))
  
  (: chk-or/c : -W¬π -‚Ñì -W¬π -‚Ñì ‚Üí (‚Ñò -œÇ))
  (define (chk-or/c W-fl ‚Ñì-fl W-ho ‚Ñì-ho)
    (flat-chk lo $ (‚Ñí-with-mon ‚Ñí ‚Ñì-fl) W-fl W-V Œì ‚ü™‚Ñã‚ü´ Œ£
              (mon-or/c‚à∑ l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì-ho) W-fl W-ho W-V ‚ü¶k‚üß)))

  (for*/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
    (define W-C‚ÇÅ (-W¬π C‚ÇÅ c‚ÇÅ))
    (define W-C‚ÇÇ (-W¬π C‚ÇÇ c‚ÇÇ))
    (cond [(C-flat? C‚ÇÅ) (chk-or/c W-C‚ÇÅ ‚Ñì‚ÇÅ W-C‚ÇÇ ‚Ñì‚ÇÇ)]
          [(C-flat? C‚ÇÇ) (chk-or/c W-C‚ÇÇ ‚Ñì‚ÇÇ W-C‚ÇÅ ‚Ñì‚ÇÅ)]
          [else (error 'or/c "No more than 1 higher-order disjunct for now")])))

(define (mon-not/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-W¬π (and C (-Not/C (cons Œ± ‚Ñì*))) c) W-C)
  (match-define (-W¬π V _) W-V)
  (match-define (list c*) (-app-split c 'not/c 1))
  (define ‚ü¶k‚üß*
    (let ([‚ü¶ok‚üß (mk-rt-‚ü¶e‚üß W-V)]
          [‚ü¶er‚üß (mk-rt-‚ü¶e‚üß (-blm l+ lo (list C) (list V)))])
      (if‚à∑ lo ‚ü¶er‚üß ‚ü¶ok‚üß ‚ä•œÅ ‚ü¶k‚üß)))
  (for/union : (‚Ñò -œÇ) ([C* (œÉ@ (-Œ£-œÉ Œ£) Œ±)])
    (assert C* C-flat?)
    (define W-C* (-W¬π C* c*))
    (app lo $ (‚Ñí-with-mon ‚Ñí ‚Ñì*) W-C* (list W-V) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß*)))

(define (mon-vectorof l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ _ _) Œ£)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-W¬π V·µ• s·µ•) W-V)
  (match-define (-W¬π (-Vectorof (cons Œ± ‚Ñì*)) _) W-C)
  (define c (‚ü™Œ±‚ü´->s Œ±))
  (define ‚ü¶rt‚üß (mk-rt-‚ü¶e‚üß W-V))

  ;(printf "mon-vectorof ~a on ~a~n" (show-W¬π W-C) (show-W¬π W-V))
  
  (match V·µ•
    [(-Vector Œ±s)
     (define ‚ü¶erase‚üß (mk-erase-‚ü¶e‚üß Œ±s))
     (define ‚ü¶rt-‚óè‚üß (mk-rt-‚ü¶e‚üß (-W¬π -‚óè/V #f)))
     (for*/union : (‚Ñò -œÇ) ([C (œÉ@ œÉ Œ±)] [Vs (œÉ@/list œÉ Œ±s)])
       (define ‚ü¶hv‚üßs : (Listof -‚ü¶e‚üß)
         (for/list ([V* (in-list Vs)]
                    [i (in-naturals)] #:when (index? i))
           (define ‚ü¶chk‚üß
             (mk-mon-‚ü¶e‚üß l¬≥ (‚Ñí-with-mon ‚Ñí ‚Ñì*)
                         (mk-rt-‚ü¶e‚üß (-W¬π C c))
                         (mk-rt-‚ü¶e‚üß (-W¬π V* (-?@ 'vector-ref s·µ• (-b i))))))
           (mk-app-‚ü¶e‚üß lo ‚Ñí ‚ü¶rt-‚óè‚üß (list ‚ü¶chk‚üß))))
       (match-define (cons ‚ü¶e‚üß ‚ü¶e‚üßs) (append ‚ü¶hv‚üßs (list ‚ü¶erase‚üß ‚ü¶rt‚üß)))
       (‚ü¶e‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶e‚üßs ‚ä•œÅ ‚ü¶k‚üß)))]
    [(-Vector^ Œ±·µ• n)
     (define ‚ü¶erase‚üß (mk-erase-‚ü¶e‚üß (list Œ±·µ•)))
     (for*/union : (‚Ñò -œÇ) ([C (œÉ@ œÉ Œ±)] [V* (œÉ@ œÉ Œ±·µ•)])
        (mon l¬≥ $ ‚Ñí (-W¬π C c) (-W¬π V* #|TODO|# #f) Œì ‚ü™‚Ñã‚ü´ Œ£
             (bgn‚à∑ (list ‚ü¶erase‚üß) ‚ä•œÅ ‚ü¶k‚üß)))]
    [(-Vector/hetero Œ±s l¬≥*)
     (define cs : (Listof -s) (for/list ([Œ± : -‚ü™Œ±‚ü´ Œ±s]) (‚ü™Œ±‚ü´->s Œ±)))
     (for*/union : (‚Ñò -œÇ) ([C (œÉ@ œÉ Œ±)] [Cs (œÉ@/list œÉ Œ±s)])
       (define ‚ü¶chk‚üßs : (Listof -‚ü¶e‚üß)
         (for/list ([C* (in-list Cs)]
                    [c* (in-list cs)]
                    [i (in-naturals)] #:when (index? i))
           (define ‚ü¶inner‚üß
             (mk-mon-‚ü¶e‚üß l¬≥* (‚Ñí-with-mon ‚Ñí ‚Ñì*)
                         (mk-rt-‚ü¶e‚üß (-W¬π C* c*))
                         (mk-rt-‚ü¶e‚üß (-W¬π -‚óè/V (-?@ 'vector-ref s·µ• (-b i))))))
           (mk-mon-‚ü¶e‚üß l¬≥ ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π C c)) ‚ü¶inner‚üß)))
       (match-define (cons ‚ü¶e‚üß ‚ü¶e‚üßs) (append ‚ü¶chk‚üßs (list ‚ü¶rt‚üß)))
       (‚ü¶e‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶e‚üßs ‚ä•œÅ ‚ü¶k‚üß)))]
    [(-Vector/homo Œ±* l¬≥*)
     (define c* (‚ü™Œ±‚ü´->s Œ±*))
     (for*/union : (‚Ñò -œÇ) ([C* (œÉ@ œÉ Œ±*)] [C (œÉ@ œÉ Œ±)])
       (define ‚ü¶chk‚üß
         (let ([‚ü¶inner‚üß
                (mk-mon-‚ü¶e‚üß l¬≥* (‚Ñí-with-mon ‚Ñí ‚Ñì*) (mk-rt-‚ü¶e‚üß (-W¬π C* c*))
                            (mk-rt-‚ü¶e‚üß (-W¬π -‚óè/V (-x (+x!/memo 'inner)))))])
           (mk-mon-‚ü¶e‚üß l¬≥ ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π C c)) ‚ü¶inner‚üß)))
       (‚ü¶chk‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ (list ‚ü¶rt‚üß) ‚ä•œÅ ‚ü¶k‚üß)))]
    [(-‚óè _)
     (define ‚ü¶er‚üß (mk-rt-‚ü¶e‚üß (-blm l+ lo (list 'vector?) (list V·µ•))))
     (app lo $ ‚Ñí -vector?/W (list W-V) Œì ‚ü™‚Ñã‚ü´ Œ£
          (if‚à∑ lo ‚ü¶rt‚üß ‚ü¶er‚üß ‚ä•œÅ ‚ü¶k‚üß))]
    [_ (‚ü¶k‚üß (-blm l+ lo (list 'vector?) (list V·µ•)) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]))

(define (mon-vector/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ _ _) Œ£)
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-W¬π V·µ• v·µ•) W-V)
  (match-define (-W¬π C  c ) W-C)
  (match-define (-Vector/C Œ±‚Ñìs) C)
  ;(printf "mon-vector/c ~a on ~a~n" (show-W¬π W-C) (show-W¬π W-V))
  (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
  (define n (length Œ±s))
  (define N (let ([b (-b n)]) (-W¬π b b)))
  (define cs
    (let ([ss (-app-split c 'vector/c n)])
      (for/list : (Listof -s) ([s ss] [Œ± : -‚ü™Œ±‚ü´ Œ±s])
        (or s (‚ü™Œ±‚ü´->s Œ±)))))
  (define ‚ü¶chk-vct‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß -vector?/W) (list (mk-rt-‚ü¶e‚üß W-V))))
  (define ‚ü¶chk-len‚üß
    (let ([‚ü¶len‚üß (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß -vector-length/W) (list (mk-rt-‚ü¶e‚üß W-V)))])
      (mk-app-‚ü¶e‚üß lo ‚Ñí (mk-rt-‚ü¶e‚üß -=/W) (list (mk-rt-‚ü¶e‚üß N) ‚ü¶len‚üß))))
  (define ‚ü¶blm-vct‚üß (mk-rt-‚ü¶e‚üß (-blm l+ lo (list 'vector?) (list V·µ•))))
  (define ‚ü¶blm-len‚üß (mk-rt-‚ü¶e‚üß (-blm l+ lo (list (format-symbol "length ~a" n)) (list V·µ•))))
  (define ‚ü¶mk‚üß
    (let ([V* (-Vector/hetero Œ±s l¬≥)])
      (mk-rt-‚ü¶e‚üß (-W (list V*) v·µ•))))
  (define ‚ü¶rt-‚óè‚üß (mk-rt-‚ü¶e‚üß (-W¬π -‚óè/V #f)))
  (for*/union : (‚Ñò -œÇ) ([Cs (in-set (œÉ@/list œÉ Œ±s))])
     (define ‚ü¶hv-fld‚üßs : (Listof -‚ü¶e‚üß)
       (for/list ([C* (in-list Cs)]
                  [c* (in-list cs)]
                  [‚Ñì·µ¢ : -‚Ñì (in-list ‚Ñìs)]
                  [i (in-naturals)] #:when (index? i))
         (define W-C* (-W¬π C* c*))
         (define W·µ¢ (let ([b (-b i)]) (-W¬π b b)))
         (define ‚ü¶ref‚üß
           (mk-app-‚ü¶e‚üß lo (‚Ñí-with-mon ‚Ñí ‚Ñì·µ¢)
                       (mk-rt-‚ü¶e‚üß -vector-ref/W)
                       (list (mk-rt-‚ü¶e‚üß W-V)
                             (mk-rt-‚ü¶e‚üß W·µ¢))))
         (define ‚ü¶mon‚üß (mk-mon-‚ü¶e‚üß l¬≥ ‚Ñí (mk-rt-‚ü¶e‚üß W-C*) ‚ü¶ref‚üß))
         (mk-app-‚ü¶e‚üß 'havoc ‚Ñí ‚ü¶rt-‚óè‚üß (list ‚ü¶mon‚üß))))
     (define ‚ü¶erase‚üß
       (match V·µ•
         [(-Vector Œ±s) (mk-erase-‚ü¶e‚üß Œ±s)]
         [(-Vector^ Œ± n) (mk-erase-‚ü¶e‚üß (list Œ±))]
         [_ ‚ü¶void‚üß]))
     (define ‚ü¶wrp‚üß (mk-begin-‚ü¶e‚üß (append ‚ü¶hv-fld‚üßs (list ‚ü¶erase‚üß ‚ü¶mk‚üß))))
     (‚ü¶chk-vct‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£
      (if‚à∑ lo (mk-if-‚ü¶e‚üß lo ‚ü¶chk-len‚üß ‚ü¶wrp‚üß ‚ü¶blm-len‚üß) ‚ü¶blm-vct‚üß ‚ä•œÅ ‚ü¶k‚üß))))

(define (mon-flat/c l¬≥ $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  ;(printf "mon-flat/c: ~a ~a ~a~n" ‚Ñì (show-W¬π W-C) (show-W¬π W-V))
  (match-define (-l¬≥ l+ _ lo) l¬≥)
  (match-define (-W¬π C _) W-C)
  (match-define (-W¬π V v) W-V)
  (case (MŒì‚ä¢V‚ààC (-Œ£-M Œ£) (-Œ£-œÉ Œ£) Œì W-V W-C)
    [(‚úì) (‚ü¶k‚üß (-W (list V) v) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
    [(‚úó) (‚ü¶k‚üß (-blm l+ lo (list C) (list V)) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
    [(?)
     (app lo $ ‚Ñí W-C (list W-V) Œì ‚ü™‚Ñã‚ü´ Œ£
          (if.flat/c‚à∑ (-W (list V) v) (-blm l+ lo (list C) (list V)) ‚ü¶k‚üß))]))

(: flat-chk : -l -$ -‚Ñí -W¬π -W¬π -Œì -‚ü™‚Ñã‚ü´ -Œ£ -‚ü¶k‚üß ‚Üí (‚Ñò -œÇ))
(define (flat-chk l $ ‚Ñí W-C W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
  (match-define (-Œ£ œÉ œÉ‚Çñ _) Œ£)
  (match-define (-W¬π C c) W-C)
  (match-define (-W¬π V v) W-V)
  (match C
    [(-And/C _ (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ))
     (define-values (c‚ÇÅ c‚ÇÇ)
       (match-let ([(list s‚ÇÅ s‚ÇÇ) (-app-split c 'and/c 2)])
         (values (or s‚ÇÅ (‚ü™Œ±‚ü´->s Œ±‚ÇÅ)) (or s‚ÇÇ (‚ü™Œ±‚ü´->s Œ±‚ÇÇ)))))
     (for*/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
       (define W-C‚ÇÅ (-W¬π C‚ÇÅ c‚ÇÅ))
       (define W-C‚ÇÇ (-W¬π C‚ÇÇ c‚ÇÇ))
       (flat-chk l $ (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÅ) W-C‚ÇÅ W-V Œì ‚ü™‚Ñã‚ü´ Œ£
                 (fc-and/c‚à∑ l (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÇ) W-C‚ÇÅ W-C‚ÇÇ ‚ü¶k‚üß)))]
    [(-Or/C _ (cons Œ±‚ÇÅ ‚Ñì‚ÇÅ) (cons Œ±‚ÇÇ ‚Ñì‚ÇÇ))
     (define-values (c‚ÇÅ c‚ÇÇ)
       (match-let ([(list s‚ÇÅ s‚ÇÇ) (-app-split c 'or/c 2)])
         (values (or s‚ÇÅ (‚ü™Œ±‚ü´->s Œ±‚ÇÅ)) (or s‚ÇÇ (‚ü™Œ±‚ü´->s Œ±‚ÇÇ)))))
     (for*/union : (‚Ñò -œÇ) ([C‚ÇÅ (œÉ@ œÉ Œ±‚ÇÅ)] [C‚ÇÇ (œÉ@ œÉ Œ±‚ÇÇ)])
       (define W-C‚ÇÅ (-W¬π C‚ÇÅ c‚ÇÅ))
       (define W-C‚ÇÇ (-W¬π C‚ÇÇ c‚ÇÅ))
       (flat-chk l $ (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÅ) W-C‚ÇÅ W-V Œì ‚ü™‚Ñã‚ü´ Œ£
                 (fc-or/c‚à∑ l (‚Ñí-with-mon ‚Ñí ‚Ñì‚ÇÇ) W-C‚ÇÅ W-C‚ÇÇ W-V ‚ü¶k‚üß)))]
    [(-Not/C (cons Œ± ‚Ñì*))
     (define c*
       (match-let ([(list s) (-app-split c 'not/c 1)])
         (or s (‚ü™Œ±‚ü´->s Œ±))))
     (for/union : (‚Ñò -œÇ) ([C* (œÉ@ œÉ Œ±)])
       (define W-C* (-W¬π C* c*))
       (flat-chk l $ (‚Ñí-with-mon ‚Ñí ‚Ñì*) W-C* W-V Œì ‚ü™‚Ñã‚ü´ Œ£ (fc-not/c‚à∑ l W-C* W-V ‚ü¶k‚üß)))]
    [(-St/C _ s Œ±‚Ñìs)
     (define-values (Œ±s ‚Ñìs) ((inst unzip -‚ü™Œ±‚ü´ -‚Ñì) Œ±‚Ñìs))
     (define cs
       (let ([ss (-struct/c-split c s)])
         (for/list : (Listof -s) ([s ss] [Œ± : -‚ü™Œ±‚ü´ Œ±s])
           (or s (‚ü™Œ±‚ü´->s Œ±)))))
     (for/union : (‚Ñò -œÇ) ([Cs (œÉ@/list œÉ Œ±s)])
       (define ‚ü¶chk-field‚üßs : (Listof -‚ü¶e‚üß)
         (for/list ([C·µ¢ (in-list Cs)]
                    [c·µ¢ (in-list cs)]
                    [‚Ñì·µ¢ : -‚Ñì (in-list ‚Ñìs)]
                    [i (in-naturals)] #:when (index? i))
           (define ac (-st-ac s i))
           (define ‚ü¶ref‚üß·µ¢ (mk-app-‚ü¶e‚üß 'Œõ ‚Ñí (mk-rt-‚ü¶e‚üß (-W¬π ac ac)) (list (mk-rt-‚ü¶e‚üß W-V))))
           (mk-fc-‚ü¶e‚üß l (‚Ñí-with-mon ‚Ñí ‚Ñì·µ¢) (mk-rt-‚ü¶e‚üß (-W¬π C·µ¢ c·µ¢)) ‚ü¶ref‚üß·µ¢)))
       (match ‚ü¶chk-field‚üßs
         ['()
          (define p (-st-p s))
          (define ‚ü¶rt‚üß (mk-rt-‚ü¶e‚üß (-W (list -tt (V+ œÉ V p)) (-?@ 'values -tt v))))
          (app l $ ‚Ñí (-W¬π p p) (list W-V) Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶rt‚üß ‚ü¶ff‚üß ‚ä•œÅ ‚ü¶k‚üß))]
         [(cons ‚ü¶chk-field‚üß ‚ü¶chk-field‚üßs*)
          (‚ü¶chk-field‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (fc-struct/c‚à∑ l ‚Ñí s '() ‚ü¶chk-field‚üßs* ‚ä•œÅ ‚ü¶k‚üß))]))]
    [(-x/C Œ±)
     (match-define (-W¬π C c) W-C)
     (match-define (-W¬π V v) W-V)
     (match-define (-x/C ‚ü™Œ±‚ü´) C)
     (define x (match-let ([(-Œ±.x/c x*) (-‚ü™Œ±‚ü´->-Œ± ‚ü™Œ±‚ü´)])
                 (+x!/memo 'fc x*)))
     (define ùê± (-x x))
     (for/set: : (‚Ñò -œÇ) ([C* (œÉ@ œÉ ‚ü™Œ±‚ü´)])
       (define W-C* (-W¬π C* c))
       (define W-V* (-W¬π V ùê±))
       (define Œ∫ (-Œ∫ ‚ü¶k‚üß Œì ‚ü™‚Ñã‚ü´ #|FIXME hack|# 'fc (list v)))
       (define Œ±‚Çñ (-‚Ñ± x l ‚Ñí W-C* W-V*))
       (œÉ‚Çñ‚äî! œÉ‚Çñ Œ±‚Çñ Œ∫)
       (-œÇ‚Üë Œ±‚Çñ ‚ä§Œì ‚ü™‚Ñã‚ü´))]
    [_
     (define ‚ü¶ap‚üß (mk-app-‚ü¶e‚üß l ‚Ñí (mk-rt-‚ü¶e‚üß W-C) (list (mk-rt-‚ü¶e‚üß W-V))))
     (define ‚ü¶rt‚üß (mk-rt-‚ü¶e‚üß (-W (list -tt (V+ œÉ V C)) (-?@ 'values -tt v))))
     (‚ü¶ap‚üß ‚ä•œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶rt‚üß ‚ü¶ff‚üß ‚ä•œÅ ‚ü¶k‚üß))]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Helper frames
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define/memo (mon-or/c‚à∑ [l¬≥ : -l¬≥]
                        [‚Ñí : -‚Ñí]
                        [W‚Çó : -W¬π]
                        [W·µ£ : -W¬π]
                        [W-V : -W¬π]
                        [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W‚Çó W·µ£ W-V)
    (match-define (-W Vs s) A)
    (match Vs
      [(list (-b #f))
       (mon l¬≥ $ ‚Ñí W·µ£ W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
      [(list (-b #t) V)
       (match-define (-W¬π C‚Çó _) W‚Çó)
       (define v*
         (match s
           [(-@ 'values (list _ v) _) v]
           [#f #f]))
       (‚ü¶k‚üß (-W (list (V+ (-Œ£-œÉ Œ£) V C‚Çó)) v*) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (if.flat/c‚à∑ [W-V : -W] [blm : -blm] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-V)
    (match-define (-W Vs v) A)
    (match Vs
      [(list V)
       (with-Œì+/- ([(Œì‚ÇÅ Œì‚ÇÇ) (Œì+/-V (-Œ£-M Œ£) Œì V v)])
         #:true  (‚ü¶k‚üß W-V $ Œì‚ÇÅ ‚ü™‚Ñã‚ü´ Œ£)
         #:false (‚ü¶k‚üß blm $ Œì‚ÇÇ ‚ü™‚Ñã‚ü´ Œ£))]
      [_
       (match-define (-blm _ lo _ _) blm)
       (‚ü¶k‚üß (-blm lo 'Œõ '(|1 value|) Vs) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

;; Conditional
(define/memo (if‚à∑ [l : -l] [‚ü¶e‚üß‚ÇÅ : -‚ü¶e‚üß] [‚ü¶e‚üß‚ÇÇ : -‚ü¶e‚üß] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (œÅ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list V)
       (with-Œì+/- ([(Œì‚ÇÅ Œì‚ÇÇ) (Œì+/-V (-Œ£-M Œ£) Œì V s)])
         #:true  (‚ü¶e‚üß‚ÇÅ œÅ $ Œì‚ÇÅ ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
         #:false (‚ü¶e‚üß‚ÇÇ œÅ $ Œì‚ÇÇ ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))]
      [_ (‚ü¶k‚üß (-blm l 'Œõ '(1-value) (list (format-symbol "~a values" (length Vs)))) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (and‚à∑ [l : -l] [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match ‚ü¶e‚üßs
    ['() ‚ü¶k‚üß]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
     (if‚à∑ l ‚ü¶e‚üß ‚ü¶ff‚üß œÅ (and‚à∑ l ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß))]))

(define/memo (or‚à∑ [l : -l] [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)] [œÅ : -œÅ] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (match ‚ü¶e‚üßs
    ['() ‚ü¶k‚üß]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*) ; TODO propagate value instead
     (if‚à∑ l ‚ü¶tt‚üß ‚ü¶e‚üß œÅ (or‚à∑ l ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß))]))

(define/memo (neg‚à∑ [l : -l] [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß (if‚à∑ l ‚ü¶ff‚üß ‚ü¶tt‚üß ‚ä•œÅ ‚ü¶k‚üß))

(define/memo (wrap-st‚à∑ [ùíæ : -ùíæ]
                       [‚ü™Œ±‚ü´s : (Listof -‚ü™Œ±‚ü´)]
                       [‚ü™Œ±‚ü´ : -‚ü™Œ±‚ü´]
                       [l¬≥ : -l¬≥]
                       [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (define Œ±s* : (Listof (Option -‚ü™Œ±‚ü´))
    (for/list ([‚ü™Œ±‚ü´ (in-list ‚ü™Œ±‚ü´s)]
               [i (in-naturals)] #:when (index? i))
      (and (struct-mutable? ùíæ i) (cast ‚ü™Œ±‚ü´ -‚ü™Œ±‚ü´))))
  (define V* (-St* ùíæ Œ±s* ‚ü™Œ±‚ü´ l¬≥))
  (define ‚ü™Œ±‚ü´s-casted #|FIXME TR|# (cast ‚ü™Œ±‚ü´s (Rec X (U -V -W -W¬π -œÅ -‚ü™Œ±‚ü´ (Listof X) (‚Ñò X)))))
  (define ‚ü™Œ±‚ü´-casted #|FIXME TR|# (cast ‚ü™Œ±‚ü´ (Rec X (U -V -W -W¬π -œÅ -‚ü™Œ±‚ü´ (Listof X) (‚Ñò X)))))
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (‚ü™Œ±‚ü´s-casted ‚ü™Œ±‚ü´-casted)
    (match-define (-W Vs s) A)
    (match-define (list V) Vs) ; only used internally, should be safe
    (œÉ‚äï! (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´ V)
    (‚ü¶k‚üß (-W (list V*) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£)))

(define/memo (fc-and/c‚à∑ [l : -l]
                        [‚Ñí : -‚Ñí]
                        [W-C‚ÇÅ : -W¬π]
                        [W-C‚ÇÇ : -W¬π]
                        [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-C‚ÇÅ W-C‚ÇÇ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list (-b #f)) (‚ü¶k‚üß -False/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
      [(list (-b #t) V)
       (match-define (-@ 'values (list _ s·µ•) _) s)
       (match-define (-W¬π C‚ÇÅ _) W-C‚ÇÅ)
       (flat-chk l $ ‚Ñí W-C‚ÇÇ (-W¬π (V+ (-Œ£-œÉ Œ£) V C‚ÇÅ) s·µ•) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)])))

(define/memo (fc-or/c‚à∑ [l : -l]
                       [‚Ñí : -‚Ñí]
                       [W-C‚ÇÅ : -W¬π]
                       [W-C‚ÇÇ : -W¬π]
                       [W-V : -W¬π]
                       [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-C‚ÇÅ W-C‚ÇÇ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list (-b #f))
       (flat-chk l $ ‚Ñí W-C‚ÇÇ W-V Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
      [(list (-b #t) V)
       (match-define (-W¬π C‚ÇÅ _) W-C‚ÇÅ)
       (‚ü¶k‚üß (-W (list -tt (V+ (-Œ£-œÉ Œ£) V C‚ÇÅ)) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (fc-not/c‚à∑ [l : -l]
                        [W-C* : -W¬π]
                        [W-V : -W¬π]
                        [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-C* W-V)
    (match-define (-W Vs s) A)
    (match Vs
      [(list (-b #f))
       (match-define (-W¬π V v) W-V)
       (‚ü¶k‚üß (-W (list -tt V) (-?@ 'values -tt v)) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
      [(list (-b #t) V)
       (‚ü¶k‚üß -False/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (fc-struct/c‚à∑ [l : -l]
                           [‚Ñí : -‚Ñí]
                           [ùíæ : -ùíæ]
                           [W-Vs-rev : (Listof -W¬π)]
                           [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)]
                           [œÅ : -œÅ]
                           [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-Vs-rev œÅ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list (-b #f))
       (‚ü¶k‚üß -False/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
      [(list (-b #t) V*)
       (define v*
         (match s
           [(-@ 'values (list _ v) _) v]
           [#f #f]))
       (match ‚ü¶e‚üßs
         ['()
          (define ‚ü¶k‚üß*
            (let ([k (-st-mk ùíæ)])
              (ap‚à∑ (append W-Vs-rev (list (-W¬π k k))) '() ‚ä•œÅ l ‚Ñí
                   (ap‚à∑ (list (-W¬π -tt -tt) (-W¬π 'values 'values)) '() ‚ä•œÅ l ‚Ñí ‚ü¶k‚üß))))
          (‚ü¶k‚üß* (-W (list V*) v*) $ Œì ‚ü™‚Ñã‚ü´ Œ£)]
         [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
          (define W* (-W¬π V* v*))
          (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (fc-struct/c‚à∑ l ‚Ñí ùíæ (cons W* W-Vs-rev) ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß))])])))

(define/memo (fc.v‚à∑ [l : -l]
                    [‚Ñí : -‚Ñí]
                    [‚ü¶v‚üß : -‚ü¶e‚üß]
                    [œÅ : -œÅ]
                    [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (œÅ)
    (match-define (-W Vs s) A)
    (match Vs
      [(list C)
       (‚ü¶v‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (fc.c‚à∑ l ‚Ñí (-W¬π C s) ‚ü¶k‚üß))]
      [_
       (define blm (-blm l 'Œõ '(|1 value|) Vs))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

(define/memo (fc.c‚à∑ [l : -l]
                    [‚Ñí : -‚Ñí]
                    [W-C : -W¬π]
                    [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (with-error-handling (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£) #:roots (W-C)
    (match-define (-W Vs s) A)
    (match Vs
      [(list V)
       (flat-chk l $ ‚Ñí W-C (-W¬π V s) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
      [_
       (define blm (-blm l 'Œõ '(|1 value|) Vs))
       (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Helper expressions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define/memo (mk-mon-‚ü¶e‚üß [l¬≥ : -l¬≥] [‚Ñí : -‚Ñí] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶e‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
  (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (mon.v‚à∑ l¬≥ ‚Ñí (cons ‚ü¶e‚üß œÅ) ‚ü¶k‚üß))))

(define/memo (mk-app-‚ü¶e‚üß [l : -l] [‚Ñí : -‚Ñí] [‚ü¶f‚üß : -‚ü¶e‚üß] [‚ü¶x‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
  (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (‚ü¶f‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ l ‚Ñí ‚ü¶k‚üß))))

(define/memo (mk-rt-‚ü¶e‚üß [A : (U -A -W¬π)]) : -‚ü¶e‚üß
  (match A
    [(-W¬π V v) (mk-rt-‚ü¶e‚üß (-W (list V) v))]
    [(? -A?) (Œª (_ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß) (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£))]))

(define/memo (mk-erase-‚ü¶e‚üß [‚ü™Œ±‚ü´s : (Listof -‚ü™Œ±‚ü´)]) : -‚ü¶e‚üß
  (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (match-define (-Œ£ œÉ _ _) Œ£)
    (for ([‚ü™Œ±‚ü´ : -‚ü™Œ±‚ü´ ‚ü™Œ±‚ü´s])
      (œÉ‚äï! œÉ ‚ü™Œ±‚ü´ -‚óè/V #:mutating? #t))
    (‚ü¶k‚üß -Void/W $ Œì ‚ü™‚Ñã‚ü´ Œ£)))

(define/memo (mk-begin-‚ü¶e‚üß [‚ü¶e‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
  (match ‚ü¶e‚üßs
    ['() ‚ü¶void‚üß]
    [(cons ‚ü¶e‚üß ‚ü¶e‚üßs*)
     (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
       (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶e‚üßs* œÅ ‚ü¶k‚üß)))]))

(define/memo (mk-if-‚ü¶e‚üß [l : -l]
                       [‚ü¶e‚üß‚ÇÅ : -‚ü¶e‚üß]
                       [‚ü¶e‚üß‚ÇÇ : -‚ü¶e‚üß]
                       [‚ü¶e‚üß‚ÇÉ : -‚ü¶e‚üß]) : -‚ü¶e‚üß
  (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (‚ü¶e‚üß‚ÇÅ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶e‚üß‚ÇÇ ‚ü¶e‚üß‚ÇÉ œÅ ‚ü¶k‚üß))))

(define/memo (mk-fc-‚ü¶e‚üß [l : -l]
                       [‚Ñí : -‚Ñí]
                       [‚ü¶c‚üß : -‚ü¶e‚üß]
                       [‚ü¶v‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
  (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
    (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (fc.v‚à∑ l ‚Ñí ‚ü¶v‚üß œÅ ‚ü¶k‚üß))))

(define/memo (make-memoized-‚ü¶k‚üß [‚ü¶k‚üß : -‚ü¶k‚üß]) : -‚ü¶k‚üß
  (define-type Key (List -A -Œì -‚ü™‚Ñã‚ü´ (HashTable -‚ü™Œ±‚ü´ (‚Ñò -V))))
  (let ([m : (HashTable Key (‚Ñò -œÇ)) (make-hash)])
    (define ‚ü¶k‚üß* : -‚ü¶k‚üß
      (Œª (A $ Œì ‚ü™‚Ñã‚ü´ Œ£)
        (match-define (-Œ£ (-œÉ mœÉ _ _) _ _) Œ£)
        (define mœÉ* (hash-copy/spanning* mœÉ
                                         (‚à™ (‚ü¶k‚üß->roots ‚ü¶k‚üß)
                                            (match A
                                              [(-W Vs _) (->‚ü™Œ±‚ü´s Vs)]
                                              [_ ‚àÖeq]))
                                         V->‚ü™Œ±‚ü´s))
        (define k : Key (list A Œì ‚ü™‚Ñã‚ü´ mœÉ*))
        #;(when (hash-has-key? m k)
          (printf "hit-k~n"))
        (hash-ref! m k (Œª () (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£)))))
    (add-‚ü¶k‚üß-roots! ‚ü¶k‚üß* (‚ü¶k‚üß->roots ‚ü¶k‚üß))
    (set-‚ü¶k‚üß->Œ±‚Çñ! ‚ü¶k‚üß* (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß))
    ‚ü¶k‚üß*))
