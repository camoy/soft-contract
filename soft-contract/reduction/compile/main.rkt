#lang typed/racket/base

(provide ‚Üì‚Çö ‚Üì‚Çò ‚Üì‚Çë)

(require "../../utils/main.rkt"
         "../../ast/main.rkt"
         "../../runtime/main.rkt"
         "../../runtime/instrument.rkt"
         "../../proof-relation/widen.rkt"
         "base.rkt"
         "kontinuation.rkt"
         racket/set
         racket/match)

(: ‚Üì‚Çö : (Listof -module) -e ‚Üí -‚ü¶e‚üß!)
;; Compile program
(define (‚Üì‚Çö ms e)
  (define ‚ü¶e‚üß (‚Üì‚Çë '‚Ä† e))
  (match (map ‚Üì‚Çò ms)
    ['() ‚ü¶e‚üß]
    [(cons ‚ü¶m‚üß ‚ü¶m‚üßs)
     (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
       (‚ü¶m‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ `(,@‚ü¶m‚üßs ,‚ü¶e‚üß) œÅ ‚ü¶k‚üß)))]))

(: ‚Üì‚Çò : -module ‚Üí -‚ü¶e‚üß!)
;; Compile module
(define (‚Üì‚Çò m)
  (match-define (-module l ds) m)

  (: ‚Üìpc : -provide-spec ‚Üí -‚ü¶e‚üß!)
  (define (‚Üìpc spec)
    (match-define (-p/c-item x c ‚Ñì) spec)
    (define ‚ü¶c‚üß (‚Üì‚Çë l c))
    (define ùíæ (-ùíæ x l))
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (dec‚à∑ ‚Ñì ùíæ ‚ü¶k‚üß))))
  
  (: ‚Üìd : -module-level-form ‚Üí -‚ü¶e‚üß!)
  (define (‚Üìd d)
    (match d
      [(-define-values xs e)
       (define Œ±s : (Listof -‚ü™Œ±‚ü´)
         (for/list ([x xs]) (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.def (-ùíæ x l)))))
       (define ‚ü¶e‚üß (‚Üì‚Çë l e))
       (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
         (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (def‚à∑ l Œ±s ‚ü¶k‚üß)))]
      [(-provide specs)
       (match (map ‚Üìpc specs)
         ['() ‚ü¶void‚üß]
         [(cons ‚ü¶spec‚üß ‚ü¶spec‚üßs)
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶spec‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶spec‚üßs œÅ ‚ü¶k‚üß)))])]
      [(? -e? e) (‚Üì‚Çë l e)]
      [_
       (log-warning "‚Üìd : ignore ~a~n" (show-module-level-form d))
       ‚ü¶void‚üß]))

  (match (map ‚Üìd ds)
    ['() ‚ü¶void‚üß]
    [(cons ‚ü¶d‚üß ‚ü¶d‚üßs)
     (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
       (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶d‚üßs œÅ ‚ü¶k‚üß)))]))

(: ‚Üì‚Çë : -l -e ‚Üí -‚ü¶e‚üß!)
;; Compile expression to computation
(define (‚Üì‚Çë l e)

  (define (‚Üì [e : -e]) (‚Üì‚Çë l e))

  (remember-e!
   (match e
     [(-Œª xs e*)
      (define ‚ü¶e*‚üß (make-memoized-‚ü¶e‚üß (‚Üì e*)))
      (define fvs (fv e*))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (define s (canonicalize-e Œì e))
        (define œÅ* (m‚Üì œÅ fvs))
        (define Œì*
          (match-let ([(-Œì œÜs as Œ≥s) Œì])
            (define œÜs*
              (for*/set: : (‚Ñò -e) ([e œÜs]
                                   [fv‚ü¶e‚üß (in-value (fv e))]
                                   #:unless (set-empty? fv‚ü¶e‚üß)
                                   #:when (‚äÜ fv‚ü¶e‚üß fvs))
                e))
            (define as* #|TODO|# as)
            (define Œ≥s* #|TODO|# Œ≥s)
            (-Œì œÜs* as* Œ≥s*)))
        (‚ü¶k‚üß (-W (list (-Clo xs ‚ü¶e*‚üß œÅ* Œì*)) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-case-Œª clauses)
      (define ‚ü¶clause‚üßs : (Listof (Pairof (Listof Var-Name) -‚ü¶e‚üß!))
        (for/list ([clause clauses])
          (match-define (cons xs e) clause)
          (cons xs (‚Üì e))))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (define s (canonicalize-e Œì e))
        (‚ü¶k‚üß (-W (list (-Case-Clo ‚ü¶clause‚üßs œÅ Œì)) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(? -prim? p) (‚Üì‚Çö·µ£‚Çò p)]
     [(-‚Ä¢ i)
      (define W (-W -‚óè/Vs e))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-x x) (‚Üì‚Çì l x)]
     [(and ùíæ (-ùíæ x l‚ÇÄ))
      (cond
        ;; same-module referencing returns unwrapped version
        [(equal? l‚ÇÄ l)
         (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.def ùíæ)))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define œÉ (-Œ£-œÉ Œ£))
           (define Vs (œÉ@ œÉ Œ±))
           (define old? (œÉ-old? œÉ Œ±))
           (define s (and old? ùíæ))
           (cond
             [($@ $ s) =>
              (Œª ([V : -V])
                (‚ü¶k‚üß (-W (list V) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
             [else
              (for/union : (‚Ñò -œÇ) ([V Vs])
                (define $* ($+ $ s V))
                (‚ü¶k‚üß (-W (list V) s) $* Œì ‚ü™‚Ñã‚ü´ Œ£))]))]
        ;; cross-module referencing returns wrapped version
        ;; and (HACK) supplies the negative monitoring context
        [else
         (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.wrp ùíæ)))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define œÉ (-Œ£-œÉ Œ£))
           (define Vs (œÉ@ œÉ Œ±))
           (define old? (œÉ-old? œÉ Œ±))
           (define s (and old? ùíæ))
           (for/union : (‚Ñò -œÇ) ([V Vs])
             (‚ü¶k‚üß (-W (list (supply-negative-party l V)) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£)))])]
     [(-@ f xs ‚Ñì)
      (define ‚ü¶f‚üß  (‚Üì f))
      (define ‚ü¶x‚üßs (map ‚Üì xs))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶f‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ l (-‚Ñí ‚àÖ ‚Ñì) ‚ü¶k‚üß)))]
     [(-if e‚ÇÄ e‚ÇÅ e‚ÇÇ)
      (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
      (define ‚ü¶e‚ÇÅ‚üß (‚Üì e‚ÇÅ))
      (define ‚ü¶e‚ÇÇ‚üß (‚Üì e‚ÇÇ))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶e‚ÇÅ‚üß ‚ü¶e‚ÇÇ‚üß œÅ ‚ü¶k‚üß)))]
     [(-wcm k v b) (error '‚Üì‚Çë "TODO: wcm")]
     [(-begin es)
      (match (map ‚Üì es)
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß -Void/W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶e‚üß ‚ü¶e‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (rst-Œì‚à∑ Œì (bgn‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß))))])]
     [(-begin0 e‚ÇÄ es)
      (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
      (define ‚ü¶e‚üßs (map ‚Üì es))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn0.v‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))]
     [(-quote q)
      (cond
        [(Base? q)
         (define b (-b q))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß (-W (list b) b) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [else (error '‚Üì‚Çë "TODO: (quote ~a)" q)])]
     [(-let-values bnds e*)
      (define ‚ü¶bnd‚üßs
        (for/list : (Listof (Pairof (Listof Var-Name) -‚ü¶e‚üß!)) ([bnd bnds])
          (match-define (cons xs e‚Çì‚Çõ) bnd)
          (cons xs (‚Üì e‚Çì‚Çõ))))
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match ‚ü¶bnd‚üßs
        ['() ‚ü¶e*‚üß]
        [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß‚Çì‚Çõ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (let‚à∑ l xs ‚ü¶bnd‚üßs* '() ‚ü¶e*‚üß œÅ
                                  ‚ü¶k‚üß
                                  #;(rst‚à∑ (dom œÅ #:eq? #t) ‚ü¶k‚üß))))])]
     [(-letrec-values bnds e*)
      (define ‚ü¶bnd‚üßs
        (for/list : (Listof (Pairof (Listof Var-Name) -‚ü¶e‚üß!)) ([bnd bnds])
          (match-define (cons xs e‚Çì‚Çõ) bnd)
          (cons xs (‚Üì e‚Çì‚Çõ))))
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match ‚ü¶bnd‚üßs
        ['() ‚ü¶e*‚üß]
        [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (match-define (-Œ£ œÉ _ _) Œ£)
           (define œÅ* ; with side effect widening store
             (for*/fold ([œÅ  : -œÅ  œÅ])
                        ([‚ü¶bnd‚üß ‚ü¶bnd‚üßs]
                         [xs (in-value (car ‚ü¶bnd‚üß))]
                         [x xs])
               (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´)))
               (œÉ‚äï! œÉ Œ± 'undefined)
               (œÅ+ œÅ x Œ±)))
           (‚ü¶e‚üß‚Çì‚Çõ œÅ* $ Œì ‚ü™‚Ñã‚ü´ Œ£
            (letrec‚à∑ l xs ‚ü¶bnd‚üßs* ‚ü¶e*‚üß œÅ*
                     ‚ü¶k‚üß
                     #;(rst‚à∑ (dom œÅ #:eq? #t) ‚ü¶k‚üß))))])]
     [(-set! x e*)
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match x
        [(-x x)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ (œÅ@ œÅ x) ‚ü¶k‚üß)))]
        [(? -ùíæ? ùíæ)
         (define Œ± (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.def ùíæ)))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ Œ± ‚ü¶k‚üß)))])]
     [(-error msg)
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß (-blm l 'Œõ '() (list (-b msg))) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-amb es)
      (define ‚ü¶e‚üßs (set-map es ‚Üì))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (for/union : (‚Ñò -œÇ) ([‚ü¶e‚üß ‚ü¶e‚üßs])
           (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)))]
     [(-Œº/c x c)
      (define ‚ü¶c‚üß (‚Üì c))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (Œº/c‚à∑ l x ‚ü¶k‚üß)))]
     [(--> cs d ‚Ñì)
      (define ‚ü¶d‚üß  (‚Üì d))
      (match (map ‚Üì cs)
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.rng‚à∑ l '() ‚Ñì ‚ü¶k‚üß)))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.dom‚à∑ l '() ‚ü¶c‚üßs ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))])]
     [(-->i cs (and mk-d (-Œª xs d)) ‚Ñì)
      (define ‚ü¶d‚üß (‚Üì d))
      (match (map ‚Üì cs)
        ['()
         (define c (-?->i '() mk-d ‚Ñì))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (match-define (-Œ£ œÉ _ _) Œ£)
           (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
           (define-values (G g) (mk-=>i! œÉ Œì ‚ü™‚Ñã‚ü´ '() Mk-D mk-d ‚Ñì))
           (‚ü¶k‚üß (-W (list G) g) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->i‚à∑ '() ‚ü¶c‚üßs œÅ Mk-D mk-d ‚Ñì ‚ü¶k‚üß)))])]
     [(-case-> clauses ‚Ñì)
      (define ‚ü¶clause‚üßs : (Listof (Listof -‚ü¶e‚üß!))
        (for/list ([clause clauses])
          (match-define (cons cs d) clause)
          `(,@(map ‚Üì cs) ,(‚Üì d))))
      (match ‚ü¶clause‚üßs
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß (-W (list (-Case-> '() ‚Ñì)) e) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons (cons ‚ü¶c‚üß ‚ü¶c‚üßs) ‚ü¶clause‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (case->‚à∑ l ‚Ñì '() '() ‚ü¶c‚üßs ‚ü¶clause‚üßs* œÅ ‚ü¶k‚üß)))])]
     [(-x/c x)
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß (-W (list (-x/C (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x/c x)))) e) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-struct/c si cs ‚Ñì)
      (match (map ‚Üì cs)
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß (-W (list (-St/C #t si '())) e) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (struct/c‚à∑ ‚Ñì si '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß)))])]
     [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))])
   e))

(define (flattened? [œÅ : -œÅ])
  (define immutable-vars
    (for/seteq: : (‚Ñò Var-Name) ([(x Œ±) œÅ] #:unless (assignable? x))
      x))
  (or (<= (set-count immutable-vars) 1)
      (match-let ([(cons ‚ü™‚Ñã‚ü´‚ÇÄ ‚ü™‚Ñã‚ü´s)
                   (for/list : (Listof -‚ü™‚Ñã‚ü´) ([x (in-set immutable-vars)])
                     (match-define (-Œ±.x _ ‚ü™‚Ñã‚ü´‚Çì) (œÅ@ œÅ x))
                     ‚ü™‚Ñã‚ü´‚Çì)])
        (for/and : Boolean ([‚ü™‚Ñã‚ü´·µ¢ ‚ü™‚Ñã‚ü´s]) (equal? ‚ü™‚Ñã‚ü´‚ÇÄ ‚ü™‚Ñã‚ü´·µ¢)))))

(: flatten! : -œÉ -‚ü™‚Ñã‚ü´ -œÅ ‚Üí -œÅ)
(define (flatten! œÉ ‚ü™‚Ñã‚ü´ œÅ)
  ;; with side effect widening store
  (for/hash : -œÅ ([(x Œ±) œÅ])
    (define Œ±*
      (cond [(assignable? x) (cast Œ± -‚ü™Œ±‚ü´)]
            [else ; with side effect widening store
             (define Œ±* (-Œ±->-‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´)))
             (for ([V (œÉ@ œÉ (cast Œ± -‚ü™Œ±‚ü´))])
               (œÉ‚äï! œÉ Œ±* V))
             Œ±*]))
    (values x Œ±*)))

(: make-memoized-‚ü¶e‚üß : -‚ü¶e‚üß! ‚Üí -‚ü¶e‚üß!)
(define (make-memoized-‚ü¶e‚üß ‚ü¶e‚üß)
  (define-type Key (List -‚ü™‚Ñã‚ü´ -‚ü¶k‚üß! -Œì (HashTable -‚ü™Œ±‚ü´ (‚Ñò -V))))
  (let ([m : (HashTable Key (‚Ñò -œÇ)) (make-hash)])
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (match-define (-Œ£ (-œÉ mœÉ _ _) _ _) Œ£)
      (define Œ±s (span* mœÉ (œÅ->‚ü™Œ±‚ü´s œÅ) V->‚ü™Œ±‚ü´s))
      (define k : Key (list ‚ü™‚Ñã‚ü´ ‚ü¶k‚üß Œì (m‚Üì mœÉ Œ±s)))
      #;(when (hash-has-key? m k)
        (printf "hit-e~n"))
      (hash-ref! m k (Œª () (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))))))
