#lang typed/racket/base

(provide ‚Üì‚Çö ‚Üì‚Çò ‚Üì‚Çë)

(require "../../utils/main.rkt"
         "../../ast/main.rkt"
         "../../runtime/main.rkt"
         "../../proof-relation/widen.rkt"
         "base.rkt"
         "kontinuation.rkt"
         racket/set
         racket/match)

(: ‚Üì‚Çö : (Listof -module) -e ‚Üí -‚ü¶e‚üß)
;; Compile program
(define (‚Üì‚Çö ms e)
  (define ‚ü¶e‚üß (‚Üì‚Çë '‚Ä† e))
  (match (map ‚Üì‚Çò ms)
    ['() ‚ü¶e‚üß]
    [(cons ‚ü¶m‚üß ‚ü¶m‚üßs)
     (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
       (‚ü¶m‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ `(,@‚ü¶m‚üßs ,‚ü¶e‚üß) œÅ ‚ü¶k‚üß)))]))

(: ‚Üì‚Çò : -module ‚Üí -‚ü¶e‚üß)
;; Compile module
(define (‚Üì‚Çò m)
  (match-define (-module l ds) m)

  (: ‚Üìpc : -provide-spec ‚Üí -‚ü¶e‚üß)
  (define (‚Üìpc spec)
    (match-define (-p/c-item x c ‚Ñì) spec)
    (define ‚ü¶c‚üß (‚Üì‚Çë l c))
    (define ùíæ (-ùíæ x l))
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (dec‚à∑ ‚Ñì ùíæ ‚ü¶k‚üß))))
  
  (: ‚Üìd : -module-level-form ‚Üí -‚ü¶e‚üß)
  (define (‚Üìd d)
    (match d
      [(-define-values xs e)
       (define Œ±s : (Listof ‚ü™Œ±‚ü´) (for/list ([x xs]) (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l))))
       (define ‚ü¶e‚üß (‚Üì‚Çë l e))
       (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
         (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (def‚à∑ l Œ±s ‚ü¶k‚üß)))]
      [(-provide specs)
       (match (map ‚Üìpc specs)
         ['() ‚ü¶void‚üß]
         [(cons ‚ü¶spec‚üß ‚ü¶spec‚üßs)
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶spec‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶spec‚üßs œÅ ‚ü¶k‚üß)))])]
      [(? -e? e) (‚Üì‚Çë l e)]
      [_
       (log-warning "‚Üìd : ignore ~a~n" (show-module-level-form d))
       ‚ü¶void‚üß]))

  (match (map ‚Üìd ds)
    ['() ‚ü¶void‚üß]
    [(cons ‚ü¶d‚üß ‚ü¶d‚üßs)
     (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
       (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶d‚üßs œÅ ‚ü¶k‚üß)))]))

(: ‚Üì‚Çë : -l -e ‚Üí -‚ü¶e‚üß)
;; Compile expression to computation
(define (‚Üì‚Çë l e)

  (define (‚Üì [e : -e]) (‚Üì‚Çë l e))

  (remember-e!
   (match e
     [(-Œª xs e*)
      (define ‚ü¶e*‚üß (make-memoized-‚ü¶e‚üß (‚Üì e*)))
      (define fvs (fv e*))
      #;(printf "Warning: no longer canonicalize Œª-term~n")
      (define t (-Œª xs e*))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (define œÅ* (m‚Üì œÅ fvs))
        (define Œì*
          (match-let ([(-Œì œÜs as) Œì])
            (define œÜs*
              (for*/set: : (‚Ñò -t) ([œÜ œÜs]
                                   [fv‚ü¶œÜ‚üß (in-value (fv‚Çú œÜ))]
                                   #:unless (set-empty? fv‚ü¶œÜ‚üß)
                                   #:when (‚äÜ fv‚ü¶œÜ‚üß fvs))
                œÜ))
            (define as* #|TODO|# as)
            (-Œì œÜs* as*)))
        (‚ü¶k‚üß (-W (list (-Clo xs ‚ü¶e*‚üß œÅ* Œì*)) t) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-case-Œª clauses)
      (define ‚ü¶clause‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
        (for/list ([clause clauses])
          (match-define (cons xs e) clause)
          (cons xs (‚Üì e))))
      (define t (-case-Œª clauses))
      #;(printf "Warning: no longer canonicalize Œª-term~n")
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß (-W (list (-Case-Clo ‚ü¶clause‚üßs œÅ Œì)) t) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(? -prim? p) (‚Üì‚Çö·µ£‚Çò p)]
     [(-‚Ä¢)
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß -‚óè.W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-x x) (‚Üì‚Çì l x)]
     [(and ùíæ (-ùíæ x l‚ÇÄ))

      (define-values (Œ± modify-V)
        (cond
          ;; same-module referencing returns unwrapped version
          [(equal? l‚ÇÄ l)
           (values ùíæ (inst values -V))]
          ;; cross-module referencing returns wrapped version
          ;; when the caller is symbolic (HACK)
          ;; and supplies the negative monitoring context (HACK)
          [(symbol? l)
           (values (-Œ±.wrp ùíæ) (Œª ([V : -V]) (with-negative-party l V)))]
          ;; cross-mldule referencing returns abstracted wrapped version
          ;; when the caller is concrete (HACK)
          ;; and supplies the negative monitoring context (HACK)
          [else
           (values (-Œ±.wrp ùíæ) (Œª ([V : -V])
                                (with-positive-party 'dummy+
                                  (with-negative-party l
                                    (approximate-under-contract V)))))]))
      
      (define ‚ü™Œ±‚ü´ (-Œ±->‚ü™Œ±‚ü´ Œ±))

      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (define s (and (not (mutated? Œ£ ‚ü™Œ±‚ü´)) ùíæ))
        (cond
          [($@ $ (or s ùíæ)) =>
           (Œª ([V : -V])
             (‚ü¶k‚üß (-W (list V) s) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
          [else
           (unless (hash-has-key? (-œÉ-m (-Œ£-œÉ Œ£)) ‚ü™Œ±‚ü´‚Çí‚Çö) ; HACK
             (œÉ‚äïV! Œ£ ‚ü™Œ±‚ü´‚Çí‚Çö -‚óè.V))
           (for/union : (‚Ñò -œÇ) ([V (in-set (œÉ@ Œ£ ‚ü™Œ±‚ü´))])
             (define V* (modify-V V))
             (define $* ($+ $ (or s ùíæ) V*))
             (‚ü¶k‚üß (-W (list V*) s) $* Œì ‚ü™‚Ñã‚ü´ Œ£))]))]
     
     [(-@ f xs ‚Ñì)
      (define ‚ü¶f‚üß  (‚Üì f))
      (define ‚ü¶x‚üßs (map ‚Üì xs))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶f‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ (-‚Ñí ‚àÖeq ‚Ñì) ‚ü¶k‚üß)))]
     [(-if e‚ÇÄ e‚ÇÅ e‚ÇÇ)
      (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
      (define ‚ü¶e‚ÇÅ‚üß (‚Üì e‚ÇÅ))
      (define ‚ü¶e‚ÇÇ‚üß (‚Üì e‚ÇÇ))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶e‚ÇÅ‚üß ‚ü¶e‚ÇÇ‚üß œÅ ‚ü¶k‚üß)))]
     [(-wcm k v b) (error '‚Üì‚Çë "TODO: wcm")]
     [(-begin es)
      (match (map ‚Üì es)
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß -void.W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶e‚üß ‚ü¶e‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (make-memoized-‚ü¶k‚üß (bgn‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß))))])]
     [(-begin0 e‚ÇÄ es)
      (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
      (define ‚ü¶e‚üßs (map ‚Üì es))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn0.v‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))]
     [(-quote q)
      (cond
        [(Base? q)
         (define W (let ([b (-b q)]) (-W (list b) b)))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [else (error '‚Üì‚Çë "TODO: (quote ~a)" q)])]
     [(-let-values bnds e* ‚Ñì)
      (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
        (for/list ([bnd bnds])
          (match-define (cons xs e‚Çì‚Çõ) bnd)
          (cons xs (‚Üì e‚Çì‚Çõ))))
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match ‚ü¶bnd‚üßs
        ['() ‚ü¶e*‚üß]
        [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß‚Çì‚Çõ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (let‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* '() ‚ü¶e*‚üß œÅ ‚ü¶k‚üß)))])]
     [(-letrec-values bnds e* ‚Ñì)
      (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
        (for/list ([bnd bnds])
          (match-define (cons xs e‚Çì‚Çõ) bnd)
          (cons xs (‚Üì e‚Çì‚Çõ))))
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match ‚ü¶bnd‚üßs
        ['() ‚ü¶e*‚üß]
        [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define œÅ* ; with side effect widening store
             (for*/fold ([œÅ  : -œÅ  œÅ])
                        ([‚ü¶bnd‚üß ‚ü¶bnd‚üßs]
                         [xs (in-value (car ‚ü¶bnd‚üß))]
                         [x xs])
               (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´ #|TODO|# ‚àÖ)))
               (œÉ‚äïV! Œ£ Œ± -undefined)
               (œÅ+ œÅ x Œ±)))
           (‚ü¶e‚üß‚Çì‚Çõ œÅ* $ Œì ‚ü™‚Ñã‚ü´ Œ£
            (letrec‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* ‚ü¶e*‚üß œÅ* ‚ü¶k‚üß)))])]
     [(-set! x e*)
      (define ‚ü¶e*‚üß (‚Üì e*))
      (match x
        [(-x x)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ (œÅ@ œÅ x) ‚ü¶k‚üß)))]
        [(? -ùíæ? ùíæ)
         (define Œ± (-Œ±->‚ü™Œ±‚ü´ ùíæ))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ Œ± ‚ü¶k‚üß)))])]
     [(-error msg ‚Ñì)
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß (-blm (‚Ñì-src ‚Ñì) 'Œõ '() (list (-b msg)) ‚Ñì) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-Œº/c x c)
      (define ‚ü¶c‚üß (‚Üì c))
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (Œº/c‚à∑ x ‚ü¶k‚üß)))]
     [(--> cs d ‚Ñì)
      (define ‚ü¶d‚üß  (‚Üì d))
      (match (-var-map ‚Üì cs)
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.rng‚à∑ '() #f ‚Ñì ‚ü¶k‚üß)))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs #f ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
        [(-var ‚ü¶c‚üßs ‚ü¶c‚üß·µ£)
         (match ‚ü¶c‚üßs
           ['()
            (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
              (‚ü¶c‚üß·µ£ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.rst‚à∑ '() ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
           [(cons ‚ü¶c‚üß ‚ü¶c‚üßs*)
            (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
              (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs* ‚ü¶c‚üß·µ£ ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))])])]
     [(-->i cs (and mk-d (-Œª xs d)) ‚Ñì)
      (define ‚ü¶d‚üß (‚Üì d))
      (match (map ‚Üì cs)
        ['()
         (define c (-?->i '() mk-d))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
           (define-values (G g) (mk-=>i! Œ£ Œì ‚ü™‚Ñã‚ü´ '() Mk-D mk-d ‚Ñì))
           (‚ü¶k‚üß (-W (list G) g) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->i‚à∑ '() ‚ü¶c‚üßs œÅ Mk-D mk-d ‚Ñì ‚ü¶k‚üß)))])]
     [(-case-> clauses ‚Ñì)
      (define ‚ü¶clause‚üßs : (Listof (Listof -‚ü¶e‚üß))
        (for/list ([clause clauses])
          (match-define (cons cs d) clause)
          `(,@(map ‚Üì cs) ,(‚Üì d))))
      (match ‚ü¶clause‚üßs
        ['()
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß (-W (list (-Case-> '() ‚Ñì)) #f #;e) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons (cons ‚ü¶c‚üß ‚ü¶c‚üßs) ‚ü¶clause‚üßs*)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (case->‚à∑ ‚Ñì '() '() ‚ü¶c‚üßs ‚ü¶clause‚üßs* œÅ ‚ü¶k‚üß)))])]
     [(-x/c x)
      (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
        (‚ü¶k‚üß (-W (list (-x/C (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x/c x)))) #f #;e) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
     [(-struct/c ùíæ cs ‚Ñì)
      (match (map ‚Üì cs)
        ['()
         (define W (-W (list (-St/C #t ùíæ '())) (-t.@ (-st/c.mk ùíæ) '())))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶k‚üß W $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
        [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (struct/c‚à∑ ‚Ñì ùíæ '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß)))])]
     [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))])
   e))

(: make-memoized-‚ü¶e‚üß : -‚ü¶e‚üß ‚Üí -‚ü¶e‚üß)
(define (make-memoized-‚ü¶e‚üß ‚ü¶e‚üß)
  (define-type Key (List -‚ü™‚Ñã‚ü´ -œÅ -Œì))
  (define-type Rec (List (HashTable ‚ü™Œ±‚ü´ (‚Ñò -V)) (‚Ñò -œÇ)))
  (let ([m : (HashTable Key Rec) (make-hash)])
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (match-define (-Œ£ (-œÉ mœÉ _ _) _ _) Œ£)
      (define key : Key (list ‚ü™‚Ñã‚ü´ œÅ Œì))

      (: recompute! : ‚Üí (‚Ñò -œÇ))
      (define (recompute!)
        (define ans (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))
        (hash-set! m key (list mœÉ ans))
        ans)

      ;; Cache result based on rest of components
      (cond [(hash-ref m key #f) =>
             (Œª ([rec : Rec])
               (match-define (list mœÉ‚ÇÄ œÇs‚ÇÄ) rec)
               (cond [(map-equal?/spanning-root mœÉ‚ÇÄ mœÉ (œÅ->‚ü™Œ±‚ü´s œÅ) V->‚ü™Œ±‚ü´s)
                      #;(printf "hit-e: ~a~n" (show-‚ü¶e‚üß ‚ü¶e‚üß))
                      œÇs‚ÇÄ]
                     [else (recompute!)]))]
            [else (recompute!)]))))
