#lang typed/racket/base

(provide debugging@)

(require racket/set
         racket/match
         racket/list
         typed/racket/unit
         set-extras
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../proof-relation/signatures.rkt"
         "../primitives/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit debugging@
  (import static-info^ kont^ havoc^ mon^ compile^ local-prover^ widening^ verifier^
          for-gc^ env^ sto^ ast-pretty-print^ pretty-print^ pc^ instr^ summ^)
  (export debugging^)

  (: print-$-stat : (Sequenceof -$) ‚Üí Void)
  (define (print-$-stat $s)
    (define m : (HashTable -loc (‚Ñò -?t)) (make-hash))
    (for ([$ : -$ $s])
      (for ([(l t) (in-hash $)])
        (hash-update! m l (Œª ([ts : (‚Ñò -?t)]) (set-add ts t)) mk-‚àÖ)))
    (for ([l (in-hash-keys m)])
      (for ([$ $s] #:unless (hash-has-key? $ l))
        (hash-update! m l (Œª ([ts : (‚Ñò -?t)]) (set-add ts #f)))))
    (for ([(l ts) (in-hash m)] #:when (> (set-count ts) 1))
      (printf "  + ~a -> ~a~n" (show-loc l) (set-count ts))
      (for ([t (in-set ts)])
        (printf "    * ~a~n" (show-t t)))))

  (: print-$-grid : (Sequenceof -$) ‚Üí Void)
  (define (print-$-grid $s)
    (define m : (HashTable -loc (‚Ñò -?t)) (make-hash))
    (for ([$ : -$ $s])
      (for ([(l t) (in-hash $)])
        (hash-update! m l (Œª ([ts : (‚Ñò -?t)]) (set-add ts t)) mk-‚àÖ)))
    (for ([l (in-hash-keys m)])
      (for ([$ $s] #:unless (hash-has-key? $ l))
        (hash-update! m l (Œª ([ts : (‚Ñò -?t)]) (set-add ts #f)))))
    
    (define all-locs
      (for/list : (Listof -loc) ([(l ts) (in-hash m)] #:when (> (set-count ts) 1))
        l))
    (for ([l (in-list all-locs)])
      (printf "~a\t" (show-loc l)))
    (printf "~n")
    (for ([$ $s])
      (for ([l (in-list all-locs)])
        (printf "~a\t" (show-t (hash-ref $ l #f))))
      (printf "~n")))

  (: print-Œ£-stat : -Œ£ ‚Üí Void)
  (define (print-Œ£-stat Œ£)
    (define œÉ (-Œ£-œÉ Œ£))
    (define œÉ‚Çñ (-Œ£-œÉ‚Çñ Œ£))
    (printf "|œÉ| = ~a, max-rng(œÉ) = ~a, |œÉ‚Çñ| = ~a, max-rng(œÉ‚Çñ) = ~a~n"
            (hash-count œÉ) (count-max œÉ) (hash-count œÉ‚Çñ) (count-max œÉ‚Çñ)))

  (: print-large-sets ([-Œ£] [#:val-min Index #:kont-min Index] . ->* . Void))
  (define (print-large-sets Œ£ #:val-min [val-min 4] #:kont-min [kont-min 4])
    (define œÉ (-Œ£-œÉ Œ£))
    (define œÉ‚Çñ (-Œ£-œÉ‚Çñ Œ£))
    (define ‚Ñ¨-stats : (HashTable (List -formals -‚ü¶e‚üß -œÅ) (‚Ñò -$)) (make-hash))
    (define ‚Ñã-stats : (HashTable -‚ü™‚Ñã‚ü´ (‚Ñò -$)) (make-hash))
    (for ([Œ±‚Çñ (in-hash-keys œÉ‚Çñ)])
      (match Œ±‚Çñ
        [(-‚Ñ¨ $ _ xs e œÅ _)
         (hash-update! ‚Ñ¨-stats (list xs e œÅ)
                       (Œª ([$s : (‚Ñò -$)])
                         (set-add $s $))
                       mk-‚àÖ)]
        [(-‚Ñãùí± $ ‚ü™‚Ñã‚ü´)
         (hash-update! ‚Ñã-stats ‚ü™‚Ñã‚ü´
                       (Œª ([$s : (‚Ñò -$)])
                         (set-add $s $))
                       mk-‚àÖ)]
        [_ (void)]))
    (printf "‚Ñ¨-stats: (~a --> ~a) ~n" (hash-count ‚Ñ¨-stats) (length (filter -‚Ñ¨? (hash-keys œÉ‚Çñ))))
    
    (for ([(k vs) (in-hash ‚Ñ¨-stats)] #:when (> (set-count vs) 4))
      (match-define (list xs e œÅ) k)
      (printf "- ~a ~a --> ~a~n" (show-formals xs) (show-œÅ œÅ) (set-count vs))
      (print-$-grid #;show-$-stats vs))
    (printf "‚Ñã-stats: (~a --> ~a) ~n" (hash-count ‚Ñã-stats) (length (filter -‚Ñãùí±? (hash-keys œÉ‚Çñ))))
    (for ([(k vs) (in-hash ‚Ñã-stats)] #:when (> (set-count vs) 4))
      (printf "- ~a --> ~a~n" (show-‚ü™‚Ñã‚ü´ k) (set-count vs))
      (print-$-grid #;show-$-stats vs))
    
    (printf "Value store:~n")
    (for ([(Œ± Vs) (in-hash œÉ)]
          #:when (>= (set-count Vs) val-min)
          #:unless (equal? Œ± ‚ü™Œ±‚ü´‚Çï·µ•)
          )
      (printf "- ~a ‚Ü¶ ~a~n" (show-‚ü™Œ±‚ü´ Œ±) (set-map Vs show-V)))
    (printf "Addresses:~n")
    (for ([Œ± (in-hash-keys œÉ)])
      (printf "~a ‚â° ~a~n" (show-‚ü™Œ±‚ü´ Œ±) (‚ü™Œ±‚ü´->-Œ± Œ±)))
    
    (printf "Stack store:~n")
    (for ([(Œ±‚Çñ ks) (in-hash œÉ‚Çñ)]
          #:when (>= (set-count ks) kont-min)
          #:unless (-‚Ñãùí±? Œ±‚Çñ)
          )
      (printf "- ~a ‚Ü¶ ~a~n" (show-Œ±‚Çñ Œ±‚Çñ) (set-count ks))
      #;(let ([comp : (Mutable-HashTable (Pairof Any Integer) (‚Ñò Any)) (make-hash)])
        (define-set explodes : Any)
        (for ([k (in-set ks)])
          (match-define (-Œ∫.rt ‚ü¶k‚üß _ _ _ _) k)
          (match-let* ([(list _ ‚ü¶k‚üß) (find-memo-key ‚ü¶k‚üß 'invalidate-$‚à∑)]
                       [(list _ ‚ü¶k‚üß) (find-memo-key ‚ü¶k‚üß 'restore-$‚à∑)]
                       [(list _ ‚ü¶k‚üß) (find-memo-key ‚ü¶k‚üß 'restore-ctx‚à∑)]
                       [(list _ _ _ _ ‚ü¶k‚üß) (find-memo-key ‚ü¶k‚üß 'ap‚à∑)]
                       [(list Ws es _ ‚Ñì‚ÇÄ _) (find-memo-key ‚ü¶k‚üß 'ap‚à∑)]
                       [(list tag (list elems ...)) (find-memo-key ‚ü¶k‚üß)])
            (explodes-add! (list Ws es ‚Ñì‚ÇÄ))
            (for ([e (in-list elems)] [i (in-naturals)])
              (hash-update! comp (cons tag i)
                            (Œª ([s : (‚Ñò Any)]) (set-add s e))
                            mk-‚àÖ))))
        (for ([(k vs) (in-hash comp)])
          (printf "    - ~a : ~a~n" k (set-count vs)))
        (begin
          (printf "explodes:~n")
          (for ([e (in-set explodes)])
            (match-define (list Ws es ‚Ñì‚ÇÄ) e)
            (printf "- ~a [ ] ~a at ~a~n"
                    (map show-W¬π (reverse (cast Ws (Listof -W¬π))))
                    (map show-‚ü¶e‚üß (cast es (Listof -‚ü¶e‚üß)))
                    (show-‚Ñì (cast ‚Ñì‚ÇÄ ‚Ñì)))))
        )
      )))
