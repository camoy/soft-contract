#lang typed/racket/base

(provide reduction@)

(require racket/set
         racket/match
         racket/list
         typed/racket/unit
         set-extras
         "../utils/main.rkt"
         "../ast/main.rkt"
         "../runtime/signatures.rkt"
         "../proof-relation/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"

         "compile.rkt"
         "app.rkt"
         "mon.rkt"
         "kont.rkt"
         "havoc.rkt"
         "memoize.rkt"
         )

(define-unit pre-reduction@
  (import kont^ havoc^ mon^ local-prover^ widening^ verifier^
          for-gc^ env^ sto^ pretty-print^ pc^ instr^)
  (export reduction^)

  (define-type Ctx (List -œÉ -œÉ‚Çñ))

  (define (run [‚ü¶e‚üß : -‚ü¶e‚üß]) : (Values (‚Ñò -ŒìA) -Œ£)
    (define seen : (HashTable -œÇ Ctx) (make-hash))
    (define Œ±‚Çñ‚ÇÄ : -Œ±‚Çñ (-‚Ñ¨ '() ‚ü¶e‚üß ‚ä•œÅ ‚ä§Œì ‚ü™‚Ñã‚ü´‚àÖ))
    (define Œ£ (-Œ£ ‚ä•œÉ (hash-set ‚ä•œÉ‚Çñ Œ±‚Çñ‚ÇÄ ‚àÖ)))
    (define root‚ÇÄ ; all addresses to top-level definitions are conservatively active
      (for/fold ([root‚ÇÄ : (‚Ñò ‚ü™Œ±‚ü´) ‚àÖeq]) ([ùíæ (top-levels)])
        (set-add (set-add root‚ÇÄ (-Œ±->‚ü™Œ±‚ü´ ùíæ)) (-Œ±->‚ü™Œ±‚ü´ (-Œ±.wrp ùíæ)))))

    (define iter : Natural 0)
    (define ?max-steps (max-steps))
    (define iter-maxed? : (Natural ‚Üí Boolean)
      (if ?max-steps (Œª ([i : Natural]) (> i ?max-steps)) (Œª _ #f)))

    (let loop! ([front : (‚Ñò -œÇ) {set (-œÇ‚Üë Œ±‚Çñ‚ÇÄ)}])
      (unless (or (set-empty? front) (iter-maxed? iter))
        (define-values (œÇ‚Üës œÇ‚Üìs) (set-partition-to-lists -œÇ‚Üë? front))

        (begin
          (when (debug-iter?)
            (printf "* ~a: ~a~n" iter (set-count front)))

          (when (debug-trace?)

            (begin ; interactive
              (define œÇs-list
                (append œÇ‚Üës œÇ‚Üìs))
              (define œÇ->i
                (for/hash : (HashTable -œÇ Integer) ([(œÇ i) (in-indexed œÇs-list)])
                  (values œÇ i))))
            
            (printf " * evs:~n")
            (for ([œÇ œÇ‚Üës])
              (printf "  -[~a]. ~a~n" (hash-ref œÇ->i œÇ) (show-œÇ œÇ)))
            (printf " * rts:~n")
            (for ([œÇ œÇ‚Üìs])
              (printf "  -[~a]. ~a~n" (hash-ref œÇ->i œÇ) (show-œÇ œÇ)))

            #;(begin ; interactive
                (printf "~nchoose [0-~a|ok|done]: " (sub1 (hash-count œÇ->i)))
                (match (read)
                  [(? exact-integer? i) (set! front (set (list-ref œÇs-list i)))]
                  ['done (error "DONE")]
                  [_ (void)]))
            (printf "~n"))
          
          (set! iter (+ 1 iter)))

        (define next
          (match-let ([(-Œ£ œÉ mœÉ‚Çñ) Œ£])

            (define vsn : Ctx (list œÉ mœÉ‚Çñ))

            (: œÇ-seen? : -œÇ ‚Üí Boolean)
            (define (œÇ-seen? œÇ)
              (cond
                [(hash-ref seen œÇ #f) =>
                 (Œª ([ctx‚ÇÄ : Ctx])
                   (match-define (list œÉ‚ÇÄ mœÉ‚Çñ‚ÇÄ) ctx‚ÇÄ)
                   (define Œ±‚Çñ
                     (match œÇ
                       [(-œÇ‚Üë Œ±‚Çñ    ) Œ±‚Çñ]
                       [(-œÇ‚Üì Œ±‚Çñ _ _) Œ±‚Çñ]))
                   (define Œ±‚Çñs {set Œ±‚Çñ})
                   (define (Œ∫->Œ±‚Çñs [Œ∫ : -Œ∫])
                     {set (‚ü¶k‚üß->Œ±‚Çñ (-Œ∫-cont Œ∫))})
                   (and (map-equal?/spanning-root mœÉ‚Çñ‚ÇÄ mœÉ‚Çñ Œ±‚Çñs Œ∫->Œ±‚Çñs)
                        (let ([‚ü™Œ±‚ü´s (œÇ->‚ü™Œ±‚ü´s œÇ mœÉ‚Çñ‚ÇÄ)])
                          (œÉ-equal?/spanning-root œÉ‚ÇÄ œÉ ‚ü™Œ±‚ü´s))))]
                [else #f]))

            (define next-from-œÇ‚Üës
              (let ([œÇ‚Üës* ; filter out seen states
                       (for*/list : (Listof -œÇ‚Üë) ([œÇ œÇ‚Üës] #:unless (œÇ-seen? œÇ))
                         (hash-set! seen œÇ vsn)
                         (assert œÇ -œÇ‚Üë?))])
                (‚Üù‚Üë! œÇ‚Üës* Œ£)))
            (define next-from-œÇ‚Üìs
              (let ([œÇ‚Üìs* ; filter out seen states
                       (for*/list : (Listof -œÇ‚Üì) ([œÇ œÇ‚Üìs] #:unless (œÇ-seen? œÇ))
                         (hash-set! seen œÇ vsn)
                         (assert œÇ -œÇ‚Üì?))])
                (‚Üù‚Üì! œÇ‚Üìs* Œ£)))
            (‚à™ next-from-œÇ‚Üës next-from-œÇ‚Üìs)))
        (loop! next)))

    (match-let ([(-Œ£ œÉ œÉ‚Çñ) Œ£])
      (when (debug-iter?)
        (printf "|œÉ| = ~a, |œÉ‚Çñ| = ~a~n" (hash-count œÉ) (hash-count œÉ‚Çñ)))
      (when (and ?max-steps (> iter ?max-steps))
        (printf "Execution capped at ~a steps~n" ?max-steps))
      (values #|FIXME!!!|# ‚àÖ Œ£)))

  ;; Compute the root set for value addresses of this state
  (define (œÇ->‚ü™Œ±‚ü´s [œÇ : -œÇ] [œÉ‚Çñ : -œÉ‚Çñ]) : (‚Ñò ‚ü™Œ±‚ü´)
    (match œÇ
      [(-œÇ‚Üë Œ±‚Çñ)
       (define Œ±s‚ÇÄ
         (match Œ±‚Çñ
           [(-‚Ñ¨ _ _ œÅ _ _) (->‚ü™Œ±‚ü´s œÅ)]
           [(-‚Ñ≥ _ _ _ C ‚ü™Œ±‚ü´ _ _) (set-add (->‚ü™Œ±‚ü´s C) ‚ü™Œ±‚ü´)]
           [(-‚Ñ± _ _ _ C ‚ü™Œ±‚ü´ _ _) (set-add (->‚ü™Œ±‚ü´s C) ‚ü™Œ±‚ü´)]
           [(-‚Ñãùí± _) {seteq ‚ü™Œ±‚ü´‚Çï·µ•}]))
       (‚à™ Œ±s‚ÇÄ (Œ±‚Çñ->‚ü™Œ±‚ü´s Œ±‚Çñ œÉ‚Çñ))]
      [(-œÇ‚Üì Œ±‚Çñ _ A) ; if it's a "return" state, don't care about block content (e.g. `œÅ`)
       (define Œ±s‚ÇÄ (if (-W? A) (->‚ü™Œ±‚ü´s A) ‚àÖeq))
       (‚à™ Œ±s‚ÇÄ (Œ±‚Çñ->‚ü™Œ±‚ü´s Œ±‚Çñ œÉ‚Çñ))]))

  ;; Quick-step on "push" state
  (define (‚Üù‚Üë! [œÇs : (Listof -œÇ‚Üë)] [Œ£ : -Œ£]) : (‚Ñò -œÇ)
    (for/union : (‚Ñò -œÇ) ([œÇ œÇs])
               (match-define (-œÇ‚Üë Œ±‚Çñ ) œÇ)
               (define ‚ü¶k‚üß (rt Œ±‚Çñ))
               (match Œ±‚Çñ
                 [(-‚Ñ¨ _ ‚ü¶e‚üß œÅ Œì ‚ü™‚Ñã‚ü´) (‚ü¶e‚üß œÅ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)]
                 [(-‚Ñ≥ x l¬≥ ‚Ñí C ‚ü™Œ±‚ü´ Œì ‚ü™‚Ñã‚ü´)
                  (define W-C (-W¬π C #f))
                  (define ùê± (-x x))
                  (for/union : (‚Ñò -œÇ) ([V (in-set (œÉ@ (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´))])
                             (mon l¬≥ ‚Ñí W-C (-W¬π V ùê±) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))]
                 [(-‚Ñ± x l  ‚Ñí C ‚ü™Œ±‚ü´ Œì ‚ü™‚Ñã‚ü´)
                  (define W-C (-W¬π C #f))
                  (define ùê± (-x x))
                  (for/union : (‚Ñò -œÇ) ([V (in-set (œÉ@ (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´))])
                     (flat-chk l ‚Ñí W-C (-W¬π V ùê±) Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß))]
                 [(-‚Ñãùí± ‚ü™‚Ñã‚ü´) (havoc ‚ü™‚Ñã‚ü´ Œ£)]
                 [_ (error '‚Üù‚Üë "~a" Œ±‚Çñ)])))

  ;; Quick-step on "pop" state
  (define (‚Üù‚Üì! [œÇs : (Listof -œÇ‚Üì)] [Œ£ : -Œ£]) : (‚Ñò -œÇ)
    (match-define (-Œ£ œÉ œÉ‚Çñ) Œ£)
    
    (for/union : (‚Ñò -œÇ) ([œÇ œÇs])
               (match-define (-œÇ‚Üì Œ±‚Çñ Œì‚Çë‚Çë A) œÇ)
               (define fml : (Option -formals)
                 (match Œ±‚Çñ
                   [(-‚Ñ¨ xs _ _ _ _) xs]
                   [(-‚Ñ≥ x _ _ _ _ _ _) (list x)]
                   [(-‚Ñ± x _ _ _ _ _ _) (list x)]
                   [(? -‚Ñãùí±?) #f]))

               (for/union : (‚Ñò -œÇ) ([Œ∫ (in-set (œÉ‚Çñ@ œÉ‚Çñ Œ±‚Çñ))])
                          (match-define (-Œ∫ ‚ü¶k‚üß Œì‚Çë·µ£ ‚ü™‚Ñã‚ü´‚Çë·µ£ t‚Çìs) Œ∫)
                          (define looped? (equal? Œ±‚Çñ (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß)))
                          (match A
                            [(-W Vs s‚Çê)
                             (define s‚Çê*
                               (and s‚Çê
                                    (match* (Œ±‚Çñ t‚Çìs)
                                      [((? -‚Ñ≥?) (list t)) t]
                                      [((-‚Ñ¨ (list x) _ _ _ _) (list t)) ; inline some
                                       #:when (and (not looped?)
                                                   (match? s‚Çê (-t.@ (? -o? o) (list (-x (== x))))))
                                       (match-define (-t.@ o _) s‚Çê)
                                       (?t@ o t)]
                                      [((-‚Ñ¨ (? list? xs) _ _ _ _) ts)
                                       #:when (and (-x? s‚Çê)
                                                   (memq (-x-_0 s‚Çê) xs)
                                                   (not (and looped? (>= (length xs) 3))))
                                       (for/or : -?t ([z xs] [t ts] #:when (eq? z (-x-_0 s‚Çê)))
                                         t)]
                                      [(_ _) #|FIXME|# #f])))
                             (‚ü¶k‚üß (-W Vs s‚Çê*) Œì‚Çë·µ£ ‚ü™‚Ñã‚ü´‚Çë·µ£ Œ£)]
                            [(? -blm? blm)
                             (match-define (-blm l+ lo _ _ _) blm)
                             (cond [(symbol? l+) ‚àÖ]
                                   [else (‚ü¶k‚üß blm Œì‚Çë·µ£ ‚ü™‚Ñã‚ü´‚Çë·µ£ Œ£)])]))))
  )

(define-compound-unit/infer reduction@
  (import prims^ proof-system^ local-prover^ widening^ verifier^
          for-gc^ val^ env^ sto^ pc^ instr^ pretty-print^)
  (export reduction^ app^ mon^ kont^ compile^ havoc^)
  (link memoize@ kont@ compile@ havoc@ mon@ app@ pre-reduction@))
