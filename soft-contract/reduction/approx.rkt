#lang typed/racket/base

(provide approx@)

(require racket/match
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         typed/racket/unit
         racket/splicing
         unreachable
         set-extras
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt")

(define-unit approx@
  (import evl^ val^
          prover^)
  (export approx^)
  (init-depend val^)

  (: collapse-R^-1 : (U Œ£ Œ£·µ•) R^ ‚Üí (Values T^ Œ¶^))
  (define (collapse-R^-1 Œ£ R^)
    (define ?retain (retainable-symbols (map/set R-_0 R^) 1))
    (match (?retain 0)
      [(? values S) (values S (set-union-map R-_1 R^))]
      [_ (for/fold ([T* : V^ ‚àÖ] [Œ¶^* : Œ¶^ ‚àÖ]) ([R·µ¢ (in-set R^)])
           (match-define (R (list T·µ¢) Œ¶^·µ¢) R·µ¢)
           (values (‚à™ T* (T->V Œ£ Œ¶^·µ¢ T·µ¢)) (‚à™ Œ¶^* Œ¶^·µ¢)))])) 

  (: collapse-value-lists : (U Œ£ Œ£·µ•) R^ Natural ‚Üí R)
  (define (collapse-value-lists Œ£ Rs n)
    (define ?retain (retainable-symbols (map/set R-_0 Rs) n))
    (define W-vec : (Vectorof T^) (make-vector n ‚àÖ))
    (define-set Œ¶s : Œ¶)
    (for ([R·µ¢ (in-set Rs)])
      (match-define (R W·µ¢ Œ¶^·µ¢) R·µ¢)
      (set! Œ¶s ((iter-‚äî Œ¶^‚äî) Œ¶s Œ¶^·µ¢))
      (for ([T‚Çñ (in-list W·µ¢)] [k (in-range n)])
        (define T‚Çñ*
          (match (?retain k)
            [(? values S) S]
            [else (‚à™ (assert (vector-ref W-vec k) set?) (T->V Œ£ Œ¶^·µ¢ T‚Çñ))]))
        (vector-set! W-vec k T‚Çñ*)))
    (R (vector->list W-vec) Œ¶s))

  (: R‚äï : (U Œ£ Œ£·µ•) R R ‚Üí R)
  (define (R‚äï Œ£ R‚ÇÅ R‚ÇÇ)
    (: W‚äï : Œ¶^ W W ‚Üí W)
    (define (W‚äï Œ¶^ W‚ÇÅ W‚ÇÇ)
      (for/list ([T‚ÇÅ (in-list W‚ÇÅ)] [T‚ÇÇ (in-list W‚ÇÇ)])
        (cond [(or (set? T‚ÇÅ) (set? T‚ÇÇ) (not (equal? T‚ÇÅ T‚ÇÇ)))
               (‚à™ (T->V Œ£ Œ¶^ T‚ÇÅ) (T->V Œ£ Œ¶^ T‚ÇÇ))]
              [else T‚ÇÅ])))
    
    (match-define (R W‚ÇÅ Œ¶^‚ÇÅ) R‚ÇÅ)
    (match-define (R W‚ÇÇ Œ¶^‚ÇÇ) R‚ÇÇ)
    (define Œ¶^* ((iter-‚äî Œ¶^‚äî) Œ¶^‚ÇÅ Œ¶^‚ÇÇ))
    (R (W‚äï Œ¶^* W‚ÇÅ W‚ÇÇ) Œ¶^*))

  (: retainable-symbols ([W^] [Integer] . ->* . (Integer ‚Üí (Option S))))
  (define (retainable-symbols Ws [n (apply max ((inst set-map W Index) Ws length))])
    (define vals : (Vectorof (Option S)) (make-vector n 'untouched))
    (for ([W (in-set Ws)])
      (for ([T·µ¢ (in-list W)] [i (in-naturals)])
        (cond [(set? T·µ¢) (vector-set! vals i #f)]
              [else (match (vector-ref vals i)
                      ['untouched (vector-set! vals i T·µ¢)]
                      [(== T·µ¢) (void)]
                      [_ (vector-set! vals i #f)])])))
    (Œª (i) (vector-ref vals i)))

  (: ‚äî·µ• : Œ£·µ• Œ± (U V V^) ‚Üí Œ£·µ•)
  (define (‚äî·µ• Œ£ Œ± V)
    (hash-update Œ£ Œ± (Œª ([V‚ÇÄ : V^])
                       (if (set? V) ((iter-‚äî V^‚äî) V‚ÇÄ V) (V^‚äî V‚ÇÄ V)))
                 mk-‚àÖ))

  (: ‚äî‚Çñ : Œ£‚Çñ Œ±‚Çñ Œû:co ‚Üí Œ£‚Çñ)
  (define (‚äî‚Çñ Œ£ Œ± Œû)
    (hash-update Œ£ Œ± (Œª ([Œûs : (‚Ñò Œû:co)]) (Œû^‚äî Œûs Œû)) mk-‚àÖ))

  (: ‚äî‚Çê : Œ£‚Çê Œû:co (U R R^) ‚Üí Œ£‚Çê)
  (define (‚äî‚Çê Œ£ Œû R)
    (hash-update Œ£ Œû (Œª ([R‚ÇÄ : R^])
                       (if (set? R) ((iter-‚äî R^‚äî) R‚ÇÄ R) (R^‚äî R‚ÇÄ R))
                       ) mk-‚àÖ))

  (: ‚äî·µ•! : Œ£ Œ± (U V V^) ‚Üí Void)
  (define (‚äî·µ•! Œ£ Œ± V) (set-Œ£-val! Œ£ (‚äî·µ• (Œ£-val Œ£) Œ± V)))

  (: ‚äîT! : Œ£ Œ¶^ Œ± (U T T^) ‚Üí Void)
  (define (‚äîT! Œ£ Œ¶^ Œ± T) (‚äî·µ•! Œ£ Œ± (T->V Œ£ Œ¶^ T)))

  (: ‚äîT*! : Œ£ Œ¶^ (Listof Œ±) (Listof T^) ‚Üí Void)
  (define (‚äîT*! Œ£ Œ¶^ Œ±s Ts)
    (for ([Œ± (in-list Œ±s)] [T (in-list Ts)])
      (‚äîT! Œ£ Œ¶^ Œ± T)))

  (: ‚äî·µ•*! : Œ£ (Listof Œ±) (Listof V^) ‚Üí Void)
  (define (‚äî·µ•*! Œ£ Œ±s Vs)
    (for ([Œ± (in-list Œ±s)] [V (in-list Vs)])
      (‚äî·µ•! Œ£ Œ± V)))

  (: ‚äî‚Çê! : Œ£ Œû:co (U R R^) ‚Üí Void)
  (define (‚äî‚Çê! Œ£ Œû R) (set-Œ£-evl! Œ£ (‚äî‚Çê (Œ£-evl Œ£) Œû R)))
  
  (: ‚äî‚Çñ! : Œ£ Œ±‚Çñ Œû:co ‚Üí Void)
  (define (‚äî‚Çñ! Œ£ Œ±‚Çñ Œû) (set-Œ£-kon! Œ£ (‚äî‚Çñ (Œ£-kon Œ£) Œ±‚Çñ Œû))) 

  ;; FIXME: could have avoided this if all fields on the stack are allocated
  (define cmp-Œû : (?Cmp Œû:co)
    (match-lambda**
     [((Œû:co K‚ÇÅ m H) (Œû:co K‚ÇÇ m H)) (cmp-K K‚ÇÅ K‚ÇÇ)]
     [(_ _) #f]))

  (define cmp-K : (?Cmp K)
    (match-lambda**
     [((K Fs‚ÇÅ Œ±) (K Fs‚ÇÇ Œ±)) (fold-cmp cmp-F Fs‚ÇÅ Fs‚ÇÇ)]
     [(_ _) #f]))

  (define cmp-F : (?Cmp F)
    (match-lambda** 
     [((F:Ap Ts‚ÇÅ Es‚ÇÅ ‚Ñì) (F:Ap Ts‚ÇÇ Es‚ÇÇ ‚Ñì))
      (Ord:* (fold-cmp cmp-T^ Ts‚ÇÅ Ts‚ÇÇ) (fold-cmp cmp-EŒ° Es‚ÇÅ Es‚ÇÇ))]
     [((F:Let ‚Ñì xs bnds bnds‚ÇÅ E Œ°) (F:Let ‚Ñì xs bnds bnds‚ÇÇ E Œ°))
      (fold-cmp cmp-bnd bnds‚ÇÅ bnds‚ÇÇ)]
     [((F:Bgn0:E W^‚ÇÅ Es Œ°) (F:Bgn0:E W^‚ÇÇ Es Œ°))
      (cmp-sets W^‚ÇÅ W^‚ÇÇ)]
     [((F:Mon:C Ctx x‚ÇÅ) (F:Mon:C Ctx x‚ÇÇ))
      (cmp-EŒ° x‚ÇÅ x‚ÇÇ)]
     [((F:Mon:V Ctx x‚ÇÅ) (F:Mon:V Ctx x‚ÇÇ))
      (cmp-EŒ° x‚ÇÅ x‚ÇÇ)]
     [((F:Mon* Ctx W‚ÇÅ W‚ÇÇ ‚Ñìs W‚ÇÉ) (F:Mon* Ctx W‚ÇÑ W‚ÇÖ ‚Ñìs W‚ÇÜ))
      (Ord:* (cmp-W W‚ÇÅ W‚ÇÑ)
             (cmp-W W‚ÇÇ W‚ÇÖ)
             (cmp-W W‚ÇÉ W‚ÇÜ))]
     [((F:==>:Dom W‚ÇÅ Es ?E E Œ° ‚Ñì) (F:==>:Dom W‚ÇÇ Es ?E E Œ° ‚Ñì))
      (cmp-W W‚ÇÅ W‚ÇÇ)]
     [((F:==>:Rst W‚ÇÅ E Œ° ‚Ñì) (F:==>:Rst W‚ÇÇ E Œ° ‚Ñì))
      (cmp-W W‚ÇÅ W‚ÇÇ)]
     [((F:==>:Rng W‚ÇÅ T‚ÇÅ ‚Ñì) (F:==>:Rng W‚ÇÇ T‚ÇÇ ‚Ñì))
      (Ord:* (cmp-W W‚ÇÅ W‚ÇÇ)
             (or (and (equal? T‚ÇÅ T‚ÇÇ) '=)
                 (and T‚ÇÅ T‚ÇÇ (cmp-T^ T‚ÇÅ T‚ÇÇ))))]
     [((F:St/C ‚Ñì ùíæ W‚ÇÅ Es Œ°) (F:St/C ‚Ñì ùíæ W‚ÇÇ Es Œ°))
      (cmp-W W‚ÇÅ W‚ÇÇ)]
     [((F:Mon-Or/C Ctx T‚ÇÅ T‚ÇÇ T‚ÇÉ) (F:Mon-Or/C Ctx T‚ÇÑ T‚ÇÖ T‚ÇÜ))
      (Ord:* (cmp-T^ T‚ÇÅ T‚ÇÑ)
             (cmp-T^ T‚ÇÇ T‚ÇÖ)
             (cmp-T^ T‚ÇÉ T‚ÇÜ))]
     [((F:If:Flat/C T‚ÇÅ blms‚ÇÅ) (F:If:Flat/C T‚ÇÇ blms‚ÇÇ))
      (Ord:* (cmp-T^ T‚ÇÅ T‚ÇÇ) (cmp-sets blms‚ÇÅ blms‚ÇÇ))]
     [((F:Fc-Or/C Œ± Œ±‚Ñì T‚ÇÅ) (F:Fc-Or/C Œ± Œ±‚Ñì T‚ÇÇ))
      (cmp-T^ T‚ÇÅ T‚ÇÇ)]
     [((F:Fc-Not/C T‚ÇÅ) (F:Fc-Not/C T‚ÇÇ))
      (cmp-T^ T‚ÇÅ T‚ÇÇ)]
     [((F:Fc-Struct/C ‚Ñì ùíæ W‚ÇÅ Es) (F:Fc-Struct/C ‚Ñì ùíæ W‚ÇÇ Es))
      (cmp-W W‚ÇÅ W‚ÇÇ)]
     [((F:Fc:C ‚Ñì T‚ÇÅ) (F:Fc:C ‚Ñì T‚ÇÇ))
      (cmp-T^ T‚ÇÅ T‚ÇÇ)]
     [(F‚ÇÅ F‚ÇÇ) (and (equal? F‚ÇÅ F‚ÇÇ) '=)]))

  (define cmp-bnd : (?Cmp (Pairof Symbol T^))
    (match-lambda**
     [((cons x T‚ÇÅ) (cons x T‚ÇÇ)) (cmp-T^ T‚ÇÅ T‚ÇÇ)]
     [(_ _) #f]))

  (define cmp-EŒ° : (?Cmp (U EŒ° T^))
    (match-lambda**
     [((? T^? T‚ÇÅ) (? T^? T‚ÇÇ)) (cmp-T^ T‚ÇÅ T‚ÇÇ)]
     [(x x) '=]
     [(_ _) #f]))

  (: V^‚äî : V^ V ‚Üí V^)
  (define (V^‚äî Vs V·µ¢) (set-add Vs V·µ¢))

  (define (cmp-W [W‚ÇÅ : W] [W‚ÇÇ : W]) (fold-cmp cmp-T^ W‚ÇÅ W‚ÇÇ))
  (define cmp-T^ (cmp-T^/$ #f #f))
  (define Œû^‚äî (compact-with ((inst join-by-max Œû:co) cmp-Œû))) 
  )

