#lang typed/racket/base

(require (only-in racket/function curry)
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         racket/match
         racket/list
         typed/racket/unit
         racket/splicing
         syntax/parse/define
         set-extras
         unreachable
         bnf
         typed-racket-hacks
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(provide step@)

(define-unit step@
  (import val^ env^ sto^ evl^
          alloc^ app^ mon^ compile^
          proof-system^)
  (export step^)

  (: inj : (U -prog ‚ü¶E‚üß) ‚Üí (Values Œû Œ£))
  (define (inj x)
    (define ‚ü¶E‚üß (->‚ü¶E‚üß x))
    (define Œ±‚Çñ‚ÇÄ (Œ±‚Çñ ‚ü¶E‚üß ‚ä•Œ°))
    (define Œ£‚ÇÄ (Œ£ ‚ä•Œ£·µ• ‚ä•Œ£‚Çñ ‚ä•Œ£‚Çê))
    (values (‚ü¶E‚üß ‚ä•Œ° {set ‚àÖ} (Œû:co '() Œ±‚Çñ‚ÇÄ H‚ÇÄ) Œ£‚ÇÄ) Œ£‚ÇÄ))

  (: ‚Üù* : (U -prog ‚ü¶E‚üß) ‚Üí (Values (‚Ñò Blm) Œ£))
  (define (‚Üù* p)
    (define-values (Œû‚ÇÄ Œ£) (inj p))
    ;; TODO real versioning
    (Ver . ‚âú . (List Œ£·µ• Œ£‚Çñ Œ£‚Çê))
    (define seen : (Mutable-HashTable Œû:co Ver) (make-hash))
    (define (ver) : Ver (list (Œ£-val Œ£) (Œ£-kon Œ£) (Œ£-evl Œ£)))
    (define-set blms : Blm)
    
    (define db? (db:iter?))
    (define iter : Natural 0)
    (define cut? : (Natural ‚Üí Boolean)
      (match (db:max-steps)
        [(? values n) (Œª (i) (> i n))]
        [_ (Œª _ #f)]))

    (let loop! ([front : (‚Ñò Œû) {set Œû‚ÇÄ}])
      (set! iter (+ 1 iter))
      (when db?
        (printf "~a: ~a~n" iter (set-count front)))
      (unless (or (set-empty? front) (cut? iter))
        (loop!
         (for*/set : (‚Ñò Œû) ([Œû‚ÇÄ (in-set front)]
                            [Œû‚ÇÅ (in-set (‚Üù Œû‚ÇÄ Œ£))]
                            #:unless (and (Blm? Œû‚ÇÅ) (blms-add! Œû‚ÇÅ))
                            [v‚ÇÅ (in-value (ver))]
                            #:unless (equal? v‚ÇÅ (hash-ref seen Œû‚ÇÅ #f)))
           (hash-set! seen Œû‚ÇÅ v‚ÇÅ)
           Œû‚ÇÅ))))
    (values blms Œ£)) 

  (: ->‚ü¶E‚üß : (U -prog ‚ü¶E‚üß) ‚Üí ‚ü¶E‚üß)
  (define (->‚ü¶E‚üß x) (if (-prog? x) (‚Üì‚Çö x) x))

  (: ‚Üù : Œû Œ£ ‚Üí (‚Ñò Œû))
  (define (‚Üù Œû Œ£)
    (match Œû
      [(Œû:co K Œ± H)
       (define R^‚ÇÄ (Œ£‚Çê@ Œ£ Œû))
       (cond
         [(set-empty? R^‚ÇÄ) ‚àÖ]
         [(match K
            [(cons F K*) (co R^‚ÇÄ F (Œû:co K* Œ± H) Œ£)]
            [_ (for/set : (‚Ñò Œû:co) ([Œû‚ÇÅ (in-set (Œ£‚Çñ@ Œ£ Œ±))])
                 (ret! R^‚ÇÄ Œû‚ÇÅ Œ£))])])]
      [_ ‚àÖ])) 

  (: co : R^ F Œû:co Œ£ ‚Üí (‚Ñò Œû))
  (define (co R^‚ÇÄ F Œû Œ£)
    (match F
      [(F:Ap Vs ‚ü¶E‚üßs Œ° ‚Ñì)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V^ Œ¶^)
           (define Vs* (cons V^ Vs))
           (match ‚ü¶E‚üßs
             [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*) {set (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Ap Vs* ‚ü¶E‚üßs* Œ° ‚Ñì) Œû) Œ£)}]
             [_ (match-define (cons fun args) (reverse Vs*))
                (app fun args ‚Ñì Œ¶^ Œû Œ£)])))]
      [(F:Set! Œ±)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (V^ Œ¶^)
           (‚äî·µ•! Œ£ Œ± V^)
           {set (ret! (V->R -void Œ¶^) Œû Œ£)}))]
      [(F:Let ‚Ñì xs binds bounds ‚ü¶body‚üß Œ°)
       (with-guarded-arity/collapse R^‚ÇÄ (length xs) ‚Ñì
         (Œª (W Œ¶^)
           (define bounds*
             (for/fold ([acc : (Assoc Symbol V^) bounds])
                       ([x (in-list xs)] [V (in-list W)])
               (cons (cons x V) acc)))
           (match binds
             [(cons (cons xs* ‚ü¶E‚üß) binds*)
              {set (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Let ‚Ñì xs* binds* bounds* ‚ü¶body‚üß Œ°) Œû) Œ£)}]
             ['()
              (define-values (xs Vs) (unzip bounds*))
              (define Œ°* (bind-args! Œ° xs Vs Œ¶^ H‚ÇÄ Œ£))
              {set (‚ü¶body‚üß Œ°* Œ¶^ Œû Œ£)}])))]
      [(F:Letrec ‚Ñì xs binds ‚ü¶body‚üß Œ°)
       (with-guarded-arity/collapse R^‚ÇÄ (length xs) ‚Ñì
         (Œª (W Œ¶^)
           (‚äî·µ•*! Œ£ (Œ°@* Œ° xs) W)
           {set (match binds
                  [(cons (cons xs* ‚ü¶E‚üß) binds*)
                   (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Letrec ‚Ñì xs* binds* ‚ü¶body‚üß Œ°) Œû) Œ£)]
                  [_ (‚ü¶body‚üß Œ° Œ¶^ Œû Œ£)])}))]
      [(F:If l ‚ü¶E‚üß‚ÇÅ ‚ü¶E‚üß‚ÇÇ Œ°)
       (with-guarded-arity R^‚ÇÄ 1 +‚Ñì‚ÇÄ ; TODO
         (Œª (R^‚ÇÄ)
           (define-values (Œ¶^‚ÇÅ Œ¶^‚ÇÇ) (plausible-splits Œ£ R^‚ÇÄ))
           (‚à™ (if (set-empty? Œ¶^‚ÇÅ) ‚àÖ {set (‚ü¶E‚üß‚ÇÅ Œ° Œ¶^‚ÇÅ Œû Œ£)})
              (if (set-empty? Œ¶^‚ÇÇ) ‚àÖ {set (‚ü¶E‚üß‚ÇÇ Œ° Œ¶^‚ÇÇ Œû Œ£)}))))]
      [(F:Bgn (cons ‚ü¶E‚üß ‚ü¶E‚üßs) Œ°)
       (define-values (_ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (define Œû* (if (pair? ‚ü¶E‚üßs) (K+ (F:Bgn ‚ü¶E‚üßs Œ°) Œû) Œû))
       {set (‚ü¶E‚üß Œ° Œ¶^ Œû* Œ£)}]
      [(F:Bgn0:V (cons ‚ü¶E‚üß ‚ü¶E‚üßs) Œ°)
       (define-values (W^ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (define Œû* (if (pair? ‚ü¶E‚üßs) (K+ (F:Bgn0:E W^ ‚ü¶E‚üßs Œ°) Œû) Œû))
       {set (‚ü¶E‚üß Œ° Œ¶^ Œû* Œ£)}]
      [(F:Bgn0:E W^ ‚ü¶E‚üßs Œ°)
       (define-values (_ Œ¶^) (collapse-R^ R^‚ÇÄ))
       {set (match ‚ü¶E‚üßs
              [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*) (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Bgn0:E W^ ‚ü¶E‚üßs* Œ°) Œû) Œ£)]
              [_ (ret! (R W^ Œ¶^) Œû Œ£)])}]
      [(F:Mon:C Ctx Ctc)
       (with-guarded-single-arity/collapse R^‚ÇÄ (Ctx-loc Ctx)
         (Œª (Val Œ¶^)
           (match Ctc
             [(cons ‚ü¶C‚üß Œ°) {set (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:Mon:V Ctx Val) Œû) Œ£)}]
             [(? set?) (mon Ctc Val Ctx Œ¶^ Œû Œ£)])))]
      [(F:Mon:V Ctx Val)
       (with-guarded-single-arity/collapse R^‚ÇÄ (Ctx-loc Ctx)
         (Œª (Ctc Œ¶^)
           (match Val
             [(cons ‚ü¶V‚üß Œ°) {set (‚ü¶V‚üß Œ° Œ¶^ (K+ (F:Mon:C Ctx Ctc) Œû) Œ£)}]
             [(? set?) (mon Ctc Val Ctx Œ¶^ Œû Œ£)])))]
      [(F:Mon*:C Ctx rngs)
       (case rngs
         [(any) {set (ret! R^‚ÇÄ Œû Œ£)}]
         [else
          (with-guarded-arity/collapse R^‚ÇÄ (length rngs) (Ctx-loc Ctx)
            (Œª (W Œ¶^)
              (define-values (Œ≤s ‚Ñìs) (unzip-by Œ±‚Ñì-_0 Œ±‚Ñì-_1 rngs))
              (match* ((Œ£·µ•@* Œ£ Œ≤s) W ‚Ñìs)
                [((cons C‚ÇÅ Cs) (cons V‚ÇÅ Vs) (cons ‚Ñì‚ÇÅ ‚Ñìs))
                 (define Œû* (K+ (F:Mon* Ctx Cs Vs ‚Ñìs '()) Œû))
                 (mon C‚ÇÅ V‚ÇÅ (Ctx-with-‚Ñì Ctx ‚Ñì‚ÇÅ) Œ¶^ Œû* Œ£)]
                [('() '() '())
                 {set (ret! (W->R '() Œ¶^) Œû Œ£)}])))])]
      [(F:Mon* Ctx Cs Vs ‚Ñìs Res-rev)
       (define-values (W^ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (match-define (list V^) (collapse-value-lists W^ 1))
       (define Res-rev* (cons V^ Res-rev))
       (match* (Cs Vs ‚Ñìs)
         [((cons C Cs) (cons V Vs) (cons ‚Ñì ‚Ñìs))
          (define Œû* (K+ (F:Mon* Ctx Cs Vs ‚Ñìs Res-rev*) Œû))
          (mon C V (Ctx-with-‚Ñì Ctx ‚Ñì) Œ¶^ Œû* Œ£)]
         [('() '() '())
          {set (ret! (W->R (reverse Res-rev*) Œ¶^) Œû Œ£)}])]
      [(F:Œú/C x)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (C-body Œ¶^)
           (define Œ± (mk-Œ± (-Œ±:x/c x H‚ÇÄ)))
           (‚äî·µ•! Œ£ Œ± C-body)
           {set (ret! (V->R (X/C Œ±) Œ¶^) Œû Œ£)}))]
      [(F:==>:Dom inits‚Üì inits‚Üë ?rst rng Œ° ‚Ñì)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V Œ¶^)
           (define inits‚Üì* (cons V inits‚Üì))
           {set (match inits‚Üë
                  [(cons ‚ü¶C‚üß ‚ü¶C‚üßs)
                   (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:==>:Dom inits‚Üì* ‚ü¶C‚üßs ?rst rng Œ° ‚Ñì) Œû) Œ£)]
                  [_ (if ?rst
                         (?rst Œ° Œ¶^ (K+ (F:==>:Rst inits‚Üì* rng Œ° ‚Ñì) Œû) Œ£)
                         (rng Œ° Œ¶^ (K+ (F:==>:Rng inits‚Üì* #f ‚Ñì) Œû) Œ£))])}))]
      [(F:==>:Rst inits rng Œ° ‚Ñì)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V·µ£ Œ¶^)
           {set (rng Œ° Œ¶^ (K+ (F:==>:Rng inits V·µ£ ‚Ñì) Œû) Œ£)}))]
      [(F:==>:Rng inits ?rst ‚Ñì)
       (define-values (D^ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (define V (mk-==>! Œ£ H‚ÇÄ inits ?rst D^ ‚Ñì))
       {set (ret! (V->R V Œ¶^) Œû Œ£)}]
      [(F:==>i Œ° doms‚Üì dom-ctx doms‚Üë) ???]
      [(F:St/C ‚Ñì ùíæ Cs ‚ü¶C‚üßs Œ°)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (C^ Œ¶^)
           (define Cs* (cons C^ Cs))
           {set (match ‚ü¶C‚üßs
                  [(cons ‚ü¶C‚üß ‚ü¶C‚üßs*)
                   (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:St/C ‚Ñì ùíæ Cs* ‚ü¶C‚üßs* Œ°) Œû) Œ£)]
                  [_
                   (define flds (mk-Œ±‚Ñì*! Œ£ (-ùíæ-name ùíæ) (curry -Œ±:struct/c ùíæ) H‚ÇÄ ‚Ñì (reverse Cs*)))
                   (define flat? (andmap C^-flat? Cs*))
                   (ret! (V->R (St/C flat? ùíæ flds) Œ¶^) Œû Œ£)])}))]
      [(F:Def l lhs)
       (with-guarded-arity/collapse R^‚ÇÄ (length lhs) +‚Ñì‚ÇÄ ; TODO
         (Œª (W Œ¶^)
           (‚äî·µ•*! Œ£ lhs W)
           {set (ret! (V->R -void Œ¶^) Œû Œ£)}))]
      [(F:Dec ‚Ñì ùíæ)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (C^ Œ¶^)
           (define l (-ùíæ-src ùíæ))
           (define Œ±  (mk-Œ± (-Œ±:top ùíæ)))
           (define Œ±* (mk-Œ± (-Œ±:wrp ùíæ)))
           (define V^ (Œ£·µ•@ Œ£ Œ±))
           (mon C^ V^ (Ctx l 'dummy- l ‚Ñì) Œ¶^ (K+ (F:Def l (list Œ±*)) Œû) Œ£)))]
      [(K.Hv HV-Tag) ???]
      
      ;; Specific helpers
      [(F:Wrap G Ctx Œ±)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (V^ Œ¶^)
           (‚äî·µ•! Œ£ Œ± V^)
           {set (ret! (V->R (X/G Ctx G Œ±) Œ¶^) Œû Œ£)}))]
      [(F:Mon-Or/C Ctx C‚Çó C·µ£ V) ???]
      [(F:If:Flat/C V^ Blm)
       (with-guarded-arity R^‚ÇÄ 1 +‚Ñì‚ÇÄ ; TODO
         (Œª (R^‚ÇÄ)
           (define-values (Œ¶^‚ÇÅ Œ¶^‚ÇÇ) (plausible-splits Œ£ R^‚ÇÄ))
           ???))]
      #;[(F:Fc-And/C -l ‚Ñì V^ V^) ???]
      #;[(F:Fc-Or/C -l ‚Ñì V^ V^ V^) ???]
      #;[(F:Fc-Not/C V^) ???]
      #;[(F:Fc-Struct/C l ‚Ñì ùíæ (Listof V^) (Listof ‚ü¶E‚üß) Œ°) ???]
      #;[(F:Fc:V -l ‚Ñì ‚ü¶E‚üß Œ°) ???]
      [(F:Hash-Set-Inner ‚Ñì Œ±) ???]
      [(F:Set-Add-Inner ‚Ñì Œ±) ???]
      [(F:Maybe-Havoc-Prim-Args ‚Ñì Symbol) ???]
      #;[(F:Make-Prim-Range Ctx (Option (Listof Œ±‚Ñì)) (Listof V^) (Listof (List (Listof V) (Option V) (Listof V)))) ???]
      [(F:Implement-Predicate p) ???]
      [(F:Absurd) ‚àÖ])
    #;(match K‚ÇÄ
      ))

  (: ret! : (U R R^) Œû:co Œ£ ‚Üí Œû:co)
  (define (ret! R Œû Œ£) (‚äî‚Çê! Œ£ Œû R) Œû)

  (: with-guarded-arity : R^ Natural ‚Ñì (R^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-arity R^ n ‚Ñì exec)
    (define-values (R^-goods W-bads) (filter/arity R^ n))
    (define blms (for/set : (‚Ñò Blm) ([W (in-set W-bads)])
                   (Blm ‚Ñì 'Œõ (list 'arity (-b n)) W)))
    (‚à™ blms (if (set-empty? R^-goods) ‚àÖ (exec R^-goods))))
  
  (: with-guarded-arity/collapse : R^ Natural ‚Ñì (W Œ¶^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-arity/collapse R^ n ‚Ñì exec)
    (with-guarded-arity R^ n ‚Ñì
      (Œª (R^-goods)
        (define-values (W-goods Œ¶-goods) (collapse-R^ R^-goods))
        (exec (collapse-value-lists W-goods n) Œ¶-goods))))

  (: with-guarded-single-arity/collapse : R^ ‚Ñì (V^ Œ¶^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-single-arity/collapse R^ ‚Ñì exec)
    (with-guarded-arity/collapse R^ 1 ‚Ñì (Œª (W Œ¶^) (exec (car W) Œ¶^))))

  (: mk-==>! : Œ£ H W (Option V^) W^ ‚Ñì ‚Üí V^)
  (define (mk-==>! Œ£ H doms-rev rst rngs ‚Ñì)
    ???
    #|
    (define Dom
      (let ([Init (mk-Œ±‚Ñì*! 'dom -Œ±:dom H ‚Ñì (reverse doms-rev))])
        (cond [rst (define Œ±·µ£ (mk-Œ± (-Œ±:rst ‚Ñì H)))
                   (define ‚Ñì·µ£ (‚Ñì-with-id ‚Ñì 'rest))
                   (-var Init (Œ±‚Ñì Œ±·µ£ ‚Ñì·µ£))]
              [else Init])))
    (define Rng^ ; Should have had special `any` contract
      (for/union : (‚Ñò (Option W)) ([rng (in-set rngs)])
        (match rng
          [(list V^)
           #:when (‚àã s 'any)
           ???])))
    |#
    #|
    (define-values (Dom œÜ‚ÇÅ)
      (let-values ([(Init œÜ*) (mk-‚ü™Œ±‚ü´‚Ñì* Œ£ 'dom -Œ±.dom H ‚Ñì œÜ (reverse doms.rev))])
        (cond [rst (define Œ±·µ£ (-Œ±->‚ü™Œ±‚ü´ (-Œ±.rst ‚Ñì H)))
                   (define ‚Ñì·µ£ (‚Ñì-with-id ‚Ñì 'rest))
                   (values (-var Init (-‚ü™Œ±‚ü´‚Ñì Œ±·µ£ ‚Ñì·µ£)) (alloc Œ£ œÜ* Œ±·µ£ rst))]
              [else (values Init œÜ*)])))
    (define-values (Rng œÜ‚ÇÇ)
      (match rngs
        ['(any) (values 'any œÜ‚ÇÅ)]
        [_ (mk-‚ü™Œ±‚ü´‚Ñì* Œ£ 'rng -Œ±.rng H ‚Ñì œÜ‚ÇÅ rngs)]))
    (values (-=> Dom Rng) œÜ‚ÇÇ)
    |#)

  (: K+/And : -l (Listof ‚ü¶E‚üß) Œ° Œû:co ‚Üí Œû:co)
  (define (K+/And l ‚ü¶E‚üßs Œ° Œû)
    (match ‚ü¶E‚üßs
      [(cons ‚ü¶E‚üß ‚ü¶E‚üßs) (K+ (F:If l ‚ü¶E‚üß (mk-V -ff) Œ°) (K+/And l ‚ü¶E‚üßs Œ° Œû))]
      [_ Œû]))

  (: K+/Or : -l (Listof ‚ü¶E‚üß) Œ° Œû:co ‚Üí Œû:co)
  (define (K+/Or l ‚ü¶E‚üßs Œ° Œû)
    (match ‚ü¶E‚üßs
      [(cons ‚ü¶E‚üß ‚ü¶E‚üßs) (K+ (F:If l (mk-V -tt) ‚ü¶E‚üß Œ°) (K+/Or l ‚ü¶E‚üßs Œ° Œû))]
      [_ Œû]))

  (: mk-Œ±‚Ñì*! : Œ£ Symbol (‚Ñì H Index ‚Üí -Œ±) H ‚Ñì (Listof V^) ‚Üí (Listof Œ±‚Ñì))
  (define (mk-Œ±‚Ñì*! Œ£ tag mk H ‚Ñì Vs)
    (for/list ([V (in-list Vs)] [i (in-naturals)] #:when (index? i))
      (define Œ± (mk-Œ± (mk ‚Ñì H i)))
      (‚äî·µ•! Œ£ Œ± V)
      (Œ±‚Ñì Œ± (‚Ñì-with-id ‚Ñì (cons tag i)))))

  (define db:iter? : (Parameterof Boolean) (make-parameter #f))
  (define db:max-steps : (Parameterof (Option Integer)) (make-parameter #f))
  )
