#lang typed/racket/base

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         (only-in racket/function curry)
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         racket/bool
         racket/match
         racket/list
         typed/racket/unit
         racket/splicing
         syntax/parse/define
         set-extras
         unreachable
         typed-racket-hacks
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(provide step@)

(define-unit step@
  (import val^ env^ sto^ evl^
          alloc^ app^ mon^
          proof-system^)
  (export step^)

  (: ‚Üù! : Œû Œ£ ‚Üí (‚Ñò Œû))
  (define (‚Üù! Œû Œ£)
    (match Œû
      [(Œû:co K‚ÇÄ H‚ÇÄ)
       (define R^‚ÇÄ (Œ£‚Çê@ Œ£ K‚ÇÄ))
       (if (set-empty? R^‚ÇÄ) ‚àÖ (co R^‚ÇÄ K‚ÇÄ H‚ÇÄ Œ£))]
      [_ ‚àÖ])) 

  (: co : R^ K H Œ£ ‚Üí (‚Ñò Œû))
  (define (co R^‚ÇÄ K‚ÇÄ H‚ÇÄ Œ£) 
    (match K‚ÇÄ
      [(K:Rt Œ±‚Çñ)
       (for/set : (‚Ñò Œû) ([Rt* (in-set (Œ£‚Çñ@ Œ£ Œ±‚Çñ))])
         (match-define (Rt H K) Rt*)
         (ret! R^‚ÇÄ K H Œ£))]
      [(K:Ap Vs ‚ü¶E‚üßs Œ° ‚Ñì K)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V^ Œ¶^)
           (define Vs* (cons V^ Vs))
           (match ‚ü¶E‚üßs
             [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*) {set (‚ü¶E‚üß Œ° Œ¶^ (K:Ap Vs* ‚ü¶E‚üßs* Œ° ‚Ñì K) H‚ÇÄ Œ£)}]
             [_ (match-define (cons fun args) (reverse Vs*))
                (app fun args ‚Ñì Œ¶^ K H‚ÇÄ Œ£)])))]
      [(K:Set! Œ± K)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (V^ Œ¶^)
           (‚äî·µ•! Œ£ Œ± V^)
           {set (ret! (V->R -void Œ¶^) K H‚ÇÄ Œ£)}))]
      [(K:Let ‚Ñì xs binds bounds ‚ü¶body‚üß Œ° K)
       (with-guarded-arity/collapse R^‚ÇÄ (length xs) ‚Ñì
         (Œª (W Œ¶^)
           (define bounds*
             (for/fold ([acc : (Assoc Symbol V^) bounds])
                       ([x (in-list xs)] [V (in-list W)])
               (cons (cons x V) acc)))
           (match binds
             [(cons (cons xs* ‚ü¶E‚üß) binds*)
              {set (‚ü¶E‚üß Œ° Œ¶^ (K:Let ‚Ñì xs* binds* bounds* ‚ü¶body‚üß Œ° K) H‚ÇÄ Œ£)}]
             ['()
              (define-values (xs Vs) (unzip bounds*))
              (define Œ°* (bind-args! Œ° xs Vs ‚Ñì Œ¶^ H‚ÇÄ Œ£))
              {set (‚ü¶body‚üß Œ°* Œ¶^ K H‚ÇÄ Œ£)}])))]
      [(K:Letrec ‚Ñì xs binds ‚ü¶body‚üß Œ° K)
       (with-guarded-arity/collapse R^‚ÇÄ (length xs) ‚Ñì
         (Œª (W Œ¶^)
           (‚äî·µ•*! Œ£ (Œ°@* Œ° xs) W)
           {set (match binds
                  [(cons (cons xs* ‚ü¶E‚üß) binds*)
                   (‚ü¶E‚üß Œ° Œ¶^ (K:Letrec ‚Ñì xs* binds* ‚ü¶body‚üß Œ° K) H‚ÇÄ Œ£)]
                  [_ (‚ü¶body‚üß Œ° Œ¶^ K H‚ÇÄ Œ£)])}))]
      [(K:If l ‚ü¶E‚üß‚ÇÅ ‚ü¶E‚üß‚ÇÇ Œ° K)
       (with-guarded-arity R^‚ÇÄ 1 +‚Ñì‚ÇÄ ; TODO
         (Œª (R^‚ÇÄ)
           (define-values (R^‚ÇÅ R^‚ÇÇ) (plausible-splits Œ£ R^‚ÇÄ))
           (define (t) (‚ü¶E‚üß‚ÇÅ Œ° (collapse-R^/Œ¶^ R^‚ÇÅ) K H‚ÇÄ Œ£))
           (define (f) (‚ü¶E‚üß‚ÇÇ Œ° (collapse-R^/Œ¶^ R^‚ÇÇ) K H‚ÇÄ Œ£))
           (cond [(set-empty? R^‚ÇÅ) {set (f)}]
                 [(set-empty? R^‚ÇÇ) {set (t)}]
                 [else {set (t) (f)}])))]
      [(K:Bgn ‚ü¶E‚üßs Œ° K)
       {set (match ‚ü¶E‚üßs
              [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*)
               (define-values (_ Œ¶^) (collapse-R^ R^‚ÇÄ))
               (‚ü¶E‚üß Œ° Œ¶^ (K:Bgn ‚ü¶E‚üßs* Œ° K) H‚ÇÄ Œ£)]
              [_ (ret! R^‚ÇÄ K H‚ÇÄ Œ£)])}]
      [(K:Bgn0:V ‚ü¶E‚üßs Œ° K)
       {set (match ‚ü¶E‚üßs
              [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*)
               (define-values (W^ Œ¶^) (collapse-R^ R^‚ÇÄ))
               (‚ü¶E‚üß Œ° Œ¶^ (K:Bgn0:E W^ ‚ü¶E‚üßs Œ° K) H‚ÇÄ Œ£)]
              [_ (ret! R^‚ÇÄ K H‚ÇÄ Œ£)])}]
      [(K:Bgn0:E W^ ‚ü¶E‚üßs Œ° K)
       (define-values (_ Œ¶^) (collapse-R^ R^‚ÇÄ))
       {set (match ‚ü¶E‚üßs
              [(cons ‚ü¶E‚üß ‚ü¶E‚üßs*) (‚ü¶E‚üß Œ° Œ¶^ (K:Bgn0:E W^ ‚ü¶E‚üßs* Œ° K) H‚ÇÄ Œ£)]
              [_ (ret! (R W^ Œ¶^) K H‚ÇÄ Œ£)])}]
      [(K:Mon:C Ctx Ctc K)
       (with-guarded-single-arity/collapse R^‚ÇÄ (Ctx-loc Ctx)
         (Œª (Val Œ¶^)
           (match Ctc
             [(cons ‚ü¶C‚üß Œ°) {set (‚ü¶C‚üß Œ° Œ¶^ (K:Mon:V Ctx Val K) H‚ÇÄ Œ£)}]
             [(? set?) (mon Ctx Ctc Val H‚ÇÄ Œ¶^ Œ£ K)])))]
      [(K:Mon:V Ctx Val K)
       (with-guarded-single-arity/collapse R^‚ÇÄ (Ctx-loc Ctx)
         (Œª (Ctc Œ¶^)
           (match Val
             [(cons ‚ü¶V‚üß Œ°) {set (‚ü¶V‚üß Œ° Œ¶^ (K:Mon:C Ctx Ctc K) H‚ÇÄ Œ£)}]
             [(? set?) (mon Ctx Ctc Val H‚ÇÄ Œ¶^ Œ£ K)])))]
      [(K:Mon*:C Ctx rngs K)
       (case rngs
         [(any) {set (ret! R^‚ÇÄ K H‚ÇÄ Œ£)}]
         [else
          (with-guarded-arity/collapse R^‚ÇÄ (length rngs) (Ctx-loc Ctx)
            (Œª (W Œ¶^)
              (define-values (Œ≤s ‚Ñìs) (unzip-by Œ±‚Ñì-_0 Œ±‚Ñì-_1 rngs))
              (match* ((Œ£·µ•@* Œ£ Œ≤s) W ‚Ñìs)
                [((cons C‚ÇÅ Cs) (cons V‚ÇÅ Vs) (cons ‚Ñì‚ÇÅ ‚Ñìs))
                 (mon (Ctx-with-‚Ñì Ctx ‚Ñì‚ÇÅ) C‚ÇÅ V‚ÇÅ H‚ÇÄ Œ¶^ Œ£ (K:Mon* Ctx Cs Vs ‚Ñìs '() K))]
                [('() '() '())
                 {set (ret! (W->R '() Œ¶^) K H‚ÇÄ Œ£)}])))])]
      [(K:Mon* Ctx Cs Vs ‚Ñìs Res-rev K)
       (define-values (W^ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (match-define (list V^) (collapse-value-lists W^ 1))
       (define Res-rev* (cons V^ Res-rev))
       (match* (Cs Vs ‚Ñìs)
         [((cons C Cs) (cons V Vs) (cons ‚Ñì ‚Ñìs))
          (mon (Ctx-with-‚Ñì Ctx ‚Ñì) C V H‚ÇÄ Œ¶^ Œ£ (K:Mon* Ctx Cs Vs ‚Ñìs Res-rev* K))]
         [('() '() '())
          {set (ret! (W->R (reverse Res-rev*) Œ¶^) K H‚ÇÄ Œ£)}])]
      [(K:Œú/C x K)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (C-body Œ¶^)
           (define Œ± (mk-Œ± (-Œ±:x/c x H‚ÇÄ)))
           (‚äî·µ•! Œ£ Œ± C-body)
           {set (ret! (V->R (X/C Œ±) Œ¶^) K H‚ÇÄ Œ£)}))]
      [(K:==>:Dom inits‚Üì inits‚Üë ?rst rng Œ° ‚Ñì K)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V Œ¶^)
           (define inits‚Üì* (cons V inits‚Üì))
           {set (match inits‚Üë
                  [(cons ‚ü¶C‚üß ‚ü¶C‚üßs)
                   (‚ü¶C‚üß Œ° Œ¶^ (K:==>:Dom inits‚Üì* ‚ü¶C‚üßs ?rst rng Œ° ‚Ñì K) H‚ÇÄ Œ£)]
                  [_ (if ?rst
                         (?rst Œ° Œ¶^ (K:==>:Rst inits‚Üì* rng Œ° ‚Ñì K) H‚ÇÄ Œ£)
                         (rng Œ° Œ¶^ (K:==>:Rng inits‚Üì* #f ‚Ñì K) H‚ÇÄ Œ£))])}))]
      [(K:==>:Rst inits rng Œ° ‚Ñì K)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (V·µ£ Œ¶^)
           {set (rng Œ° Œ¶^ (K:==>:Rng inits V·µ£ ‚Ñì K) H‚ÇÄ Œ£)}))]
      [(K:==>:Rng inits ?rst ‚Ñì K)
       (define-values (D^ Œ¶^) (collapse-R^ R^‚ÇÄ))
       (define V (mk-==>! Œ£ H‚ÇÄ inits ?rst D^ ‚Ñì))
       {set (ret! (V->R V Œ¶^) K H‚ÇÄ Œ£)}]
      [(K:==>i Œ° doms‚Üì dom-ctx doms‚Üë K) ???]
      [(K:St/C ‚Ñì ùíæ Cs ‚ü¶C‚üßs Œ° K)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (C^ Œ¶^)
           (define Cs* (cons C^ Cs))
           {set (match ‚ü¶C‚üßs
                  [(cons ‚ü¶C‚üß ‚ü¶C‚üßs*)
                   (‚ü¶C‚üß Œ° Œ¶^ (K:St/C ‚Ñì ùíæ Cs* ‚ü¶C‚üßs* Œ° K) H‚ÇÄ Œ£)]
                  [_
                   (define flds (mk-Œ±‚Ñì*! Œ£ (-ùíæ-name ùíæ) (curry -Œ±:struct/c ùíæ) H‚ÇÄ ‚Ñì (reverse Cs*)))
                   (define flat? (andmap C^-flat? Cs*))
                   (ret! (V->R (St/C flat? ùíæ flds) Œ¶^) K H‚ÇÄ Œ£)])}))]
      [(K:Def l lhs K)
       (with-guarded-arity/collapse R^‚ÇÄ (length lhs) +‚Ñì‚ÇÄ ; TODO
         (Œª (W Œ¶^)
           (‚äî·µ•*! Œ£ lhs W)
           {set (ret! (V->R -void Œ¶^) K H‚ÇÄ Œ£)}))]
      [(K:Dec ‚Ñì ùíæ K)
       (with-guarded-single-arity/collapse R^‚ÇÄ ‚Ñì
         (Œª (C^ Œ¶^)
           (define l (-ùíæ-src ùíæ))
           (define Œ±  (mk-Œ± (-Œ±:top ùíæ)))
           (define Œ±* (mk-Œ± (-Œ±:wrp ùíæ)))
           (define V^ (Œ£·µ•@ Œ£ Œ±))
           (mon (Ctx l 'dummy- l ‚Ñì) C^ V^ H‚ÇÄ Œ¶^ Œ£ (K:Def l (list Œ±*) K))))]
      [(K.Hv HV-Tag K) ???]
      
      ;; Specific helpers
      [(K:Wrap G Ctx Œ± K)
       (with-guarded-single-arity/collapse R^‚ÇÄ +‚Ñì‚ÇÄ ; TODO
         (Œª (V^ Œ¶^)
           (‚äî·µ•! Œ£ Œ± V^)
           {set (ret! (V->R (X/G Ctx G Œ±) Œ¶^) K H‚ÇÄ Œ£)}))]
      [(K:Mon-Or/C Ctx C‚Çó C·µ£ V K) ???]
      [(K:If:Flat/C V^ Blm K)
       (with-guarded-arity R^‚ÇÄ 1 +‚Ñì‚ÇÄ ; TODO
         (Œª (R^‚ÇÄ)
           (define-values (R^‚ÇÅ R^‚ÇÇ) (plausible-splits Œ£ R^‚ÇÄ))
           ???))]
      #;[(K:Fc-And/C -l ‚Ñì V^ V^ K) ???]
      #;[(K:Fc-Or/C -l ‚Ñì V^ V^ V^ K) ???]
      #;[(K:Fc-Not/C V^ K) ???]
      #;[(K:Fc-Struct/C l ‚Ñì ùíæ (Listof V^) (Listof ‚ü¶E‚üß) Œ° K) ???]
      #;[(K:Fc:V -l ‚Ñì ‚ü¶E‚üß Œ° K) ???]
      [(K:Hash-Set-Inner ‚Ñì Œ± K) ???]
      [(K:Set-Add-Inner ‚Ñì Œ± K) ???]
      [(K:Maybe-Havoc-Prim-Args ‚Ñì Symbol K) ???]
      #;[(K:Make-Prim-Range Ctx (Option (Listof Œ±‚Ñì)) (Listof V^) (Listof (List (Listof V) (Option V) (Listof V))) K) ???]
      [(K:Implement-Predicate p K) ???]
      [(K:Absurd) ‚àÖ]))

  (: ret! : (U R R^) K H Œ£ ‚Üí Œû:co)
  (define (ret! R K H Œ£)
    (‚äî‚Çê! Œ£ K R)
    (Œû:co K H))

  (: with-guarded-arity : R^ Natural ‚Ñì (R^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-arity R^ n ‚Ñì exec)
    (define-values (R^-goods W-bads) (filter/arity R^ n))
    (define blms (for/set : (‚Ñò Blm) ([W (in-set W-bads)])
                   (Blm ‚Ñì 'Œõ (list 'arity (-b n)) W)))
    (‚à™ blms (if (set-empty? R^-goods) ‚àÖ (exec R^-goods))))
  
  (: with-guarded-arity/collapse : R^ Natural ‚Ñì (W Œ¶^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-arity/collapse R^ n ‚Ñì exec)
    (with-guarded-arity R^ n ‚Ñì
      (Œª (R^-goods)
        (define-values (W-goods Œ¶-goods) (collapse-R^ R^-goods))
        (exec (collapse-value-lists W-goods n) Œ¶-goods))))

  (: with-guarded-single-arity/collapse : R^ ‚Ñì (V^ Œ¶^ ‚Üí (‚Ñò Œû)) ‚Üí (‚Ñò Œû))
  (define (with-guarded-single-arity/collapse R^ ‚Ñì exec)
    (with-guarded-arity/collapse R^ 1 ‚Ñì (Œª (W Œ¶^) (exec (car W) Œ¶^))))

  (: mk-==>! : Œ£ H W (Option V^) W^ ‚Ñì ‚Üí V^)
  (define (mk-==>! Œ£ H doms-rev rst rngs ‚Ñì)
    ???
    #|
    (define Dom
      (let ([Init (mk-Œ±‚Ñì*! 'dom -Œ±:dom H ‚Ñì (reverse doms-rev))])
        (cond [rst (define Œ±·µ£ (mk-Œ± (-Œ±:rst ‚Ñì H)))
                   (define ‚Ñì·µ£ (‚Ñì-with-id ‚Ñì 'rest))
                   (-var Init (Œ±‚Ñì Œ±·µ£ ‚Ñì·µ£))]
              [else Init])))
    (define Rng^ ; Should have had special `any` contract
      (for/union : (‚Ñò (Option W)) ([rng (in-set rngs)])
        (match rng
          [(list V^)
           #:when (‚àã s 'any)
           ???])))
    |#
    #|
    (define-values (Dom œÜ‚ÇÅ)
      (let-values ([(Init œÜ*) (mk-‚ü™Œ±‚ü´‚Ñì* Œ£ 'dom -Œ±.dom H ‚Ñì œÜ (reverse doms.rev))])
        (cond [rst (define Œ±·µ£ (-Œ±->‚ü™Œ±‚ü´ (-Œ±.rst ‚Ñì H)))
                   (define ‚Ñì·µ£ (‚Ñì-with-id ‚Ñì 'rest))
                   (values (-var Init (-‚ü™Œ±‚ü´‚Ñì Œ±·µ£ ‚Ñì·µ£)) (alloc Œ£ œÜ* Œ±·µ£ rst))]
              [else (values Init œÜ*)])))
    (define-values (Rng œÜ‚ÇÇ)
      (match rngs
        ['(any) (values 'any œÜ‚ÇÅ)]
        [_ (mk-‚ü™Œ±‚ü´‚Ñì* Œ£ 'rng -Œ±.rng H ‚Ñì œÜ‚ÇÅ rngs)]))
    (values (-=> Dom Rng) œÜ‚ÇÇ)
    |#)

  (: mk-Œ±‚Ñì*! : Œ£ Symbol (‚Ñì H Index ‚Üí -Œ±) H ‚Ñì (Listof V^) ‚Üí (Listof Œ±‚Ñì))
  (define (mk-Œ±‚Ñì*! Œ£ tag mk H ‚Ñì Vs)
    (for/list ([V (in-list Vs)] [i (in-naturals)] #:when (index? i))
      (define Œ± (mk-Œ± (mk ‚Ñì H i)))
      (‚äî·µ•! Œ£ Œ± V)
      (Œ±‚Ñì Œ± (‚Ñì-with-id ‚Ñì (cons tag i)))))
  )
