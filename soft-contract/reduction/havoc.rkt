#lang typed/racket/base

(provide gen-havoc-Clo gen-havoc-exp havoc-ùíæ)

(require racket/match
         racket/set
         (except-in racket/list remove-duplicates)
         "../utils/set.rkt"
         "../ast/definition.rkt"
         "../runtime/main.rkt"
         "step.rkt"
         "continuation.rkt")

(define havoc-path 'havoc)
(define havoc-ùíæ (-ùíæ 'havoc-id havoc-path))

(define x (+x!))
(define ùê± (-x x))
(define ùê±s (list ùê±))
(define ‚ü¶‚óè‚üß : -‚ü¶e‚üß
  (Œª (M œÉ ‚Ñí)
    (values ‚ä•œÉ {set (-ŒìW (-‚Ñí-cnd ‚Ñí) (-W -‚óè/Vs #f))} ‚àÖ ‚àÖ)))
(define ‚ü¶hv‚üß : -‚ü¶e‚üß
  (‚áì havoc-path (-ref havoc-ùíæ (+‚Ñì!))))

(define (‚Ñì‚Çï·µ• [i : Natural]) : -‚Ñì
  (+‚Ñì/memo! 'hv-ref i))

(: gen-havoc-Clo : (Listof -module) ‚Üí -Clo)
;; Generate the unknown context
;; Only used by `verify` module, not `ce`
(define (gen-havoc-Clo ms)

  (define acs-for-struct
    (for/fold ([m : (HashTable -struct-info (‚Ñò -st-ac)) (hash)])
              ([ac (prog-accs ms)])
      (match-define (-st-ac si _) ac)
      (hash-update m si (Œª ([acs : (‚Ñò -st-ac)]) (set-add acs ac)) ‚Üí‚àÖ)))

  (define ‚ü¶e‚üß : -‚ü¶e‚üß
    (let ()
     
      (Œª (M œÉ ‚Ñí)
        (for*/ans ([V (œÉ@ œÉ (œÅ@ (-‚Ñí-env ‚Ñí) x))])
          (define W (-W¬π V ùê±))
          (define ‚ü¶rt-V‚üß : -‚ü¶e‚üß
            (Œª (M œÉ ‚Ñí)
              (values ‚ä•œÉ {set (-ŒìW (-‚Ñí-cnd ‚Ñí) (-W (list V) ùê±))} ‚àÖ ‚àÖ)))
          (define comp : -‚ü¶e‚üß
            (match V
              [(or (-‚óè) (? -prim?)) ‚ä•‚ü¶e‚üß] ; ignore first-order and opaque
              [(or (? -Clo?) (? -Ar?) (? -Case-Clo?))
               (define a (V-arity V))
               (define ‚Ñì-V‚óè (+‚Ñì/memo! 'arity a))

               (define (hv/arity [k : Natural]) : -‚ü¶e‚üß
                 (define ‚ü¶V-‚óè‚üß
                   (cond
                     [(> k 0) ((‚Üù.@ havoc-path ‚Ñì-V‚óè (list W) (make-list (- k 1) ‚ü¶‚óè‚üß)) ‚ü¶‚óè‚üß)]
                     [else    (ap havoc-path ‚Ñì-V‚óè W '())]))
                 (define ‚ü¶hv-‚∏®V-‚óè‚∏©‚üß ((‚Üù.@ havoc-path (‚Ñì‚Çï·µ• 0) '() (list ‚ü¶V-‚óè‚üß)) ‚ü¶hv‚üß))
                 (define ‚ü¶hv-V‚üß     ((‚Üù.@ havoc-path (‚Ñì‚Çï·µ• 1) '() (list ‚ü¶rt-V‚üß)) ‚ü¶hv‚üß))
                 (define ‚ü¶hv-‚∏®V-‚óè‚∏©‚à∑hv-V‚üß ((‚Üù.begin (list ‚ü¶hv-V‚üß)) ‚ü¶hv-‚∏®V-‚óè‚∏©‚üß))
                 (‚Üù.amb (list ‚ü¶hv-‚∏®V-‚óè‚∏©‚à∑hv-V‚üß ‚ü¶‚óè‚üß)))
               
               (match a
                 [(arity-at-least k) (hv/arity (+ 1 k))] ; TODO
                 [(? integer? k) (hv/arity k)]
                 [(? list? ks)
                  (‚Üù.amb (for/list : (Listof -‚ü¶e‚üß) ([k ks])
                           (cond [(integer? k) (hv/arity k)]
                                 [else (error 'havoc"TODO: ~a" k)])))]
                 [_ ‚ä•‚ü¶e‚üß])

               ]
              [(or (-St s _) (-St* s _ _ _)) #:when s
               (define ‚ü¶hv-field‚üßs : (Listof -‚ü¶e‚üß)
                 (for/list ([ac (hash-ref acs-for-struct s ‚Üí‚àÖ)])
                   (define Ac (-W¬π ac ac))
                   (define ‚ü¶ac-V‚üß      ((‚Üù.@ havoc-path (+‚Ñì/memo! 'ac ac) (list Ac) '()) ‚ü¶rt-V‚üß))
                   (define ‚ü¶hv-‚∏®ac-V‚∏©‚üß ((‚Üù.@ havoc-path (‚Ñì‚Çï·µ• 3 #|FIXME|#) '() (list ‚ü¶ac-V‚üß)) ‚ü¶hv‚üß))
                   (define ‚ü¶hv-V‚üß      ((‚Üù.@ havoc-path (‚Ñì‚Çï·µ• 4 #|FIXME|#) '() (list ‚ü¶rt-V‚üß)) ‚ü¶hv‚üß))
                   ((‚Üù.begin (list ‚ü¶hv-V‚üß)) ‚ü¶hv-‚∏®ac-V‚∏©‚üß)))
               (‚Üù.amb ‚ü¶hv-field‚üßs)]
              [(or (? -Vector?) (? -Vector/hetero?) (? -Vector/homo?))
               (log-warning "TODO: havoc vector")
               ‚ä•‚ü¶e‚üß]
              [(? -C?)
               (log-warning "TODO: havoc contract combinators")
               ‚ä•‚ü¶e‚üß]))
          (comp M œÉ ‚Ñí)))))

  (-Clo (list x) ‚ü¶e‚üß ‚ä•œÅ ‚ä§Œì))

(: gen-havoc-exp : (Listof -module) ‚Üí -e)
;; Generate havoc top-level expression havoc-king modules' exports
(define (gen-havoc-exp ms)
  (define-set refs : -ref)
  
  (for ([m (in-list ms)])
    (match-define (-module path forms) m)
    (for* ([form forms] #:when (-provide? form)
           [spec (-provide-specs form)])
      (match-define (-p/c-item x _ _) spec)
      (refs-add! (-ref (-ùíæ x path) (+‚Ñì!)))))
  
  (-amb/simp (for/list ([ref (in-set refs)])
               (-@ (‚Ä¢!) (list ref) (+‚Ñì!)))))

(: prog-accs : (Listof -module) ‚Üí (‚Ñò -st-ac))
;; Retrieve set of all public accessors from program
(define (prog-accs ms)
  
  ;; Collect all defined accessors (`defs`) and exported identifiers (`decs`)
  (define defs : (HashTable Symbol -st-ac) (make-hasheq))
  (define decs : (HashTable Symbol #t    ) (make-hasheq))
  (for* ([m ms]
         [form (-module-body m)])
    (match form
      [(-provide specs)
       (for-each
        (match-lambda [(-p/c-item x _ _) (hash-set! decs x #t)])
        specs)]
      [(-define-values (list x) (? -st-ac? e))
       (hash-set! defs x e)]
      [_ (void)]))
  
  ;; Return exported accessors
  (‚à™ (for/set: : (‚Ñò -st-ac) ([(x ac) (in-hash defs)] #:when (hash-has-key? decs x))
       ac)
     {set -car -cdr}))
