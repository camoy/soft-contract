#lang typed/racket/base

(provide compile@)

(require racket/set
         racket/list
         racket/match
         typed/racket/unit
         set-extras
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../proof-relation/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit compile@
  (import meta-functions^ ast-pretty-print^
          kont^ widening^ memoize^ proof-system^ local-prover^
          env^ sto^ pc^ val^ pretty-print^ for-gc^)
  (export compile^)

  (define ‚ü¶e‚üß-locs : (Mutable-HashTable -‚ü¶e‚üß (‚Ñò ‚Ñì)) (make-hasheq))
  (define (loc-from-expr? [‚Ñì : ‚Ñì] [‚ü¶e‚üß : -‚ü¶e‚üß]) (map-has? ‚ü¶e‚üß-locs ‚ü¶e‚üß ‚Ñì))

  ;; Compile program
  (define (‚Üì‚Çö [ms : (Listof -module)] [e : -e]) : -‚ü¶e‚üß
    (define ‚ü¶e‚üß (‚Üì‚Çë '‚Ä† e))
    (match (map ‚Üì‚Çò ms)
      ['() ‚ü¶e‚üß]
      [(cons ‚ü¶m‚üß ‚ü¶m‚üßs)
       (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
         (‚ü¶m‚üß œÅ $ Œì H Œ£ (bgn‚à∑ `(,@‚ü¶m‚üßs ,‚ü¶e‚üß) œÅ ‚ü¶k‚üß)))]))

  ;; Compile module
  (define (‚Üì‚Çò [m : -module]) : -‚ü¶e‚üß
    (match-define (-module l ds) m)

    (: ‚Üìpc : -provide-spec ‚Üí -‚ü¶e‚üß)
    (define ‚Üìpc
      (match-lambda
        ;; Wrap contract
        [(-p/c-item x c ‚Ñì)
         (define ‚ü¶c‚üß (‚Üì‚Çë l c))
         (define ùíæ (-ùíæ x l))
         (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì H Œ£ (dec‚à∑ ‚Ñì ùíæ ‚ü¶k‚üß)))]
        ;; export same as internal
        [(? symbol? x)
         (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l)))
         (define Œ±* (-Œ±->‚ü™Œ±‚ü´ (-Œ±.wrp (-ùíæ x l))))
         (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
           (assert (defined-at? Œ£ Œ±))
           (œÉ-copy! Œ£ Œ± Œ±*)
           (‚ü¶k‚üß (+W (list -void)) $ Œì H Œ£))]))
    
    (: ‚Üìd : -module-level-form ‚Üí -‚ü¶e‚üß)
    (define (‚Üìd d)
      (match d
        [(-define-values xs e)
         (define Œ±s : (Listof ‚ü™Œ±‚ü´) (for/list ([x xs]) (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l))))
         (define ‚ü¶e‚üß (‚Üì‚Çë l e))
         (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß œÅ $ Œì H Œ£ (def‚à∑ l Œ±s ‚ü¶k‚üß)))]
        [(-provide specs)
         (match (map ‚Üìpc specs)
           ['() (‚Üì‚Çö·µ£‚Çò -void)]
           [(cons ‚ü¶spec‚üß ‚ü¶spec‚üßs)
            (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
              (‚ü¶spec‚üß œÅ $ Œì H Œ£ (bgn‚à∑ ‚ü¶spec‚üßs œÅ ‚ü¶k‚üß)))])]
        [(? -e? e) (‚Üì‚Çë l e)]
        [_
         (log-warning "‚Üìd : ignore ~a~n" (show-module-level-form d))
         (‚Üì‚Çö·µ£‚Çò -void)]))

    (match (map ‚Üìd ds)
      ['() (‚Üì‚Çö·µ£‚Çò -void)]
      [(cons ‚ü¶d‚üß ‚ü¶d‚üßs)
       (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
         (‚ü¶d‚üß œÅ $ Œì H Œ£ (bgn‚à∑ ‚ü¶d‚üßs œÅ ‚ü¶k‚üß)))]))

  ;; Compile expression to computation
  (define (‚Üì‚Çë [l : -l] [e : -e]) : -‚ü¶e‚üß
    (let ‚Üì : -‚ü¶e‚üß ([e : -e e])
      (remember-e!
       e
       (match e
         [(-Œª xs e*)
          (define ‚ü¶e*‚üß (memoize-‚ü¶e‚üß (‚Üì e*)))
          (hash-set! ‚ü¶e‚üß-locs ‚ü¶e*‚üß (locs e*))
          (set-bound-vars! ‚ü¶e*‚üß (bv e*))
          (define fvs (fv e*))
          #;(printf "Warning: no longer canonicalize Œª-term~n")
          (define t (-Œª xs e*))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (define œÅ* (m‚Üì œÅ fvs))
            (define Œì*
              (‚à™ (for*/set: : -Œì ([œÜ (in-set Œì)]
                                  [fv‚ü¶œÜ‚üß (in-value (fv‚Çú œÜ))]
                                  #:unless (set-empty? fv‚ü¶œÜ‚üß)
                                  #:when (‚äÜ fv‚ü¶œÜ‚üß fvs))
                   œÜ)
                 ;; FIXME generalize HACK
                 (for*/union : -Œì ([x (in-hash-keys œÅ)]
                                   [t (in-value (hash-ref $ x #f))]
                                   #:when t)
                   (for*/union : -Œì ([œÜ (in-set Œì)])
                      (match œÜ
                        [(-t.@ p (list (== t))) {set (-t.@ p (list (-t.x x)))}]
                        [(-t.@ p (list (? -b? b) (== t))) {set (-t.@ p (list b (-t.x x)))}]
                        [(-t.@ p (list (== t) (? -b? b))) {set (-t.@ p (list (-t.x x) b))}]
                        [_ ‚àÖ])))))
            (‚ü¶k‚üß (-W (list (-Clo xs ‚ü¶e*‚üß œÅ* Œì*)) t) $ Œì H Œ£))]
         [(-case-Œª cases)
          (define ‚ü¶mk‚üß (‚Üì‚Çö·µ£‚Çò 'scv:make-case-lambda))
          (define ‚ü¶case‚üßs (map ‚Üì cases))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶mk‚üß œÅ $ Œì H Œ£ (ap‚à∑ '() ‚ü¶case‚üßs œÅ +‚Ñì‚ÇÄ ‚ü¶k‚üß)))]
         [(? -prim? p) (‚Üì‚Çö·µ£‚Çò p)]
         [(-‚Ä¢)
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-W (list (+‚óè)) #f) $ Œì H Œ£))]
         [(-x x ‚Ñì‚Çì)
          (match x
            [(? symbol? x)
             (‚Üì‚Çì l x ‚Ñì‚Çì)]
            [(and ùíæ (-ùíæ x l‚ÇÄ))
             (: approximate-under-contract! : -Œ£ -V ‚Üí -V)
             (define (approximate-under-contract! Œ£ V)
               (match V
                 [(-Ar C _ l¬≥)
                  (match C
                    [(-=> (list (-‚ü™Œ±‚ü´‚Ñì Œ±‚ÇÅ _)) (list (-‚ü™Œ±‚ü´‚Ñì Œ±‚ÇÇ _)))
                     #:when (and (equal? (œÉ@ Œ£ Œ±‚ÇÅ) {set 'any/c})
                                 (equal? (œÉ@ Œ£ Œ±‚ÇÇ) {set 'boolean?}))
                     ;; cheat
                     V]
                    [_
                     (-Ar C (-Œ±->‚ü™Œ±‚ü´ (-Œ±.imm (-Fn‚óè (guard-arity C)))) l¬≥)])]
                 [(-St* C _ l¬≥)
                  (-St* C ‚ü™Œ±‚ü´‚Çí‚Çö l¬≥)]
                 [(-Vector/guard C _ l¬≥)
                  (-Vector/guard C ‚ü™Œ±‚ü´‚Çí‚Çö l¬≥)]
                 [_ V]))
             
             (define-values (Œ± modify-V)
               (cond
                 ;; same-module referencing returns unwrapped version
                 [(equal? l‚ÇÄ l)
                  (values ùíæ (Œª ([Œ£ : -Œ£] [V : -V]) V))]
                 ;; cross-module referencing returns wrapped version
                 ;; when the caller is symbolic (HACK)
                 ;; and supplies the negative monitoring context (HACK)
                 [(symbol? l)
                  (values (-Œ±.wrp ùíæ) (Œª ([Œ£ : -Œ£] [V : -V]) (with-negative-party l V)))]
                 ;; cross-mldule referencing returns abstracted wrapped version
                 ;; when the caller is concrete (HACK)
                 ;; and supplies the negative monitoring context (HACK)
                 [else
                  (values (-Œ±.wrp ùíæ) (Œª ([Œ£ : -Œ£] [V : -V])
                                       (with-positive-party 'dummy+
                                         (with-negative-party l
                                           (approximate-under-contract! Œ£ V)))))]))
             
             (define ‚ü™Œ±‚ü´ (-Œ±->‚ü™Œ±‚ü´ Œ±))
             (define ?loc (hack:Œ±->loc ‚ü™Œ±‚ü´))

             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (unless (hash-has-key? (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´‚Çí‚Çö) ; HACK
                 (œÉ‚äïV! Œ£ ‚ü™Œ±‚ü´‚Çí‚Çö (+‚óè)))
               (cond
                 [?loc
                  (define-values (Ws $*) ($@! Œ£ Œì ‚ü™Œ±‚ü´ $ ?loc ‚Ñì‚Çì))
                  (for/union : (‚Ñò -œÇ) ([W (in-set Ws)])
                             (‚ü¶k‚üß (W¬π->W W) $* Œì H Œ£))]
                 [else
                  (for/union : (‚Ñò -œÇ) ([V (in-set (œÉ@ Œ£ ‚ü™Œ±‚ü´))])
                             (define V* (modify-V Œ£ V))
                             (‚ü¶k‚üß (-W (list V*) ‚Ñì‚Çì) $ Œì H Œ£))]))])]
         [(-@ f xs ‚Ñì)
          (define ‚ü¶f‚üß  (‚Üì f))
          (define ‚ü¶x‚üßs (map ‚Üì xs))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶f‚üß œÅ $ Œì H Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß)))]
         [(-if e‚ÇÄ e‚ÇÅ e‚ÇÇ)
          (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
          (define ‚ü¶e‚ÇÅ‚üß (‚Üì e‚ÇÅ))
          (define ‚ü¶e‚ÇÇ‚üß (‚Üì e‚ÇÇ))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶e‚ÇÄ‚üß œÅ $ Œì H Œ£ (if‚à∑ l ‚ü¶e‚ÇÅ‚üß ‚ü¶e‚ÇÇ‚üß œÅ ‚ü¶k‚üß)))]
         [(-wcm k v b) (error '‚Üì‚Çë "TODO: wcm")]
         [(-begin es)
          (match (map ‚Üì es)
            ['()
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶k‚üß (+W (list -void)) $ Œì H Œ£))]
            [(cons ‚ü¶e‚üß ‚ü¶e‚üßs)
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶e‚üß œÅ $ Œì H Œ£ (bgn‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))])]
         [(-begin0 e‚ÇÄ es)
          (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
          (define ‚ü¶e‚üßs (map ‚Üì es))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶e‚ÇÄ‚üß œÅ $ Œì H Œ£ (bgn0.v‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))]
         [(-quote q)
          (cond [(Base? q) (‚Üì‚Çö·µ£‚Çò (-b q))]
                [else (error '‚Üì‚Çë "TODO: (quote ~a)" q)])]
         [(-let-values bnds e* ‚Ñì)
          (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
            (for/list ([bnd bnds])
              (match-define (cons xs e‚Çì‚Çõ) bnd)
              (cons xs (‚Üì e‚Çì‚Çõ))))
          (define ‚ü¶e*‚üß (‚Üì e*))
          (match ‚ü¶bnd‚üßs
            ['() ‚ü¶e*‚üß]
            [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
             (define bounds (append-map (inst car (Listof Symbol) -e) bnds))
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (define ‚ü¶k‚üß* (restore-$‚à∑ ($-extract $ bounds) ‚ü¶k‚üß))
               (‚ü¶e‚üß‚Çì‚Çõ œÅ $ Œì H Œ£ (let‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* '() ‚ü¶e*‚üß œÅ ‚ü¶k‚üß*)))])]
         [(-letrec-values bnds e* ‚Ñì)
          (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
            (for/list ([bnd bnds])
              (match-define (cons xs e‚Çì‚Çõ) bnd)
              (cons xs (‚Üì e‚Çì‚Çõ))))
          (define ‚ü¶e*‚üß (‚Üì e*))
          (match ‚ü¶bnd‚üßs
            ['() ‚ü¶e*‚üß]
            [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
             (define bounds (append-map (inst car (Listof Symbol) -e) bnds))
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (define œÅ* ; with side effect widening store
                 (for*/fold ([œÅ  : -œÅ  œÅ])
                            ([‚ü¶bnd‚üß ‚ü¶bnd‚üßs]
                             [xs (in-value (car ‚ü¶bnd‚üß))]
                             [x xs])
                   (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x x H ‚àÖ)))
                   (œÉ‚äïV! Œ£ Œ± -undefined)
                   (œÅ+ œÅ x Œ±)))
               (define ‚ü¶k‚üß* (restore-$‚à∑ ($-extract $ bounds) ‚ü¶k‚üß))
               (‚ü¶e‚üß‚Çì‚Çõ œÅ* $ Œì H Œ£ (letrec‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* ‚ü¶e*‚üß œÅ* ‚ü¶k‚üß*)))])]
         [(-set! x e*)
          (define ‚ü¶e*‚üß (‚Üì e*))
          (cond
            [(symbol? x)
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶e*‚üß œÅ $ Œì H Œ£ (set!‚à∑ (œÅ@ œÅ x) ‚ü¶k‚üß)))]
            [else
             (define Œ± (-Œ±->‚ü™Œ±‚ü´ x))
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶e*‚üß œÅ $ Œì H Œ£ (set!‚à∑ Œ± ‚ü¶k‚üß)))])]
         [(-error msg ‚Ñì)
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-blm (‚Ñì-src ‚Ñì) 'Œõ '() (list (-b msg)) ‚Ñì) $ Œì H Œ£))]
         [(-Œº/c x c)
          (define ‚ü¶c‚üß (‚Üì c))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x/c x H)))
            (‚ü¶c‚üß (œÅ+ œÅ x Œ±) $ Œì H Œ£ (Œº/c‚à∑ x ‚ü¶k‚üß)))]
         [(--> cs d ‚Ñì)
          (define ‚ü¶d‚üß (‚Üì d))
          (match (-var-map ‚Üì cs)
            ['()
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶d‚üß œÅ $ Œì H Œ£ (-->.rng‚à∑ '() #f ‚Ñì ‚ü¶k‚üß)))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (‚ü¶c‚üß œÅ $ Œì H Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs #f ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
            [(-var ‚ü¶c‚üßs ‚ü¶c‚üß·µ£)
             (match ‚ü¶c‚üßs
               ['()
                (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
                  (‚ü¶c‚üß·µ£ œÅ $ Œì H Œ£ (-->.rst‚à∑ '() ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
               [(cons ‚ü¶c‚üß ‚ü¶c‚üßs*)
                (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
                  (‚ü¶c‚üß œÅ $ Œì H Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs* ‚ü¶c‚üß·µ£ ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))])])]
         [(-->i cs (and mk-d (-Œª xs d)) ‚Ñì)
          (define ‚ü¶d‚üß (‚Üì d))
          (match (map ‚Üì cs)
            ['()
             (define c (-?->i '() mk-d))
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
               (define-values (G g) (mk-=>i! Œ£ Œì H '() Mk-D mk-d ‚Ñì))
               (‚ü¶k‚üß (-W (list G) g) $ Œì H Œ£))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
               (‚ü¶c‚üß œÅ $ Œì H Œ£ (-->i‚à∑ '() ‚ü¶c‚üßs œÅ Mk-D mk-d ‚Ñì ‚ü¶k‚üß)))])]
         [(-case-> cases)
          (define ‚ü¶case‚üßs (map ‚Üì cases))
          (define ‚ü¶mk‚üß (‚Üì‚Çö·µ£‚Çò 'scv:make-case->))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶mk‚üß œÅ $ Œì H Œ£ (ap‚à∑ '() ‚ü¶case‚üßs œÅ #|dummy|# +‚Ñì‚ÇÄ ‚ü¶k‚üß)))]
         [(-‚àÄ/c xs e*)
          (define ‚ü¶e*‚üß (‚Üì e*))
          (define fvs (fv e*))
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (define œÅ* (m‚Üì œÅ fvs))
            (‚ü¶k‚üß (-W (list (-‚àÄ/C xs ‚ü¶e*‚üß œÅ*)) #f) $ Œì H Œ£))]
         [(-x/c x)
          (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-W (list (-x/C (œÅ@ œÅ x))) #f) $ Œì H Œ£))]
         [(-struct/c ùíæ cs ‚Ñì)
          (define Œ± (-Œ±->‚ü™Œ±‚ü´ ùíæ))
          (define blm (-blm l 'Œõ '(struct-defined?) (list (-ùíæ-name ùíæ)) ‚Ñì))
          (define builtin-struct-tag? (match? ùíæ (== -ùíæ-cons) (== -ùíæ-box)))
          (match (map ‚Üì cs)
            ['()
             (define W (-W (list (-St/C #t ùíæ '())) (-t.@ (-st/c.mk ùíæ) '())))
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (define A (if (or builtin-struct-tag? (defined-at? Œ£ Œ±)) W blm))
               (‚ü¶k‚üß A $ Œì H Œ£))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
               (if (or builtin-struct-tag? (defined-at? Œ£ Œ±))
                   (‚ü¶c‚üß œÅ $ Œì H Œ£ (struct/c‚à∑ ‚Ñì ùíæ '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß))
                   (‚ü¶k‚üß blm $ Œì H Œ£)))])]
         [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))])))

    )

  (define/memo (‚Üì‚Çì [l : -l] [x : Symbol] [‚Ñì‚Çì : ‚Ñì]) : -‚ü¶e‚üß
    (define -blm.undefined
      (-blm l 'Œõ (list 'defined?) (list (format-symbol "~a_(~a)" 'undefined x)) ‚Ñì‚Çì))
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (define Œ± (œÅ@ œÅ x))
      (cond
        [(-V? Œ±)
         (‚ü¶k‚üß (-W (list Œ±) x) $ Œì H Œ£)]
        [else
         (define-values (Ws $*) ($@! Œ£ Œì Œ± $ x ‚Ñì‚Çì))
         (for/union : (‚Ñò -œÇ) ([W (in-set Ws)])
           (define A
             (match W
               [(-W¬π (-b (== undefined)) _) -blm.undefined]
               [(-W¬π V                   t) (-W (list V) t)]))
           (‚ü¶k‚üß A $* Œì H Œ£))])))

  (define (‚Üì‚Çö·µ£‚Çò [p : -prim]) (ret-W¬π p p))

  (define/memo (ret-W¬π [V : -V] [t : -?t]) : -‚ü¶e‚üß
    (define W (-W (list V) t))
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß W $ Œì H Œ£)))

  (define/memo (mk-mon [ctx : -ctx] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶e‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì H Œ£ (mon.v‚à∑ ctx (cons ‚ü¶e‚üß œÅ) ‚ü¶k‚üß))))

  (define/memo (mk-app [‚Ñì : ‚Ñì] [‚ü¶f‚üß : -‚ü¶e‚üß] [‚ü¶x‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (‚ü¶f‚üß œÅ $ Œì H Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß))))

  (define/memo (mk-rt [A : (U -A -W¬π)]) : -‚ü¶e‚üß
    (match A
      [(-W¬π V v) (mk-rt (-W (list V) v))]
      [(? -A?) (Œª (_ $ Œì H Œ£ ‚ü¶k‚üß) (‚ü¶k‚üß A $ Œì H Œ£))]))

  (define/memo (mk-fc [l : -l] [‚Ñì : ‚Ñì] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶v‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì H Œ£ (fc.v‚à∑ l ‚Ñì ‚ü¶v‚üß œÅ ‚ü¶k‚üß))))

  (define/memo (mk-wrapped-hash [C : -Hash/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [W : -W¬π]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (match-define (-W¬π V t) W)
      (œÉ‚äïV! Œ£ Œ± V)
      (‚ü¶k‚üß (-W (list (-Hash/guard C Œ± ctx)) t) $ Œì H Œ£)))

  (define/memo (mk-wrapped-set [C : -Set/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [W : -W¬π]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì H Œ£ ‚ü¶k‚üß)
      (match-define (-W¬π V t) W)
      (œÉ‚äïV! Œ£ Œ± V)
      (‚ü¶k‚üß (-W (list (-Set/guard C Œ± ctx)) t) $ Œì H Œ£)))
  )

