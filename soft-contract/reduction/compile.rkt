#lang typed/racket/base

(provide compile@)

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         (only-in racket/function const)
         racket/set
         racket/list
         racket/match
         typed/racket/unit
         syntax/parse/define
         set-extras
         unreachable
         abstract-compilation
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "signatures.rkt"
         )

(define-unit compile@
  (import meta-functions^ static-info^
          env^ val^ sto^ evl^
          kont^ widen^)
  (export compile^)

  (: ‚Üì‚Çö : (Listof -module) -e ‚Üí ‚ü¶E‚üß)
  ;; Compile program
  (define (‚Üì‚Çö ms E)
    (match ms
      ['() (‚Üì‚Çë '‚Ä† E)]
      [(cons m ms)
       (define ‚ü¶m‚üß (‚Üì‚Çò m))
       (define ‚ü¶m‚üßs (map ‚Üì‚Çò ms))
       (define ‚ü¶E‚üß (‚Üì‚Çë '‚Ä† E))
       (Œª (Œ° Œ¶^ K H Œ£) (‚ü¶m‚üß Œ° Œ¶^ (K:Bgn `(,@‚ü¶m‚üßs ,‚ü¶E‚üß) Œ° K) H Œ£))]))

  (: ‚Üì‚Çò : -module ‚Üí ‚ü¶E‚üß)
  ;; Compile module
  (define (‚Üì‚Çò m)
    (match-define (-module l ds) m)

    (: ‚Üìpc : -provide-spec ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üìpc spec) Œ° Œ¶^ K H Œ£)
      ;; Wrap contract
      [=> (-p/c-item x C ‚Ñì)
          (‚ü¶C‚üß Œ° Œ¶^ (K:Dec ‚Ñì ùíæ K) H Œ£)
          #:where
          [ùíæ (-ùíæ x l)]
          [‚ü¶C‚üß (‚Üì‚Çë l C)]]
      ;; Export same as internal
      [=> (? symbol? x)
          (begin0 (Œû K H)
            (assert (defined-at? Œ£ Œ±))
            (‚äî‚Çê! Œ£ K (R‚Üì A Œ¶^))
            (‚äî·µ•! Œ£ Œ±* (Œ£·µ•@ Œ£ Œ±)))
       #:where
       [Œ±  (mk-Œ± (-Œ±:top (-ùíæ x l)))]
       [Œ±* (mk-Œ± (-Œ±:wrp (-ùíæ x l)))]
       [A  (list {set -void})]])
    
    (: ‚Üìd : -module-level-form ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üìd d) Œ° Œ¶^ K H Œ£)
      [=> (-define-values xs E)
          (‚ü¶E‚üß Œ° Œ¶^ (K:Def l Œ±s K) H Œ£)
          #:where
          [Œ±s (for/list : (Listof Œ±) ([x (in-list xs)]) (mk-Œ± (-Œ±:top (-ùíæ x l))))]
          [‚ü¶E‚üß (‚Üì‚Çë l E)]]
      [(-provide '()) (mk-V -void)]
      [=> (-provide (cons spec specs))
          (‚ü¶spec‚üß Œ° Œ¶^ (K:Bgn ‚ü¶spec‚üßs Œ° K) H Œ£)
          #:where
          [‚ü¶spec‚üß (‚Üìpc spec)]
          [‚ü¶spec‚üßs (map ‚Üìpc specs)]]
      [(? -e? E) (‚Üì‚Çë l E)]
      [_ (begin0 (mk-V -void)
           (log-warning "‚Üìd: ignore ~a~n" d))])

    (match ds
      ['() (mk-V -void)]
      [(cons D Ds)
       (define ‚ü¶D‚üß (‚Üìd D))
       (define ‚ü¶D‚üßs (map ‚Üìd Ds))
       (Œª (Œ° Œ¶^ K H Œ£)
         (‚ü¶D‚üß Œ° Œ¶^ (K:Bgn ‚ü¶D‚üßs Œ° K) H Œ£))]))

  (: ‚Üì‚Çë : -l -e ‚Üí ‚ü¶E‚üß)
  (define (‚Üì‚Çë l e)
    (: ‚Üì-bnd : (Pairof (Listof Symbol) -e) ‚Üí (Pairof (Listof Symbol) ‚ü¶E‚üß))
    (define (‚Üì-bnd bnd)
      (match-define (cons x e‚Çì) bnd)
      (cons x (‚Üì e‚Çì)))

    (: ‚Üì-dom : -dom ‚Üí ‚ü¶dom‚üß)
    (define ‚Üì-dom
      (match-lambda
        [(-dom xs ?dep e ‚Ñì) (‚ü¶dom‚üß xs ?dep (‚Üì e) ‚Ñì)]))
    
    (: ‚Üì : -e ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üì E) Œ° Œ¶^ K H Œ£)
      [(? -prim? p) (mk-V p)]
      [(-‚Ä¢) (mk-V (-‚óè ‚àÖ))]
      [(-x (? symbol? x) ‚Ñì‚Çì) (‚Üì‚Çì x ‚Ñì‚Çì)]
      [=> (-Œª xs E*)
          (begin0 (Œû K H)
            (‚äî‚Çê! Œ£ K (R‚Üì (Clo xs ‚ü¶E*‚üß (m‚Üì Œ° fvs)) Œ¶^)))
          #:where [fvs (fv E)]
          #:recur E*]
      [=> (-x (and ùíæ (-ùíæ x l‚Çí)) _)
          (begin0 (Œû K H)
            (‚äî·µ•! Œ£ Œ± (map/set modify-V (Œ£·µ•@ Œ£ Œ±))))
          #:where
          [Œ± (mk-Œ± ((if (equal? l‚Çí l) -Œ±:top -Œ±:wrp) ùíæ))]
          [modify-V
           (ann (cond
                  [(equal? l‚Çí l) values]
                  [(symbol? l) (Œª (V) (with-negative-party l V))]
                  [(Œª ([V : V])
                     (with-positive-party 'dummy+
                       (with-negative-party l
                         (match V
                           [(X/G l¬≥ C _) (X/G l¬≥ C Œ±‚Ä¢)]
                           [_ V]))))])
                (V ‚Üí V))]]
      [=> (-@ E Es ‚Ñì)
          (‚ü¶E‚üß Œ° Œ¶^ (K:Ap '() ‚ü¶Es‚üß Œ° ‚Ñì K) H Œ£)
          #:where ; HACK
          [_ (match* (E Es)
               [('scv:mon (cons (-b (? symbol? l)) _))
                (add-transparent-module! (symbol->string l))
                (add-transparent-module! (format "user-of-~a" l))]
               [(_ _) 'ignore])]
          #:recur E (Es ...)]
      [=> (-if E E‚ÇÅ E‚ÇÇ)
          (‚ü¶E‚üß Œ° Œ¶^ (K:If l ‚ü¶E‚ÇÅ‚üß ‚ü¶E‚ÇÇ‚üß Œ° K) H Œ£)
          #:recur E E‚ÇÅ E‚ÇÇ]
      [(-wcm E‚Çñ E·µ• E) (error '‚Üì‚Çë "TODO: wcm")]
      [(-begin '()) (mk-V -void)]
      [=> (-begin (cons E Es))
          (‚ü¶E‚üß Œ° Œ¶^ (K:Bgn ‚ü¶Es‚üß Œ° K) H Œ£)
          #:recur E (Es ...)]
      [=> (-begin0 E‚ÇÄ Es)
          (‚ü¶E‚ÇÄ‚üß Œ° Œ¶^ (K:Bgn0:V ‚ü¶Es‚üß Œ° K) H Œ£)
          #:recur E‚ÇÄ (Es ...)]
      [(-quote (? Base? b)) (mk-V (-b b))]
      [(-quote q) (error '‚Üì‚Çë "TODO: (quote ~a)" q)]
      [(-let-values '() E _) (‚Üì E)]
      [=> (-let-values bnds E ‚Ñì)
          (‚ü¶E‚üß‚Çì Œ° Œ¶^ (K:Let ‚Ñì x ‚ü¶bnd‚üßs '() ‚ü¶E‚üß Œ° K) H Œ£)
          #:where [(cons (cons x ‚ü¶E‚üß‚Çì) ‚ü¶bnd‚üßs) (map ‚Üì-bnd bnds)]
          #:recur E]
      [(-letrec-values '() E _) (‚Üì E)]
      [=> (-letrec-values bnds E ‚Ñì)
          (let ([Œ°* (init-undefined! Œ£ bnds H Œ°)])
            (‚ü¶E‚üß‚Çì Œ°* Œ¶^ (K:Letrec ‚Ñì x ‚ü¶bnd‚üßs ‚ü¶E‚üß Œ°* K) H Œ£))
          #:where
          [(cons (cons x ‚ü¶E‚üß‚Çì) ‚ü¶bnd‚üßs) (map ‚Üì-bnd bnds)]
          [init-undefined!
           (Œª ([Œ£ : Œ£] [bnd : (Assoc (Listof Symbol) -e)] [H : H] [Œ°‚ÇÄ : Œ°])
             (for*/fold ([Œ° : Œ° Œ°‚ÇÄ])
                        ([bnd (in-list bnds)] [x (in-list (car bnd))])
               (define Œ± (mk-Œ± (-Œ±:x x H)))
               (‚äî·µ•! Œ£ Œ± -undefined)
               (Œ°+ Œ° x Œ±)))]
          #:recur E]
      [=> (-set! x E)
          (‚ü¶E‚üß Œ° Œ¶^ (K:Set! (get-addr Œ°) K) H Œ£)
          #:where [get-addr
                   (if (symbol? x)
                       (Œª ([Œ° : Œ°]) (Œ°@ Œ° x))
                       (Œª _ (mk-Œ± (-Œ±:top x))))]
          #:recur E]
      [(-error msg ‚Ñì)
       (mk-A (Blm/simp ‚Ñì 'Œõ '(not-reached) (list (set (-b msg)))))]
      [=> (-Œº/c x C)
          (‚ü¶C‚üß (Œ°+ Œ° x (mk-Œ± (-Œ±:x/c x H))) Œ¶^ (K:Œú/C x K) H Œ£)
          #:recur C]
      [(--> Cs D ‚Ñì) (mk--> ‚Ñì (-var-map ‚Üì Cs) (‚Üì D))]
      [(-->i Cs D) (mk-->i (map ‚Üì-dom Cs) (‚Üì-dom D))]
      [=> (-‚àÄ/c xs E*)
          (begin0 (Œû K H)
            (‚äî‚Çê! Œ£ K (R‚Üì (‚àÄ/C xs ‚ü¶E*‚üß (m‚Üì Œ° fvs)) Œ¶^)))
          #:where [fvs (fv E)]
          #:recur E*]
      [=> (-x/c x)
          (begin0 (Œû K H)
            (‚äî‚Çê! Œ£ K (R‚Üì (X/C (Œ°@ Œ° x)) Œ¶^)))]
      #;(with-cases-on e (œÅ H œÜ Œ£ ‚ü¶k‚üß)
          [(--> cs d ‚Ñì) #:same-as (mk--> ‚Ñì (-var-map ‚Üì cs) (‚Üì d))]
        [(-->i cs d) #:same-as (mk-->i (map (‚Üìdom l) cs) ((‚Üìdom l) d))]
        [(-struct/c ùíæ cs ‚Ñì)
         #:same-as
         (with-cases-on cs (œÅ H œÜ Œ£ ‚ü¶k‚üß)
           ['()
            (‚ü¶k‚üß (if (struct-defined? Œ£ œÜ) C blm) H œÜ Œ£)
            #:where [C (list {set (-St/C #t ùíæ '())})]]
           [(cons (:‚Üì ‚ü¶c‚üß) (:‚Üì* ‚ü¶c‚üßs))
            (if (struct-defined? Œ£ œÜ)
                (‚ü¶c‚üß œÅ H œÜ Œ£ (struct/c‚à∑ ‚Ñì ùíæ '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß))
                (‚ü¶k‚üß blm H œÜ Œ£))])
         #:where
         [Œ± (-Œ±->‚ü™Œ±‚ü´ ùíæ)]
         [blm (blm/simp l 'Œõ '(struct-defined?) (list {set (-ùíæ-name ùíæ)}) ‚Ñì)]
         [builtin-struct-tag? (match? ùíæ (== -ùíæ-cons) (== -ùíæ-box))]
         [struct-defined?
          (if builtin-struct-tag?
              (Œª _ #t)
              (Œª ([Œ£ : -Œ£] [œÜ : -œÜ]) (defined-at? Œ£ (-œÜ-cache œÜ) Œ±)))]]
        [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))]
        )
      )
    (‚Üì e)) 

  (define/memo (‚Üì‚Çì [x : Symbol] [‚Ñì‚Çì : ‚Ñì]) : ‚ü¶E‚üß
    ???
    #|
    (define -blm.undefined
      (blm/simp (‚Ñì-src ‚Ñì‚Çì) 'Œõ (list 'defined?) (list {set (format-symbol "~a_(~a)" 'undefined x)}) ‚Ñì‚Çì))
    (remember-e!
     (-x x ‚Ñì‚Çì)
     (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
       (for/union : (‚Ñò -œÇ) ([V-œÜ (in-list (œÉ@/cache Œ£ œÜ (œÅ@ œÅ x)))])
          (match-define (cons V^ œÜ*) V-œÜ)
          (define (on-ok) (‚ü¶k‚üß {list (set-remove V^ -undefined)} H œÜ* Œ£))
          (define (on-er) (‚ü¶k‚üß -blm.undefined H œÜ* Œ£))
          (if (‚àã V^ -undefined)
              (‚à™ (on-ok) (on-er))
              (on-ok)))))
    |#)

  (define (mk-V [V : V]) (mk-A (list {set V})))

  (define/memo (mk-A [A : A]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ K H Œ£)
      (begin0 (Œû K H)
        (‚äî‚Çê! Œ£ K (R‚Üì A Œ¶^)))))

  (define/memo (mk-->i [‚ü¶dom‚üßs : (Listof ‚ü¶dom‚üß)] [‚ü¶rng‚üß : ‚ü¶dom‚üß]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ K H Œ£)
      (define-values (Doms doms) (split-‚ü¶dom‚üßs Œ° (append ‚ü¶dom‚üßs (list ‚ü¶rng‚üß))))
      (match doms
        ['() (begin0 (Œû K H)
               (‚äî‚Çê! Œ£ K (R‚Üì (mk-=>i Œ£ H Doms) Œ¶^)))]
        [(cons (‚ü¶dom‚üß x #f ‚ü¶C‚üß ‚Ñì) ‚ü¶dom‚üßs)
         (‚ü¶C‚üß Œ° Œ¶^ (K:==>i Œ° Doms (cons x ‚Ñì) ‚ü¶dom‚üßs K) H Œ£)])))

  (define/memo (mk--> [‚Ñì : ‚Ñì] [‚ü¶dom‚üßs : (-maybe-var ‚ü¶E‚üß)] [‚ü¶rng‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
    (match ‚ü¶dom‚üßs
      ['()
       (Œª (Œ° Œ¶^ K H Œ£) (‚ü¶rng‚üß Œ° Œ¶^ (K:==>:Rng '() #f ‚Ñì K) H Œ£))]
      [(cons ‚ü¶C‚üß ‚ü¶C‚üßs)
       (Œª (Œ° Œ¶^ K H Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K:==>:Dom '() ‚ü¶C‚üßs #f ‚ü¶rng‚üß Œ° ‚Ñì K) H Œ£))]
      [(-var ‚ü¶C‚üßs ‚ü¶C·µ£‚üß)
       (match ‚ü¶C‚üßs
         ['()
          (Œª (Œ° Œ¶^ K H Œ£) (‚ü¶C·µ£‚üß Œ° Œ¶^ (K:==>:Rst '() ‚ü¶rng‚üß Œ° ‚Ñì K) H Œ£))]
         [(cons ‚ü¶C‚üß ‚ü¶C‚üßs)
          (Œª (Œ° Œ¶^ K H Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K:==>:Dom '() ‚ü¶C‚üßs ‚ü¶C·µ£‚üß ‚ü¶rng‚üß Œ° ‚Ñì K) H Œ£))])]))

  #| 

  (: ‚Üì‚Çë : -l -e ‚Üí -‚ü¶e‚üß)
  ;; Compile expression to computation
  (define (‚Üì‚Çë l e)
    
    (let ‚Üì : -‚ü¶e‚üß ([e : -e e])
         (: ‚Üì-bnd : (Pairof (Listof Symbol) -e) ‚Üí (Pairof (Listof Symbol) -‚ü¶e‚üß))
         (define (‚Üì-bnd bnd)
           (match-define (cons x e‚Çì) bnd)
           (cons x (‚Üì e‚Çì))) 
         
      )) 

   

  (define/memo (mk-let* [‚Ñì : ‚Ñì]
                        [‚ü¶bind‚üßs : (Listof (Pairof Symbol -‚ü¶e‚üß))]
                        [‚ü¶body‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (foldr
     (Œª ([‚ü¶bind‚üß : (Pairof Symbol -‚ü¶e‚üß)] [‚ü¶body‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
       (match-define (cons (app list x) ‚ü¶e‚üß‚Çì) ‚ü¶bind‚üß)
       (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
         (‚ü¶e‚üß‚Çì œÅ H œÜ Œ£ (let‚à∑ ‚Ñì x '() '() ‚ü¶body‚üß œÅ ‚ü¶k‚üß))))
     ‚ü¶body‚üß
     ‚ü¶bind‚üßs)) 

  (define/memo (mk-mon [ctx : -ctx] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶e‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ H œÜ Œ£ (mon.v‚à∑ ctx (cons ‚ü¶e‚üß œÅ) ‚ü¶k‚üß))))

  (define/memo (mk-app [‚Ñì : ‚Ñì] [‚ü¶f‚üß : -‚ü¶e‚üß] [‚ü¶x‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
    (remember-e!
     (-@ (recall/show ‚ü¶f‚üß) (map recall/show ‚ü¶x‚üßs) ‚Ñì) 
     (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶f‚üß œÅ H œÜ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß))))) 

  (define/memo (mk-fc [l : -l] [‚Ñì : ‚Ñì] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶v‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ H œÜ Œ£ (fc.v‚à∑ l ‚Ñì ‚ü¶v‚üß œÅ ‚ü¶k‚üß))))

  (define/memo (mk-wrapped-hash [C : -Hash/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [V : -V^]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß (list {set (-Hash/guard C Œ± ctx)}) H (alloc Œ£ œÜ Œ± V) Œ£)))

  (define/memo (mk-wrapped-set [C : -Set/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [V : -V^]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß (list {set (-Set/guard C Œ± ctx)}) H (alloc Œ£ œÜ Œ± V) Œ£))) 

  (define-syntax-parser with-cases-on
    [(_ e:expr (œÅ:id H:id œÜ:id Œ£:id ‚ü¶k‚üß:id) clauses ...)
     (define parse-clause
       (syntax-parser
         [[e-pat #:same-as expr
                 (~optional (~seq #:where [x d] ...)
                            #:defaults ([(x 1) null]
                                        [(d 1) null]))]
          #`[e-pat
             (match-define x d) ...
             expr]]
         [[e-pat rhs
                 (~optional (~seq #:where [x d] ...)
                            #:defaults ([(x 1) null]
                                        [(d 1) null]))]
          #'[e-pat
             (match-define x d) ...
             (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß) rhs)]]))
     #`(match e #,@(map parse-clause (syntax->list #'(clauses ...))))])
  |#

  (: split-‚ü¶dom‚üßs : Œ° (Listof ‚ü¶dom‚üß) ‚Üí (Values (Listof Dom) (Listof ‚ü¶dom‚üß)))
  (define (split-‚ü¶dom‚üßs Œ° ‚ü¶dom‚üßs)
    (let go ([Doms‚Üì : (Listof Dom) '()] [‚ü¶dom‚üßs : (Listof ‚ü¶dom‚üß) ‚ü¶dom‚üßs])
      (match ‚ü¶dom‚üßs
        ['() (values Doms‚Üì '())]
        [(cons (‚ü¶dom‚üß x ?dep ‚ü¶E‚üß ‚Ñì) ‚ü¶dom‚üßs*)
         (match ?dep
           [(? values) (go (cons (Dom x (Clo ?dep ‚ü¶E‚üß Œ°) ‚Ñì) Doms‚Üì) ‚ü¶dom‚üßs*)]
           [#f (values Doms‚Üì ‚ü¶dom‚üßs)])])))
  )
