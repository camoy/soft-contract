#lang typed/racket/base

(provide compile@)

(require racket/set
         racket/list
         racket/match
         typed/racket/unit
         set-extras
         "../utils/main.rkt"
         "../ast/main.rkt"
         "../runtime/signatures.rkt"
         "../proof-relation/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit compile@
  (import kont^ widening^ memoize^ proof-system^ local-prover^
          env^ sto^ pc^ val^ pretty-print^ for-gc^)
  (export compile^)

  ;; Compile program
  (define (‚Üì‚Çö [ms : (Listof -module)] [e : -e]) : -‚ü¶e‚üß
    (define ‚ü¶e‚üß (‚Üì‚Çë '‚Ä† e))
    (match (map ‚Üì‚Çò ms)
      ['() ‚ü¶e‚üß]
      [(cons ‚ü¶m‚üß ‚ü¶m‚üßs)
       (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
         (‚ü¶m‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ `(,@‚ü¶m‚üßs ,‚ü¶e‚üß) œÅ ‚ü¶k‚üß)))]))

  ;; Compile module
  (define (‚Üì‚Çò [m : -module]) : -‚ü¶e‚üß
    (match-define (-module l ds) m)

    (: ‚Üìpc : -provide-spec ‚Üí -‚ü¶e‚üß)
    (define ‚Üìpc
      (match-lambda
        ;; Wrap contract
        [(-p/c-item x c ‚Ñì)
         (define ‚ü¶c‚üß (‚Üì‚Çë l c))
         (define ùíæ (-ùíæ x l))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (dec‚à∑ ‚Ñì ùíæ ‚ü¶k‚üß)))]
        ;; export same as internal
        [(? symbol? x)
         (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l)))
         (define Œ±* (-Œ±->‚ü™Œ±‚ü´ (-Œ±.wrp (-ùíæ x l))))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (when (defined-at? Œ£ Œ±)
             (for ([V (in-set (œÉ@ Œ£ Œ±))])
               (œÉ‚äïV! Œ£ Œ±* V)))
           (‚ü¶k‚üß (+W (list -void)) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]))
    
    (: ‚Üìd : -module-level-form ‚Üí -‚ü¶e‚üß)
    (define (‚Üìd d)
      (match d
        [(-define-values xs e)
         (define Œ±s : (Listof ‚ü™Œ±‚ü´) (for/list ([x xs]) (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l))))
         (define ‚ü¶e‚üß (‚Üì‚Çë l e))
         (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
           (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (def‚à∑ l Œ±s ‚ü¶k‚üß)))]
        [(-provide specs)
         (match (map ‚Üìpc specs)
           ['() (‚Üì‚Çö·µ£‚Çò -void)]
           [(cons ‚ü¶spec‚üß ‚ü¶spec‚üßs)
            (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
              (‚ü¶spec‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶spec‚üßs œÅ ‚ü¶k‚üß)))])]
        [(? -e? e) (‚Üì‚Çë l e)]
        [_
         (log-warning "‚Üìd : ignore ~a~n" (show-module-level-form d))
         (‚Üì‚Çö·µ£‚Çò -void)]))

    (match (map ‚Üìd ds)
      ['() (‚Üì‚Çö·µ£‚Çò -void)]
      [(cons ‚ü¶d‚üß ‚ü¶d‚üßs)
       (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
         (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶d‚üßs œÅ ‚ü¶k‚üß)))]))

  ;; Compile expression to computation
  (define (‚Üì‚Çë [l : -l] [e : -e]) : -‚ü¶e‚üß
    (let ‚Üì ([e : -e e])
      (remember-e!
       e
       (match e
         [(-Œª xs e*)
          (define ‚ü¶e*‚üß (memoize-‚ü¶e‚üß (‚Üì e*)))
          (set-bound-vars! ‚ü¶e*‚üß (bv e*))
          (define fvs (fv e*))
          #;(printf "Warning: no longer canonicalize Œª-term~n")
          (define t (-Œª xs e*))
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (define œÅ* (m‚Üì œÅ fvs))
            (define Œì*
              (for*/set: : -Œì ([œÜ (in-set Œì)]
                               [fv‚ü¶œÜ‚üß (in-value (fv‚Çú œÜ))]
                               #:unless (set-empty? fv‚ü¶œÜ‚üß)
                               #:when (‚äÜ fv‚ü¶œÜ‚üß fvs))
                œÜ))
            (‚ü¶k‚üß (-W (list (-Clo xs ‚ü¶e*‚üß œÅ* Œì*)) t) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
         [(-case-Œª clauses)
          (define ‚ü¶clause‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
            (for/list ([clause clauses])
              (match-define (cons xs e) clause)
              (cons xs (‚Üì e))))
          (define t (-case-Œª clauses))
          #;(printf "Warning: no longer canonicalize Œª-term~n")
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-W (list (-Case-Clo ‚ü¶clause‚üßs œÅ Œì)) t) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
         [(? -prim? p) (‚Üì‚Çö·µ£‚Çò p)]
         [(-‚Ä¢)
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-W (list (+‚óè)) #f) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
         [(-x x ‚Ñì‚Çì) (‚Üì‚Çì l x ‚Ñì‚Çì)]
         [(-ref (and ùíæ (-ùíæ x l‚ÇÄ)) ‚Ñì·µ£)
          (define-values (Œ± modify-V)
            (cond
              ;; same-module referencing returns unwrapped version
              [(equal? l‚ÇÄ l)
               (values ùíæ (inst values -V))]
              ;; cross-module referencing returns wrapped version
              ;; when the caller is symbolic (HACK)
              ;; and supplies the negative monitoring context (HACK)
              [(symbol? l)
               (values (-Œ±.wrp ùíæ) (Œª ([V : -V]) (with-negative-party l V)))]
              ;; cross-mldule referencing returns abstracted wrapped version
              ;; when the caller is concrete (HACK)
              ;; and supplies the negative monitoring context (HACK)
              [else
               (values (-Œ±.wrp ùíæ) (Œª ([V : -V])
                                    (with-positive-party 'dummy+
                                      (with-negative-party l
                                        (approximate-under-contract V)))))]))
          
          (define ‚ü™Œ±‚ü´ (-Œ±->‚ü™Œ±‚ü´ Œ±))
          (define ?loc (hack:Œ±->loc ‚ü™Œ±‚ü´))

          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (unless (hash-has-key? (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´‚Çí‚Çö) ; HACK
              (œÉ‚äïV! Œ£ ‚ü™Œ±‚ü´‚Çí‚Çö (+‚óè)))
            (cond
              [?loc
               (define-values (Ws $*) ($@! Œ£ Œì ‚ü™Œ±‚ü´ $ ?loc ‚Ñì·µ£))
               (for/union : (‚Ñò -œÇ) ([W (in-set Ws)])
                          (‚ü¶k‚üß (W¬π->W W) $* Œì ‚ü™‚Ñã‚ü´ Œ£))]
              [else
               (for/union : (‚Ñò -œÇ) ([V (in-set (œÉ@ Œ£ ‚ü™Œ±‚ü´))])
                          (define V* (modify-V V))
                          (‚ü¶k‚üß (-W (list V*) ‚Ñì·µ£) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]))]
         
         [(-@ f xs ‚Ñì)
          (define ‚ü¶f‚üß  (‚Üì f))
          (define ‚ü¶x‚üßs (map ‚Üì xs))
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶f‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß)))]
         [(-if e‚ÇÄ e‚ÇÅ e‚ÇÇ)
          (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
          (define ‚ü¶e‚ÇÅ‚üß (‚Üì e‚ÇÅ))
          (define ‚ü¶e‚ÇÇ‚üß (‚Üì e‚ÇÇ))
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (if‚à∑ l ‚ü¶e‚ÇÅ‚üß ‚ü¶e‚ÇÇ‚üß œÅ ‚ü¶k‚üß)))]
         [(-wcm k v b) (error '‚Üì‚Çë "TODO: wcm")]
         [(-begin es)
          (match (map ‚Üì es)
            ['()
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶k‚üß (+W (list -void)) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
            [(cons ‚ü¶e‚üß ‚ü¶e‚üßs)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶e‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))])]
         [(-begin0 e‚ÇÄ es)
          (define ‚ü¶e‚ÇÄ‚üß (‚Üì e‚ÇÄ))
          (define ‚ü¶e‚üßs (map ‚Üì es))
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶e‚ÇÄ‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (bgn0.v‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß)))]
         [(-quote q)
          (cond [(Base? q) (‚Üì‚Çö·µ£‚Çò (-b q))]
                [else (error '‚Üì‚Çë "TODO: (quote ~a)" q)])]
         [(-let-values bnds e* ‚Ñì)
          (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
            (for/list ([bnd bnds])
              (match-define (cons xs e‚Çì‚Çõ) bnd)
              (cons xs (‚Üì e‚Çì‚Çõ))))
          (define ‚ü¶e*‚üß (‚Üì e*))
          (match ‚ü¶bnd‚üßs
            ['() ‚ü¶e*‚üß]
            [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
             (define bounds (append-map (inst car (Listof Symbol) -e) bnds))
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (define ‚ü¶k‚üß* (restore-$‚à∑ ($-extract $ bounds) ‚ü¶k‚üß))
               (‚ü¶e‚üß‚Çì‚Çõ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (let‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* '() ‚ü¶e*‚üß œÅ ‚ü¶k‚üß*)))])]
         [(-letrec-values bnds e* ‚Ñì)
          (define ‚ü¶bnd‚üßs : (Listof (Pairof (Listof Symbol) -‚ü¶e‚üß))
            (for/list ([bnd bnds])
              (match-define (cons xs e‚Çì‚Çõ) bnd)
              (cons xs (‚Üì e‚Çì‚Çõ))))
          (define ‚ü¶e*‚üß (‚Üì e*))
          (match ‚ü¶bnd‚üßs
            ['() ‚ü¶e*‚üß]
            [(cons (cons xs ‚ü¶e‚üß‚Çì‚Çõ) ‚ü¶bnd‚üßs*)
             (define bounds (append-map (inst car (Listof Symbol) -e) bnds))
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (define œÅ* ; with side effect widening store
                 (for*/fold ([œÅ  : -œÅ  œÅ])
                            ([‚ü¶bnd‚üß ‚ü¶bnd‚üßs]
                             [xs (in-value (car ‚ü¶bnd‚üß))]
                             [x xs])
                   (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x x ‚ü™‚Ñã‚ü´)))
                   (œÉ‚äïV! Œ£ Œ± -undefined)
                   (œÅ+ œÅ x Œ±)))
               (define ‚ü¶k‚üß* (restore-$‚à∑ ($-extract $ bounds) ‚ü¶k‚üß))
               (‚ü¶e‚üß‚Çì‚Çõ œÅ* $ Œì ‚ü™‚Ñã‚ü´ Œ£ (letrec‚à∑ ‚Ñì xs ‚ü¶bnd‚üßs* ‚ü¶e*‚üß œÅ* ‚ü¶k‚üß*)))])]
         [(-set! x e*)
          (define ‚ü¶e*‚üß (‚Üì e*))
          (cond
            [(symbol? x)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ (œÅ@ œÅ x) ‚ü¶k‚üß)))]
            [else
             (define Œ± (-Œ±->‚ü™Œ±‚ü´ x))
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶e*‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (set!‚à∑ Œ± ‚ü¶k‚üß)))])]
         [(-error msg ‚Ñì)
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-blm (‚Ñì-src ‚Ñì) 'Œõ '() (list (-b msg)) ‚Ñì) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
         [(-Œº/c x c)
          (define ‚ü¶c‚üß (‚Üì c))
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (Œº/c‚à∑ x ‚ü¶k‚üß)))]
         [(--> cs d ‚Ñì)
          (define ‚ü¶d‚üß (‚Üì d))
          (match (-var-map ‚Üì cs)
            ['()
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶d‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.rng‚à∑ '() #f ‚Ñì ‚ü¶k‚üß)))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs #f ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
            [(-var ‚ü¶c‚üßs ‚ü¶c‚üß·µ£)
             (match ‚ü¶c‚üßs
               ['()
                (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
                  (‚ü¶c‚üß·µ£ œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.rst‚à∑ '() ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))]
               [(cons ‚ü¶c‚üß ‚ü¶c‚üßs*)
                (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
                  (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs* ‚ü¶c‚üß·µ£ ‚ü¶d‚üß œÅ ‚Ñì ‚ü¶k‚üß)))])])]
         [(-->i cs (and mk-d (-Œª xs d)) ‚Ñì)
          (define ‚ü¶d‚üß (‚Üì d))
          (match (map ‚Üì cs)
            ['()
             (define c (-?->i '() mk-d))
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
               (define-values (G g) (mk-=>i! Œ£ Œì ‚ü™‚Ñã‚ü´ '() Mk-D mk-d ‚Ñì))
               (‚ü¶k‚üß (-W (list G) g) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (define Mk-D (-Clo xs ‚ü¶d‚üß œÅ Œì))
               (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (-->i‚à∑ '() ‚ü¶c‚üßs œÅ Mk-D mk-d ‚Ñì ‚ü¶k‚üß)))])]
         [(-case-> clauses ‚Ñì)
          (define ‚ü¶clause‚üßs : (Listof (Listof -‚ü¶e‚üß))
            (for/list ([clause clauses])
              (match-define (cons cs d) clause)
              `(,@(map ‚Üì cs) ,(‚Üì d))))
          (match ‚ü¶clause‚üßs
            ['()
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶k‚üß (-W (list (-Case-> '() ‚Ñì)) #f) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
            [(cons (cons ‚ü¶c‚üß ‚ü¶c‚üßs) ‚ü¶clause‚üßs*)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (case->‚à∑ ‚Ñì '() '() ‚ü¶c‚üßs ‚ü¶clause‚üßs* œÅ ‚ü¶k‚üß)))])]
         [(-x/c x)
          (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
            (‚ü¶k‚üß (-W (list (-x/C (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x/c x)))) #f) $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
         [(-struct/c ùíæ cs ‚Ñì)
          (define Œ± (-Œ±->‚ü™Œ±‚ü´ ùíæ))
          (define blm (-blm l 'Œõ '(struct-defined?) (list (-ùíæ-name ùíæ)) ‚Ñì))
          (define builtin-struct-tag? (match? ùíæ (== -ùíæ-cons) (== -ùíæ-box)))
          (match (map ‚Üì cs)
            ['()
             (define W (-W (list (-St/C #t ùíæ '())) (-t.@ (-st/c.mk ùíæ) '())))
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (define A (if (or builtin-struct-tag? (defined-at? Œ£ Œ±)) W blm))
               (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£))]
            [(cons ‚ü¶c‚üß ‚ü¶c‚üßs)
             (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
               (if (or builtin-struct-tag? (defined-at? Œ£ Œ±))
                   (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (struct/c‚à∑ ‚Ñì ùíæ '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß))
                   (‚ü¶k‚üß blm $ Œì ‚ü™‚Ñã‚ü´ Œ£)))])]
         [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))])))

    )

  (define/memo (‚Üì‚Çì [l : -l] [x : Symbol] [‚Ñì‚Çì : ‚Ñì]) : -‚ü¶e‚üß
    (define -blm.undefined
      (-blm l 'Œõ (list 'defined?) (list (format-symbol "~a_(~a)" 'undefined x)) ‚Ñì‚Çì))
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (define Œ± (œÅ@ œÅ x))
      (define-values (Ws $*) ($@! Œ£ Œì Œ± $ x ‚Ñì‚Çì))
      (for/union : (‚Ñò -œÇ) ([W (in-set Ws)])
        (define A
          (match W
            [(-W¬π (-b (== undefined)) _) -blm.undefined]
            [(-W¬π V                   t) (-W (list V) t)]))
        (‚ü¶k‚üß A $* Œì ‚ü™‚Ñã‚ü´ Œ£))))

  (define (‚Üì‚Çö·µ£‚Çò [p : -prim]) (ret-W¬π p p))

  (define/memo (ret-W¬π [V : -V] [t : -?t]) : -‚ü¶e‚üß
    (define W (-W (list V) t))
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß W $ Œì ‚ü™‚Ñã‚ü´ Œ£)))

  (define/memo (mk-mon [l¬≥ : -l¬≥] [‚Ñì : ‚Ñì] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶e‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (mon.v‚à∑ l¬≥ ‚Ñì (cons ‚ü¶e‚üß œÅ) ‚ü¶k‚üß))))

  (define/memo (mk-app [‚Ñì : ‚Ñì] [‚ü¶f‚üß : -‚ü¶e‚üß] [‚ü¶x‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶f‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß))))

  (define/memo (mk-rt [A : (U -A -W¬π)]) : -‚ü¶e‚üß
    (match A
      [(-W¬π V v) (mk-rt (-W (list V) v))]
      [(? -A?) (Œª (_ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß) (‚ü¶k‚üß A $ Œì ‚ü™‚Ñã‚ü´ Œ£))]))

  (define/memo (mk-fc [l : -l] [‚Ñì : ‚Ñì] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶v‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ (fc.v‚à∑ l ‚Ñì ‚ü¶v‚üß œÅ ‚ü¶k‚üß))))

  (define/memo (mk-wrapped-hash [C : -Hash/C] [l¬≥ : -l¬≥] [Œ± : ‚ü™Œ±‚ü´] [W : -W¬π]) : -‚ü¶e‚üß
    (Œª (œÅ $ Œì ‚ü™‚Ñã‚ü´ Œ£ ‚ü¶k‚üß)
      (match-define (-W¬π V t) W)
      (œÉ‚äïV! Œ£ Œ± V)
      (‚ü¶k‚üß (-W (list (-Hash/guard C Œ± l¬≥)) t) $ Œì ‚ü™‚Ñã‚ü´ Œ£)))
  )

