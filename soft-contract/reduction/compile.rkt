#lang typed/racket/base

(provide compile@)

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         (only-in racket/function const)
         racket/set
         racket/list
         racket/match
         typed/racket/unit
         syntax/parse/define
         set-extras
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../proof-relation/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit compile@
  (import meta-functions^ ast-pretty-print^
          kont^ proof-system^
          env^ sto^ path^ val^ pretty-print^ for-gc^)
  (export compile^)

  (: ‚Üì‚Çö : (Listof -module) -e ‚Üí -‚ü¶e‚üß)
  ;; Compile program
  (define (‚Üì‚Çö ms e)
    (with-cases-on ms (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      ['() #:reduce (‚Üì‚Çë '‚Ä† e)]
      [(cons m ms)
       (‚ü¶m‚üß œÅ H œÜ Œ£ (bgn‚à∑ `(,@‚ü¶m‚üßs ,‚ü¶e‚üß) œÅ ‚ü¶k‚üß))
       #:where
       [‚ü¶m‚üß (‚Üì‚Çò m)]
       [‚ü¶m‚üßs (map ‚Üì‚Çò ms)]
       [‚ü¶e‚üß (‚Üì‚Çë '‚Ä† e)]]))

  (: ‚Üì‚Çò : -module ‚Üí -‚ü¶e‚üß)
  ;; Compile module
  (define (‚Üì‚Çò m)
    (match-define (-module l ds) m)

    (: ‚Üìpc : -provide-spec ‚Üí -‚ü¶e‚üß)
    (define (‚Üìpc spec)
      (with-cases-on spec (œÅ H œÜ Œ£ ‚ü¶k‚üß)
        ;; Wrap contract
        [(-p/c-item x c ‚Ñì)
         (‚ü¶c‚üß œÅ H œÜ Œ£ (dec‚à∑ ‚Ñì ùíæ ‚ü¶k‚üß))
         #:where
         [‚ü¶c‚üß (‚Üì‚Çë l c)]
         [ùíæ (-ùíæ x l)]]
        ;; Export same as internal
        [(? symbol? x)
         (begin (assert (defined-at? Œ£ (-œÜ-cache œÜ) Œ±))
                (‚ü¶k‚üß A H (alloc Œ£ œÜ Œ±* (œÉ@ Œ£ (-œÜ-cache œÜ) Œ±)) Œ£))
         #:where
         [Œ±  (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l))]
         [Œ±* (-Œ±->‚ü™Œ±‚ü´ (-Œ±.wrp (-ùíæ x l)))]
         [A  (list {set -void})]]))
    
    (: ‚Üìd : -module-level-form ‚Üí -‚ü¶e‚üß)
    (define (‚Üìd d)
      (with-cases-on d (œÅ H œÜ Œ£ ‚ü¶k‚üß)
        [(-define-values xs e)
         (‚ü¶e‚üß œÅ H œÜ Œ£ (def‚à∑ l Œ±s ‚ü¶k‚üß))
         #:where
         [Œ±s (for/list : (Listof ‚ü™Œ±‚ü´) ([x xs]) (-Œ±->‚ü™Œ±‚ü´ (-ùíæ x l)))]
         [‚ü¶e‚üß (‚Üì‚Çë l e)]]
        [(-provide '()) #:reduce (mk-V -void)]
        [(-provide (cons spec specs))
         (‚ü¶spec‚üß œÅ H œÜ Œ£ (bgn‚à∑ ‚ü¶spec‚üßs œÅ ‚ü¶k‚üß))
         #:where
         [‚ü¶spec‚üß (‚Üìpc spec)]
         [‚ü¶spec‚üßs (map ‚Üìpc specs)]]
        [(? -e? e) #:reduce (‚Üì‚Çë l e)]
        [_ #:reduce (begin0 (mk-V -void)
                      (log-warning "‚Üìd: ignore ~a~n" (show-module-level-form d)))]))

    (with-cases-on ds (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      ['() #:reduce (mk-V -void)]
      [(cons d ds)
       (‚ü¶d‚üß œÅ H œÜ Œ£ (bgn‚à∑ ‚ü¶d‚üßs œÅ ‚ü¶k‚üß))
       #:where
       [‚ü¶d‚üß (‚Üìd d)]
       [‚ü¶d‚üßs (map ‚Üìd ds)]]))

  (: ‚Üì‚Çë : -l -e ‚Üí -‚ü¶e‚üß)
  ;; Compile expression to computation
  (define (‚Üì‚Çë l e)
    
    (let ‚Üì : -‚ü¶e‚üß ([e : -e e])
         (: ‚Üì-bnd : (Pairof (Listof Symbol) -e) ‚Üí (Pairof (Listof Symbol) -‚ü¶e‚üß))
         (define (‚Üì-bnd bnd)
           (match-define (cons x e‚Çì) bnd)
           (cons x (‚Üì e‚Çì)))
         (: ‚Üì* : (Listof -e) ‚Üí (Listof -‚ü¶e‚üß))
         (define (‚Üì* es) (map ‚Üì es))
         (define-match-expander :‚Üì  (syntax-rules () [(_ e ) (app ‚Üì  e )]))
         (define-match-expander :‚Üì* (syntax-rules () [(_ es) (app ‚Üì* es)]))
         
      (remember-e!
       e
       (with-cases-on e (œÅ H œÜ Œ£ ‚ü¶k‚üß)
         [(and lam (-Œª xs (:‚Üì ‚ü¶e*‚üß)))
          (‚ü¶k‚üß (list {set (-Clo xs ‚ü¶e*‚üß (m‚Üì œÅ fvs))}) H œÜ Œ£)
          #:where [fvs (fv lam)]]
         [(? -prim? p) #:reduce (mk-V p)]
         [(-‚Ä¢) #:reduce (mk-V (fresh-sym!))]
         [(-x (? symbol? x) ‚Ñì‚Çì) #:reduce (‚Üì‚Çì l x ‚Ñì‚Çì)]
         [(-x (and ùíæ (-ùíæ x l‚ÇÄ)) _)
          (let* ([œÜ* (if (hash-has-key? (-Œ£-œÉ Œ£) ‚ü™Œ±‚ü´‚Çí‚Çö)
                         (alloc Œ£ œÜ ‚ü™Œ±‚ü´‚Çí‚Çö {set (-‚óè ‚àÖ)})
                         œÜ)]
                 [V^ (map/set modify-V (œÉ@ Œ£ (-œÜ-cache œÜ*) Œ±))])
            (‚ü¶k‚üß (list V^) H œÜ* Œ£))
          #:where
          [Œ± (-Œ±->‚ü™Œ±‚ü´ (if (equal? l‚ÇÄ l) ùíæ (-Œ±.wrp ùíæ)))]
          [modify-V
           (ann (cond
                  [(equal? l‚ÇÄ l) values]
                  [(symbol? l) (Œª (V) (with-negative-party l V))]
                  [else
                   (Œª (V)
                     (with-positive-party 'dummy+
                       (with-negative-party l
                         (match V
                           [(-Ar C _ l¬≥)
                            (-Ar C (-Œ±->‚ü™Œ±‚ü´ (-Œ±.imm (-Fn‚óè (guard-arity C) '‚Ä†))) l¬≥)]
                           [(-St* C _ l¬≥)
                            (-St* C ‚ü™Œ±‚ü´‚Çí‚Çö l¬≥)]
                           [(-Vector/guard C _ l¬≥)
                            (-Vector/guard C ‚ü™Œ±‚ü´‚Çí‚Çö l¬≥)]
                           [_ V]))))])
                (-V ‚Üí -V))]]
         [(-@ (:‚Üì ‚ü¶f‚üß) (:‚Üì* ‚ü¶x‚üßs) ‚Ñì)
          (‚ü¶f‚üß œÅ H œÜ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß))]
         [(-if (:‚Üì ‚ü¶e‚ÇÄ‚üß) (:‚Üì ‚ü¶e‚ÇÅ‚üß) (:‚Üì ‚ü¶e‚ÇÇ‚üß))
          (‚ü¶e‚ÇÄ‚üß œÅ H œÜ Œ£ (if‚à∑ l ‚ü¶e‚ÇÅ‚üß ‚ü¶e‚ÇÇ‚üß œÅ ‚ü¶k‚üß))]
         [(-wcm k v b) #:reduce (error '‚Üì‚Çë "TODO: wcm")]
         [(-begin '()) #:reduce (mk-V -void)]
         [(-begin (cons (:‚Üì ‚ü¶e‚üß) (:‚Üì* ‚ü¶e‚üßs)))
          (‚ü¶e‚üß œÅ H œÜ Œ£ (bgn‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß))]
         [(-begin0 (:‚Üì ‚ü¶e‚ÇÄ‚üß) (:‚Üì* ‚ü¶e‚üßs))
          (‚ü¶e‚ÇÄ‚üß œÅ H œÜ Œ£ (bgn0.v‚à∑ ‚ü¶e‚üßs œÅ ‚ü¶k‚üß))]
         [(-quote (? Base? q)) #:reduce (mk-V (-b q))]
         [(-quote q) (error '‚Üì‚Çë "TODO: (quote ~a)" q)]
         [(-let-values '() e* ‚Ñì) #:reduce (‚Üì e*)]
         [(-let-values bnds (:‚Üì ‚ü¶e*‚üß) ‚Ñì)
          (‚ü¶e‚üß‚Çì œÅ H œÜ Œ£ (let‚à∑ ‚Ñì x ‚ü¶bnd‚üßs '() ‚ü¶e*‚üß œÅ ‚ü¶k‚üß))
          #:where [(cons (cons x ‚ü¶e‚üß‚Çì) ‚ü¶bnd‚üßs) (map ‚Üì-bnd bnds)]]
         [(-letrec-values '() e* ‚Ñì) #:reduce (‚Üì e*)]
         [(-letrec-values bnds (:‚Üì ‚ü¶e*‚üß) ‚Ñì)
          (let-values ([(œÅ* œÜ*) (init-undefined Œ£ H œÅ œÜ)])
            (‚ü¶e‚üß‚Çì œÅ* H œÜ* Œ£ (letrec‚à∑ ‚Ñì x ‚ü¶bnd‚üßs* ‚ü¶e*‚üß œÅ* ‚ü¶k‚üß)))
          #:where
          [(cons (cons x ‚ü¶e‚üß‚Çì) ‚ü¶bnd‚üßs*) (map ‚Üì-bnd bnds)]
          [init-undefined
           (Œª ([Œ£ : -Œ£] [H : -H] [œÅ : -œÅ] [œÜ : -œÜ])
             (for*/fold ([œÅ : -œÅ œÅ] [œÜ : -œÜ œÜ])
                        ([bnd (in-list bnds)] [x (in-list (car bnd))])
               (define Œ± (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x x H)))
               (values (œÅ+ œÅ x Œ±) (alloc Œ£ œÜ Œ± {set -undefined}))))]]
         [(-set! x (:‚Üì ‚ü¶e*‚üß))
          (‚ü¶e*‚üß œÅ H œÜ Œ£ (set!‚à∑ (get-addr œÅ) ‚ü¶k‚üß))
          #:where
          [get-addr
           (if (symbol? x)
               (Œª ([œÅ : -œÅ]) (œÅ@ œÅ x))
               (const (-Œ±->‚ü™Œ±‚ü´ x)))]]
         [(-error msg ‚Ñì) #:reduce (mk-A (blm/simp (‚Ñì-src ‚Ñì) 'Œõ '(not-reached) (list {set (-b msg)}) ‚Ñì))]
         [(-Œº/c x (:‚Üì ‚ü¶c‚üß))
          (‚ü¶c‚üß (œÅ+ œÅ x (-Œ±->‚ü™Œ±‚ü´ (-Œ±.x/c x H))) H œÜ Œ£ (Œº/c‚à∑ x ‚ü¶k‚üß))]
         [(--> cs d ‚Ñì) #:reduce (mk--> ‚Ñì (-var-map ‚Üì cs) (‚Üì d))]
         [(-->i cs d) #:reduce (mk-->i (map (‚Üìdom l) cs) ((‚Üìdom l) d))]
         [(-‚àÄ/c xs (and e* (:‚Üì ‚ü¶e*‚üß)))
          (‚ü¶k‚üß (list {set (-‚àÄ/C xs ‚ü¶e*‚üß (m‚Üì œÅ fvs))}) H œÜ Œ£)
          #:where
          [fvs (fv e*)]]
         [(-x/c x)
          (‚ü¶k‚üß (list {set (-x/C (œÅ@ œÅ x))}) H œÜ Œ£)]
         [(-struct/c ùíæ cs ‚Ñì)
          #:reduce
          (with-cases-on cs (œÅ H œÜ Œ£ ‚ü¶k‚üß)
            ['()
             (‚ü¶k‚üß (if (struct-defined? Œ£ œÜ) C blm) H œÜ Œ£)
             #:where [C (list {set (-St/C #t ùíæ '())})]]
            [(cons (:‚Üì ‚ü¶c‚üß) (:‚Üì* ‚ü¶c‚üßs))
             (if (struct-defined? Œ£ œÜ)
                 (‚ü¶c‚üß œÅ H œÜ Œ£ (struct/c‚à∑ ‚Ñì ùíæ '() ‚ü¶c‚üßs œÅ ‚ü¶k‚üß))
                 (‚ü¶k‚üß blm H œÜ Œ£))])
          #:where
          [Œ± (-Œ±->‚ü™Œ±‚ü´ ùíæ)]
          [blm (blm/simp l 'Œõ '(struct-defined?) (list {set (-ùíæ-name ùíæ)}) ‚Ñì)]
          [builtin-struct-tag? (match? ùíæ (== -ùíæ-cons) (== -ùíæ-box))]
          [struct-defined?
           (if builtin-struct-tag?
               (Œª _ #t)
               (Œª ([Œ£ : -Œ£] [œÜ : -œÜ]) (defined-at? Œ£ (-œÜ-cache œÜ) Œ±)))]]
         [_ (error '‚Üì‚Çë "unhandled: ~a" (show-e e))]
         ))))

  (: ‚Üìdom : -l ‚Üí -dom ‚Üí -‚ü¶dom‚üß)
  (define ((‚Üìdom l) dom)
    (match-define (-dom xs ?dep e ‚Ñì) dom)
    (-‚ü¶dom‚üß xs ?dep (‚Üì‚Çë l e) ‚Ñì))

  (define/memo (mk-->i [‚ü¶dom‚üßs : (Listof -‚ü¶dom‚üß)] [‚ü¶rng‚üß : -‚ü¶dom‚üß]) : -‚ü¶e‚üß
    (remember-e!
     (string->symbol (format "~a" `(->i ,(map show-‚ü¶dom‚üß ‚ü¶dom‚üßs) ,(show-‚ü¶dom‚üß ‚ü¶rng‚üß))))
     (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (define-values (Doms doms) (split-‚ü¶dom‚üßs œÅ (append ‚ü¶dom‚üßs (list ‚ü¶rng‚üß))))
      (match doms
        ['()
         (‚ü¶k‚üß (list {set (mk-=>i Œ£ H œÜ Doms)}) H œÜ Œ£)]
        [(cons (-‚ü¶dom‚üß x #f ‚ü¶c‚üß ‚Ñì) ‚ü¶dom‚üßs)
         (‚ü¶c‚üß œÅ H œÜ Œ£ (-->i‚à∑ œÅ Doms (cons x ‚Ñì) ‚ü¶dom‚üßs ‚ü¶k‚üß))])))
    )

  (define/memo (mk--> [‚Ñì : ‚Ñì] [‚ü¶dom‚üßs : (-maybe-var -‚ü¶e‚üß)] [‚ü¶rng‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (remember-e!
     (string->symbol (format "~a" `(-> ‚Ä¶ ,(show-‚ü¶e‚üß ‚ü¶rng‚üß))))
     (with-cases-on ‚ü¶dom‚üßs (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      ['()            (‚ü¶rng‚üß œÅ H œÜ Œ£ (-->.rng‚à∑ '() #f ‚Ñì ‚ü¶k‚üß))]
      [(cons ‚ü¶c‚üß ‚ü¶c‚üßs) (‚ü¶c‚üß   œÅ H œÜ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs #f ‚ü¶rng‚üß œÅ ‚Ñì ‚ü¶k‚üß))]
      [(-var ‚ü¶c‚üßs ‚ü¶c·µ£‚üß)
       #:reduce
       (with-cases-on ‚ü¶c‚üßs (œÅ H œÜ Œ£ ‚ü¶k‚üß)
         ['()            (‚ü¶c·µ£‚üß œÅ H œÜ Œ£ (-->.rst‚à∑ '() ‚ü¶rng‚üß œÅ ‚Ñì ‚ü¶k‚üß))]
         [(cons ‚ü¶c‚üß ‚ü¶c‚üßs) (‚ü¶c‚üß  œÅ H œÜ Œ£ (-->.dom‚à∑ '() ‚ü¶c‚üßs ‚ü¶c·µ£‚üß ‚ü¶rng‚üß œÅ ‚Ñì ‚ü¶k‚üß))])])))

  (define (mk-V [V : -V])
    (define ans (mk-A (list {set V})))
    (if (-e? V) (remember-e! V ans) ans))

  (define/memo (mk-let* [‚Ñì : ‚Ñì]
                        [‚ü¶bind‚üßs : (Listof (Pairof Symbol -‚ü¶e‚üß))]
                        [‚ü¶body‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (foldr
     (Œª ([‚ü¶bind‚üß : (Pairof Symbol -‚ü¶e‚üß)] [‚ü¶body‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
       (match-define (cons (app list x) ‚ü¶e‚üß‚Çì) ‚ü¶bind‚üß)
       (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
         (‚ü¶e‚üß‚Çì œÅ H œÜ Œ£ (let‚à∑ ‚Ñì x '() '() ‚ü¶body‚üß œÅ ‚ü¶k‚üß))))
     ‚ü¶body‚üß
     ‚ü¶bind‚üßs))

  (define/memo (‚Üì‚Çì [l : -l] [x : Symbol] [‚Ñì‚Çì : ‚Ñì]) : -‚ü¶e‚üß
    (define -blm.undefined
      (blm/simp l 'Œõ (list 'defined?) (list {set (format-symbol "~a_(~a)" 'undefined x)}) ‚Ñì‚Çì))
    (remember-e!
     (-x x ‚Ñì‚Çì)
     (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
       (for/union : (‚Ñò -œÇ) ([V-œÜ (in-list (œÉ@/cache Œ£ œÜ (œÅ@ œÅ x)))])
          (match-define (cons V^ œÜ*) V-œÜ)
          (define (on-ok) (‚ü¶k‚üß {list (set-remove V^ -undefined)} H œÜ* Œ£))
          (define (on-er) (‚ü¶k‚üß -blm.undefined H œÜ* Œ£))
          (if (‚àã V^ -undefined)
              (‚à™ (on-ok) (on-er))
              (on-ok))))))

  (define/memo (mk-mon [ctx : -ctx] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶e‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ H œÜ Œ£ (mon.v‚à∑ ctx (cons ‚ü¶e‚üß œÅ) ‚ü¶k‚üß))))

  (define/memo (mk-app [‚Ñì : ‚Ñì] [‚ü¶f‚üß : -‚ü¶e‚üß] [‚ü¶x‚üßs : (Listof -‚ü¶e‚üß)]) : -‚ü¶e‚üß
    (remember-e!
     (string->symbol (format "~a" (cons (show-‚ü¶e‚üß ‚ü¶f‚üß) (map show-‚ü¶e‚üß ‚ü¶x‚üßs))))
     (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶f‚üß œÅ H œÜ Œ£ (ap‚à∑ '() ‚ü¶x‚üßs œÅ ‚Ñì ‚ü¶k‚üß)))))

  (define/memo (mk-A [A : -A]) : -‚ü¶e‚üß
    (Œª (_ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß A H œÜ Œ£)))

  (define/memo (mk-fc [l : -l] [‚Ñì : ‚Ñì] [‚ü¶c‚üß : -‚ü¶e‚üß] [‚ü¶v‚üß : -‚ü¶e‚üß]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶c‚üß œÅ H œÜ Œ£ (fc.v‚à∑ l ‚Ñì ‚ü¶v‚üß œÅ ‚ü¶k‚üß))))

  (define/memo (mk-wrapped-hash [C : -Hash/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [V : -V^]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß (list {set (-Hash/guard C Œ± ctx)}) H (alloc Œ£ œÜ Œ± V) Œ£)))

  (define/memo (mk-wrapped-set [C : -Set/C] [ctx : -ctx] [Œ± : ‚ü™Œ±‚ü´] [V : -V^]) : -‚ü¶e‚üß
    (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß)
      (‚ü¶k‚üß (list {set (-Set/guard C Œ± ctx)}) H (alloc Œ£ œÜ Œ± V) Œ£)))

  (: split-‚ü¶dom‚üßs : -œÅ (Listof -‚ü¶dom‚üß) ‚Üí (Values (Listof -Dom) (Listof -‚ü¶dom‚üß)))
  (define (split-‚ü¶dom‚üßs œÅ ‚ü¶dom‚üßs)
    (let go ([Doms‚Üì : (Listof -Dom) '()] [‚ü¶dom‚üßs : (Listof -‚ü¶dom‚üß) ‚ü¶dom‚üßs])
      (match ‚ü¶dom‚üßs
        ['() (values Doms‚Üì '())]
        [(cons ‚ü¶dom‚üß ‚ü¶dom‚üßs*)
         (match-define (-‚ü¶dom‚üß x ?dep ‚ü¶e‚üß ‚Ñì) ‚ü¶dom‚üß)
         (match ?dep
           [(? values) (go (cons (-Dom x (-Clo ?dep ‚ü¶e‚üß œÅ) ‚Ñì) Doms‚Üì) ‚ü¶dom‚üßs*)]
           [#f (values Doms‚Üì ‚ü¶dom‚üßs)])])))

  (define-syntax-parser with-cases-on
    [(_ e:expr (œÅ:id H:id œÜ:id Œ£:id ‚ü¶k‚üß:id) clauses ...)
     (define parse-clause
       (syntax-parser
         [[e-pat #:reduce expr
                 (~optional (~seq #:where [x d] ...)
                            #:defaults ([(x 1) null]
                                        [(d 1) null]))]
          #`[e-pat
             (match-define x d) ...
             expr]]
         [[e-pat rhs
                 (~optional (~seq #:where [x d] ...)
                            #:defaults ([(x 1) null]
                                        [(d 1) null]))]
          #'[e-pat
             (match-define x d) ...
             (Œª (œÅ H œÜ Œ£ ‚ü¶k‚üß) rhs)]]))
     #`(match e #,@(map parse-clause (syntax->list #'(clauses ...))))])
  )
