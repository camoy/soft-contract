#lang typed/racket/base

(provide compile@)

(require (only-in racket/function const)
         racket/set
         racket/list
         racket/match
         typed/racket/unit
         set-extras
         unreachable
         abstract-compilation
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "signatures.rkt"
         )

(define-unit compile@
  (import meta-functions^ static-info^
          env^ val^ sto^ evl^
          step^ alloc^)
  (export compile^)

  (: ‚Üì‚Çö : -prog ‚Üí ‚ü¶E‚üß)
  ;; Compile program
  (define (‚Üì‚Çö p)
    (match (-prog-_0 p)
      ['() (mk-W '())]
      [(cons m ms)
       (define ‚ü¶m‚üß (‚Üì‚Çò m))
       (define ‚ü¶m‚üßs (map ‚Üì‚Çò ms))
       (cond [(null? ‚ü¶m‚üßs) ‚ü¶m‚üß]
             [else (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶m‚üß Œ° Œ¶^ (K+ (F:Bgn ‚ü¶m‚üßs Œ°) Œû) Œ£))])]))

  (: ‚Üì‚Çò : -module ‚Üí ‚ü¶E‚üß)
  ;; Compile module
  (define (‚Üì‚Çò m)
    (match-define (-module l ds) m)

    (: ‚Üìpc : -provide-spec ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üìpc spec) Œ° Œ¶^ Œû Œ£)
      ;; Wrap contract
      [=> (-p/c-item x C ‚Ñì)
          (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:Dec ‚Ñì ùíæ) Œû) Œ£)
          #:where
          [ùíæ (-ùíæ x l)]
          [‚ü¶C‚üß (‚Üì‚Çë l C)]]
      ;; Export same as internal
      [=> (? symbol? x)
          (begin (assert (defined-at? Œ£ Œ±))
                 (‚äî·µ•! Œ£ Œ±* (Œ£·µ•@ Œ£ Œ±))
                 (ret! (R '() Œ¶^) Œû Œ£))
       #:where
       [Œ±  (mk-Œ± (-Œ±:top (-ùíæ x l)))]
       [Œ±* (mk-Œ± (-Œ±:wrp (-ùíæ x l)))]])
    
    (: ‚Üìd : -module-level-form ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üìd d) Œ° Œ¶^ Œû Œ£)
      [=> (-define-values xs E)
          (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Def l Œ±s) Œû) Œ£)
          #:where
          [Œ±s (for/list : (Listof Œ±) ([x (in-list xs)]) (mk-Œ± (-Œ±:top (-ùíæ x l))))]
          [‚ü¶E‚üß (‚Üì‚Çë l E)]]
      [(-provide '()) (mk-W '())]
      [(-provide (list spec)) (‚Üìpc spec)]
      [=> (-provide (cons spec specs))
          (‚ü¶spec‚üß Œ° Œ¶^ (K+ (F:Bgn (assert ‚ü¶spec‚üßs pair?) Œ°) Œû) Œ£)
          #:where
          [‚ü¶spec‚üß (‚Üìpc spec)]
          [‚ü¶spec‚üßs (map ‚Üìpc specs)]]
      [(? -e? E) (‚Üì‚Çë l E)]
      [_ (begin0 (mk-W '())
           (log-warning "‚Üìd: ignore ~a~n" d))])

    (match ds
      ['() (mk-W '())]
      [(cons D Ds)
       (define ‚ü¶D‚üß (‚Üìd D))
       (define ‚ü¶D‚üßs (map ‚Üìd Ds))
       (cond [(null? ‚ü¶D‚üßs) ‚ü¶D‚üß]
             [else (Œª (Œ° Œ¶^ Œû Œ£)
                     (‚ü¶D‚üß Œ° Œ¶^ (K+ (F:Bgn ‚ü¶D‚üßs Œ°) Œû) Œ£))])]))

  (: ‚Üì‚Çë : -l -e ‚Üí ‚ü¶E‚üß)
  (define (‚Üì‚Çë l e)
    (define ‚Üì-bnd : ((Pairof (Listof Symbol) -e) ‚Üí (Pairof (Listof Symbol) ‚ü¶E‚üß))
      (match-lambda
        [(cons x e‚Çì) (cons x (‚Üì e‚Çì))]))

    (define ‚Üì-dom : (-dom ‚Üí ‚ü¶dom‚üß)
      (match-lambda
        [(-dom xs ?dep e ‚Ñì) (‚ü¶dom‚üß xs ?dep (‚Üì e) ‚Ñì)]))

    (: init-undefined! : Œ£ (Assoc (Listof Symbol) -e) H Œ° ‚Üí Œ°)
    (define (init-undefined! Œ£ bnds H Œ°‚ÇÄ)
      (for*/fold ([Œ° : Œ° Œ°‚ÇÄ]) ([bnd (in-list bnds)] [x (in-list (car bnd))])
        (define Œ± (mk-Œ± (-Œ±:x x H)))
        (‚äî·µ•! Œ£ Œ± -undefined)
        (Œ°+ Œ° x Œ±)))

    (: struct-defined? : -ùíæ ‚Üí Œ£ ‚Üí Boolean)
    (define (struct-defined? ùíæ)
      (if (member ùíæ (list -ùíæ-cons -ùíæ-box))
          (Œª _ #t)
          (let ([Œ± (mk-Œ± (-Œ±:top ùíæ))])
            (Œª (Œ£) (defined-at? Œ£ Œ±)))))

    (define (blm:undefined-struct [ùíæ : -ùíæ] [‚Ñì : ‚Ñì])
      (Blm (strip-‚Ñì ‚Ñì) 'Œõ '(struct-defined?) (list {set (-ùíæ-name ùíæ)})))
    
    (: ‚Üì : -e ‚Üí ‚ü¶E‚üß)
    (define-compiler ((‚Üì E) Œ° Œ¶^ Œû Œ£)
      [(? -prim? p) (mk-V p)]
      [(-‚Ä¢) (mk-V (-‚óè ‚àÖ))]
      [(-x (? symbol? x) ‚Ñì‚Çì) (‚Üì‚Çì x ‚Ñì‚Çì)]
      [=> (-Œª xs E*)
          (ret! (V->R (Clo xs ‚ü¶E*‚üß (m‚Üì Œ° fvs)) Œ¶^) Œû Œ£)
          #:where [fvs (fv E)]
          #:recur E*]
      [=> (-x (and ùíæ (-ùíæ x l‚Çí)) _)
          (let ([V^ (map/set modify-V (Œ£·µ•@ Œ£ Œ±))])
            (ret! (V->R V^ Œ¶^) Œû Œ£))
          #:where
          [Œ± (mk-Œ± ((if (equal? l‚Çí l) -Œ±:top -Œ±:wrp) ùíæ))]
          [modify-V
           (ann (cond
                  [(equal? l‚Çí l) values]
                  [(symbol? l) (Œª (V) (with-negative-party l V))]
                  [(Œª ([V : V])
                     (with-positive-party 'dummy+
                       (with-negative-party l
                         (match V
                           [(X/G l¬≥ C _) (X/G l¬≥ C Œ±‚Ä¢)]
                           [_ V]))))])
                (V ‚Üí V))]]
      [=> (-@ E Es ‚Ñì)
          (let ([Œ°‚ÇÄ (m‚Üì Œ° fv‚ÇÄ)]
                [EŒ°s (for/list : (Listof EŒ°) ([‚ü¶E‚üß (in-list ‚ü¶Es‚üß)] [fv (in-list fvs)])
                       (EŒ° ‚ü¶E‚üß (m‚Üì Œ° fv)))])
            (‚ü¶E‚üß (m‚Üì Œ° fv‚ÇÄ) Œ¶^ (K+ (F:Ap '() EŒ°s ‚Ñì) Œû) Œ£))
          #:where ; HACK
          [_ (match* (E Es)
               [('scv:mon (cons (-b (? symbol? l)) _))
                (add-transparent-module! (symbol->string l))
                (add-transparent-module! (format "user-of-~a" l))]
               [(_ _) 'ignore])]
          [fv‚ÇÄ (fv E)]
          [fvs (map fv Es)]
          #:recur E (Es ...)]
      [=> (-if E E‚ÇÅ E‚ÇÇ)
          (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:If l ‚ü¶E‚ÇÅ‚üß ‚ü¶E‚ÇÇ‚üß Œ°) Œû) Œ£)
          #:recur E E‚ÇÅ E‚ÇÇ]
      [(-wcm E‚Çñ E·µ• E) ???]
      [(-begin '()) (mk-V -void)]
      [(-begin (list E)) (‚Üì E)]
      [=> (-begin (cons E Es))
          (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Bgn (assert ‚ü¶Es‚üß pair?) Œ°) Œû) Œ£)
          #:recur E (Es ...)]
      [(-begin0 E‚ÇÄ '()) (‚Üì E‚ÇÄ)]
      [=> (-begin0 E‚ÇÄ Es)
          (‚ü¶E‚ÇÄ‚üß Œ° Œ¶^ (K+ (F:Bgn0:V (assert ‚ü¶Es‚üß pair?) Œ°) Œû) Œ£)
          #:recur E‚ÇÄ (Es ...)]
      [(-quote (? Base? b)) (mk-V (-b b))]
      [(-quote q) ???]
      [(-let-values '() E _) (‚Üì E)]
      [=> (-let-values bnds E ‚Ñì)
          (‚ü¶E‚üß‚Çì Œ° Œ¶^ (K+ (F:Let ‚Ñì x ‚ü¶bnd‚üßs '() ‚ü¶E‚üß Œ°) Œû) Œ£)
          #:where [(cons (cons x ‚ü¶E‚üß‚Çì) ‚ü¶bnd‚üßs) (map ‚Üì-bnd bnds)]
          #:recur E]
      [(-letrec-values '() E _) (‚Üì E)]
      [=> (-letrec-values bnds E ‚Ñì)
          (let ([Œ°* (init-undefined! Œ£ bnds (Œû:co-ctx Œû) Œ°)])
            (‚ü¶E‚üß‚Çì Œ°* Œ¶^ (K+ (F:Letrec ‚Ñì x ‚ü¶bnd‚üßs ‚ü¶E‚üß Œ°*) Œû) Œ£))
          #:where [(cons (cons x ‚ü¶E‚üß‚Çì) ‚ü¶bnd‚üßs) (map ‚Üì-bnd bnds)]
          #:recur E]
      [=> (-set! x E)
          (‚ü¶E‚üß Œ° Œ¶^ (K+ (F:Set! (get-addr Œ°)) Œû) Œ£)
          #:where [get-addr
                   (if (symbol? x)
                       (Œª ([Œ° : Œ°]) (Œ°@ Œ° x))
                       (Œª _ (mk-Œ± (-Œ±:top x))))]
          #:recur E]
      [(-error msg ‚Ñì) (mk-Blm (Blm (strip-‚Ñì ‚Ñì) 'Œõ '(not-reached) (list (set (-b msg)))))]
      [=> (-Œº/c x C)
          (‚ü¶C‚üß (Œ°+ Œ° x (mk-Œ± (-Œ±:x/c x (Œû:co-ctx Œû)))) Œ¶^ (K+ (F:Œú/C x) Œû) Œ£)
          #:recur C]
      [(--> Cs D ‚Ñì) (mk--> ‚Ñì (-var-map ‚Üì Cs) (‚Üì D))]
      [(-->i Cs D) (mk-->i (map ‚Üì-dom Cs) (‚Üì-dom D))]
      [=> (-‚àÄ/c xs E*)
          (ret! (V->R (‚àÄ/C xs ‚ü¶E*‚üß (m‚Üì Œ° fvs)) Œ¶^) Œû Œ£)
          #:where [fvs (fv E)]
          #:recur E*]
      [=> (-x/c x)
          (ret! (V->R (X/C (Œ°@ Œ° x)) Œ¶^) Œû Œ£)]
      [=> (-struct/c ùíæ '() ‚Ñì)
          (cond [(ùíæ-defined? Œ£) (ret! (R C Œ¶^) Œû Œ£)]
                [else (blm:undefined-struct ùíæ ‚Ñì)])
          #:where
          [ùíæ-defined? (struct-defined? ùíæ)]
          [C (list {set (St/C #t ùíæ '())})]]
      [=> (-struct/c ùíæ (cons C Cs) ‚Ñì)
          (cond [(ùíæ-defined? Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:St/C ‚Ñì ùíæ '() ‚ü¶Cs‚üß Œ°) Œû) Œ£)]
                [else (blm:undefined-struct ùíæ ‚Ñì)])
          #:where [ùíæ-defined? (struct-defined? ùíæ)]
          #:recur C (Cs ...)]
      [_ (error '‚Üì‚Çë "unhandled: ~a" e)])
    
    (‚Üì e)) 

  (define/memo (‚Üì‚Çì [x : Symbol] [‚Ñì‚Çì : ‚Ñì]) : ‚ü¶E‚üß
    (define blm:undefined (Blm (strip-‚Ñì ‚Ñì‚Çì) 'Œõ '(defined?) (list {set -undefined})))
    (Œª (Œ° Œ¶^ Œû Œ£)
      (define Œ± (Œ°@ Œ° x))
      (define V^ (Œ£·µ•@ Œ£ Œ±))
      (if (set-empty? V^)
          blm:undefined
          (ret! (V->R (S:Œ± Œ±) Œ¶^) Œû Œ£))))

  (define (mk-V [V : (U V V^)]) : ‚ü¶E‚üß
    (mk-W (if (set? V) (list V) (list {set V}))))

  (define/memo (mk-W [W : W]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ Œû Œ£) (ret! (R W Œ¶^) Œû Œ£)))

  (define/memo (mk-Blm [blm : Blm]) : ‚ü¶E‚üß (Œª _ blm))

  (define/memo (mk-->i [‚ü¶dom‚üßs : (Listof ‚ü¶dom‚üß)] [‚ü¶rng‚üß : ‚ü¶dom‚üß]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ Œû Œ£)
      (define-values (Doms doms) (split-‚ü¶dom‚üßs Œ° (append ‚ü¶dom‚üßs (list ‚ü¶rng‚üß))))
      (match doms
        ['() (let ([G (==>i (reverse (cdr Doms)) (car Doms))])
               (ret! (V->R G Œ¶^) Œû Œ£))]
        [(cons (‚ü¶dom‚üß x #f ‚ü¶C‚üß ‚Ñì) ‚ü¶dom‚üßs)
         (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:==>i Œ° Doms (cons x ‚Ñì) ‚ü¶dom‚üßs) Œû) Œ£)])))

  (define/memo (mk--> [‚Ñì : ‚Ñì] [‚ü¶dom‚üßs : (-var ‚ü¶E‚üß)] [‚ü¶rng‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
    (match-define (-var ‚ü¶C‚üßs ‚ü¶C‚üß·µ£) ‚ü¶dom‚üßs)
    (match ‚ü¶C‚üßs
      [(cons ‚ü¶C‚üß ‚ü¶C‚üßs)
       (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:==>:Dom '() ‚ü¶C‚üßs ‚ü¶C‚üß·µ£ ‚ü¶rng‚üß Œ° ‚Ñì) Œû) Œ£))]
      ['()
       (if ‚ü¶C‚üß·µ£
           (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶C‚üß·µ£  Œ° Œ¶^ (K+ (F:==>:Rst '() ‚ü¶rng‚üß Œ° ‚Ñì) Œû) Œ£))
           (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶rng‚üß Œ° Œ¶^ (K+ (F:==>:Rng '() #f ‚Ñì) Œû) Œ£)))]))

  (define/memo (mk-let* [‚Ñì : ‚Ñì] [‚ü¶bnd‚üßs : (Assoc Symbol ‚ü¶E‚üß)] [‚ü¶body‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
    (foldr
     (Œª ([‚ü¶bnd‚üß : (Pairof Symbol ‚ü¶E‚üß)] [‚ü¶body‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
        (match-define (cons (app list x) ‚ü¶E‚üß‚Çì) ‚ü¶bnd‚üß)
        (Œª (Œ° Œ¶^ Œû Œ£)
          (‚ü¶E‚üß‚Çì Œ° Œ¶^ (K+ (F:Let ‚Ñì x '() '() ‚ü¶body‚üß Œ°) Œû) Œ£)))
     ‚ü¶body‚üß
     ‚ü¶bnd‚üßs)) 

  (define/memo (mk-mon [ctx : Ctx] [‚ü¶C‚üß : ‚ü¶E‚üß] [‚ü¶V‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:Mon:V ctx (EŒ° ‚ü¶V‚üß Œ°)) Œû) Œ£)))

  (define/memo (mk-app [‚Ñì : ‚Ñì] [‚ü¶f‚üß : ‚ü¶E‚üß] [‚ü¶x‚üßs : (Listof ‚ü¶E‚üß)]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ Œû Œ£)
      (define EŒ°s : (Listof EŒ°) (for/list ([‚ü¶x‚üß (in-list ‚ü¶x‚üßs)]) (EŒ° ‚ü¶x‚üß Œ°)))
      (‚ü¶f‚üß Œ° Œ¶^ (K+ (F:Ap '() EŒ°s ‚Ñì) Œû) Œ£))) 

  (define/memo (mk-fc [‚Ñì : ‚Ñì] [‚ü¶C‚üß : ‚ü¶E‚üß] [‚ü¶V‚üß : ‚ü¶E‚üß]) : ‚ü¶E‚üß
    (Œª (Œ° Œ¶^ Œû Œ£) (‚ü¶C‚üß Œ° Œ¶^ (K+ (F:Fc:V ‚Ñì ‚ü¶V‚üß Œ°) Œû) Œ£)))

  (define/memo (mk-wrapped [C : Prox/C] [ctx : Ctx] [Œ± : Œ±] [V : V^]) : ‚ü¶E‚üß
    (Œª (œÅ Œ¶^ Œû Œ£)
      (‚äî·µ•! Œ£ Œ± V)
      (ret! (V->R (X/G ctx C Œ±) Œ¶^) Œû Œ£)))

  (: split-‚ü¶dom‚üßs : Œ° (Listof ‚ü¶dom‚üß) ‚Üí (Values (Listof Dom) (Listof ‚ü¶dom‚üß)))
  (define (split-‚ü¶dom‚üßs Œ° ‚ü¶dom‚üßs)
    (let go ([Doms‚Üì : (Listof Dom) '()] [‚ü¶dom‚üßs : (Listof ‚ü¶dom‚üß) ‚ü¶dom‚üßs])
      (match ‚ü¶dom‚üßs
        ['() (values Doms‚Üì '())]
        [(cons (‚ü¶dom‚üß x (? values xs) ‚ü¶E‚üß ‚Ñì) ‚ü¶dom‚üßs*)
         (go (cons (Dom x (Clo (-var xs #f) ‚ü¶E‚üß Œ°) ‚Ñì) Doms‚Üì) ‚ü¶dom‚üßs*)]
        [_ (values Doms‚Üì ‚ü¶dom‚üßs)])))
  )
