#lang typed/racket/base

(provide fc@)

(require racket/sequence
         racket/match
         (except-in racket/set for/set for/seteq for*/set for*/seteq)
         syntax/parse/define
         typed/racket/unit
         bnf
         set-extras
         unreachable
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../primitives/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt")

(define-unit fc@
  (import sto^ env^ val^ evl^
          prover^
          step^ compile^)
  (export fc^)

  (: fc : V^ V^ ‚Ñì Œ¶^ Œû:co Œ£ ‚Üí (‚Ñò Œû))
  (define (fc C V ‚Ñì Œ¶^ Œû‚ÇÄ Œ£)
    (for/union : (‚Ñò Œû) ([C·µ¢ (in-set C)])
      ((fc‚ÇÅ C·µ¢) V ‚Ñì Œ¶^ Œû‚ÇÄ Œ£)))

  (‚ü¶FC‚üß . ‚âú . (V^ ‚Ñì Œ¶^ Œû:co Œ£ ‚Üí (‚Ñò Œû)))

  (: fc‚ÇÅ : V ‚Üí ‚ü¶FC‚üß)
  (define fc‚ÇÅ
    (match-lambda
      [(And/C _ Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) (fc-And/C Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ)]
      [(Or/C  _ Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) (fc-Or/C Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ)]
      [(Not/C Œ±‚Ñì) (fc-Not/C Œ±‚Ñì)]
      [(One-Of/C bs) (fc-One-Of/C bs)]
      [(St/C _ ùíæ Œ±‚Ñìs) (fc-St/C ùíæ Œ±‚Ñìs)]
      [(X/C Œ±) (fc-X/C Œ±)]
      [(-b b) (fc-b b)]
      [V (fc-p V)]))

  (: fc-And/C : Œ±‚Ñì Œ±‚Ñì ‚Üí ‚ü¶FC‚üß)
  (define ((fc-And/C Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (match-define (Œ±‚Ñì Œ±‚ÇÅ ‚Ñì‚ÇÅ) Œ±‚Ñì‚ÇÅ)
    (fc (Œ£·µ•@ Œ£ Œ±‚ÇÅ) V‚Çì ‚Ñì‚ÇÅ Œ¶^ (K+ (F:Fc-And/C Œ±‚ÇÅ Œ±‚Ñì‚ÇÇ) Œû) Œ£))

  (: fc-Or/C : Œ±‚Ñì Œ±‚Ñì ‚Üí ‚ü¶FC‚üß)
  (define ((fc-Or/C Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (match-define (Œ±‚Ñì Œ±‚ÇÅ ‚Ñì‚ÇÅ) Œ±‚Ñì‚ÇÅ)
    (fc (Œ£·µ•@ Œ£ Œ±‚ÇÅ) V‚Çì ‚Ñì‚ÇÅ Œ¶^ (K+ (F:Fc-Or/C Œ±‚ÇÅ Œ±‚Ñì‚ÇÇ V‚Çì) Œû) Œ£))

  (: fc-Not/C : Œ±‚Ñì ‚Üí ‚ü¶FC‚üß)
  (define ((fc-Not/C Œ±‚Ñì*) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (match-define (Œ±‚Ñì Œ± ‚Ñì) Œ±‚Ñì*)
    (fc (Œ£·µ•@ Œ£ Œ±) V‚Çì ‚Ñì Œ¶^ (K+ (F:Fc-Not/C V‚Çì) Œû) Œ£))

  (: fc-One-Of/C : (Listof Base) ‚Üí ‚ü¶FC‚üß)
  (define ((fc-One-Of/C bs) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (define (er) (ret! (R '() Œ¶^) Œû Œ£))
    (define (ok [V : V^]) (ret! (R (list V) Œ¶^) Œû Œ£))
    (case (check-one-of Œ¶^ V‚Çì bs)
      [(‚úì) {set (ok V‚Çì)}]
      [(‚úó) {set (er)}]
      [else {set (ok (list->set (map -b bs))) (er)}]))

  (: fc-St/C : -ùíæ (Listof Œ±‚Ñì) ‚Üí ‚ü¶FC‚üß)
  (define ((fc-St/C ùíæ Œ±‚Ñìs) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (define (chk-fields [R^ : R^])
      (define-values (V‚Çì* Œ¶^*) (collapse-R^-1 R^))
      (define ‚ü¶chk‚üßs : (Listof EŒ°)
        (for/list ([Œ±‚Ñì·µ¢ (in-list Œ±‚Ñìs)] [i (in-naturals)] #:when (index? i))
          (match-define (Œ±‚Ñì Œ±·µ¢ ‚Ñì·µ¢) Œ±‚Ñì·µ¢)
          (define ‚ü¶ref‚üß·µ¢ (mk-app ‚Ñì (mk-V (-st-ac ùíæ i)) (list (mk-V V‚Çì*))))
          (EŒ° (mk-fc ‚Ñì·µ¢ (mk-V (Œ£·µ•@ Œ£ Œ±·µ¢)) ‚ü¶ref‚üß·µ¢) ‚ä•Œ°)))
      (match ‚ü¶chk‚üßs
        [(cons (EŒ° ‚ü¶chk‚üß _) ‚ü¶chk‚üßs)
         {set (‚ü¶chk‚üß ‚ä•Œ° Œ¶^* (K+ (F:Fc-Struct/C ‚Ñì ùíæ '() ‚ü¶chk‚üßs) Œû) Œ£)}]
        ['() {set (ret! (V->R (St ùíæ '()) Œ¶^*) Œû Œ£)}]))
    (with-2-paths (Œª () (split-results Œ£ (R (list V‚Çì) Œ¶^) (-st-p ùíæ)))
      chk-fields
      (Œª ([R^ : R^])
        (define Œ¶^ (collapse-R^/Œ¶^ R^))
        {set (ret! (R '() Œ¶^) Œû Œ£)})))

  (: fc-X/C : Œ± ‚Üí ‚ü¶FC‚üß)
  (define ((fc-X/C Œ±) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (fc (Œ£·µ•@ Œ£ Œ±) V‚Çì ‚Ñì Œ¶^ Œû Œ£))

  (: fc-b : Base ‚Üí ‚ü¶FC‚üß)
  (define ((fc-b b) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (define ‚ü¶b‚üß (mk-V (-b b)))
    (define ‚ü¶ap‚üß (mk-app ‚Ñì (mk-V 'equal?) (list (mk-V V‚Çì) ‚ü¶b‚üß)))
    {set (‚ü¶ap‚üß ‚ä•Œ° Œ¶^ (K+ (F:If (‚Ñì-src ‚Ñì) ‚ü¶b‚üß (mk-W '()) ‚ä•Œ°) Œû) Œ£)})

  (: fc-p : V ‚Üí ‚ü¶FC‚üß)
  (define ((fc-p P) V‚Çì ‚Ñì Œ¶^ Œû Œ£)
    (define ‚ü¶ap‚üß (mk-app ‚Ñì (mk-V P) (list (mk-V V‚Çì))))
    {set (‚ü¶ap‚üß ‚ä•Œ° Œ¶^ (K+ (F:If (‚Ñì-src ‚Ñì) (mk-V V‚Çì) (mk-W '()) ‚ä•Œ°) Œû) Œ£)})
  )
