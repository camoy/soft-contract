#lang typed/racket/base

(provide mon@)

(require racket/match
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         typed/racket/unit
         set-extras
         bnf
         unreachable
         typed-racket-hacks
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt")

(define-unit mon@
  (import static-info^ meta-functions^
          val^ env^ evl^ sto^
          prover^
          prims^
          step^ app^ compile^ fc^ approx^ alloc^)
  (export mon^)

  (‚ü¶C‚üß . ‚âú . (T^ Ctx Œ¶^ Œû:co Œ£ ‚Üí (‚Ñò Œû)))

  (: mon : T^ T^ Ctx Œ¶^ Œû:co Œ£ ‚Üí (‚Ñò Œû))
  (define (mon C^ T^ ctx Œ¶^ Œû‚ÇÄ Œ£)
    (for/union : (‚Ñò Œû) ([C (in-set (T->V Œ£ Œ¶^ C^))])
      ((mon‚ÇÅ C) T^ ctx Œ¶^ Œû‚ÇÄ Œ£)))

  (: mon‚ÇÅ : V ‚Üí ‚ü¶C‚üß)
  (define (mon‚ÇÅ C)
    (cond [(Fn/C? C) (mon-Fn/C C)]
          [(St/C? C) (mon-St/C C)]
          [(X/C? C) (mon-X/C C)]
          [(And/C? C) (mon-And/C C)]
          [(Or/C? C) (mon-Or/C C)]
          [(Not/C? C) (mon-Not/C C)]
          [(One-Of/C? C) (mon-One-Of/C C)]
          [(Vectof? C) (mon-Vectof C)]
          [(Vect/C? C) (mon-Vect/C C)]
          [(Hash/C? C) (mon-Hash/C C)]
          [(Set/C? C) (mon-Set/C C)]
          [(Seal/C? C) (mon-Seal/C C)]
          [else (mon-Flat/C C)]))

  (: mon-Fn/C : Fn/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Fn/C C) T^‚ÇÄ ctx Œ¶^‚ÇÄ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (define C:arity (guard-arity C))
    
    (define (chk-arity [R^ : R^])
      (cond
        [C:arity
         (define grd-arity (-b C:arity))
         (for/union : (‚Ñò Œû) ([R·µ¢ (in-set R^)])
           (match-define (R (list T‚Çï) Œ¶^·µ¢) R·µ¢)
           (define T‚Çï:arity
             (cond [(set? T‚Çï) (for/set : V^ ([V·µ¢ (in-set T‚Çï)])
                                (cond [(T-arity V·µ¢) => -b]
                                      [else (-‚óè {set 'procedure-arity?})]))]
                   [(and (S? T‚Çï) (T-arity T‚Çï)) => -b]
                   [else (S:@ 'procedure-arity (list T‚Çï))]))
           ((inst with-2-paths Œû)
             (Œª () (split-results Œ£ (R (list T‚Çï:arity grd-arity) Œ¶^·µ¢) 'arity-includes?))
             (Œª (R^)
               (wrap {set (R (list T‚Çï) (set-union-map R-_1 R^))}))
             (Œª _
               (define C (match C:arity
                           [(? integer? n)
                            (format-symbol "(arity-includes/c ~a)" n)]
                           [(arity-at-least k)
                            (format-symbol "(arity-at-least/c ~a)" k)]
                           [(list k ...)
                            (string->symbol (format "(arity-one-of/c ~a)" k))]))
               (blm (‚Ñì-with-src ‚Ñì l+) l‚Çí (list {set C}) (list T‚Çï)))))]
        [else (wrap R^)]))

    (define (wrap [R^ : R^])
      (: go : Arity ‚Üí (‚Ñò Œû:co))
      (define (go a)
        (define Œ± (mk-Œ± (-Œ±:fn ctx (Œû:co-ctx Œû‚ÇÄ) a)))
        (define V* (V^+ Œ£ (V^+ Œ£ (R->V Œ£ R^) 'procedure?) (P:arity-includes a)))
        (‚äî·µ•! Œ£ Œ± V*)
        {set (ret! (T->R (X/G ctx C Œ±) (collapse-R^/Œ¶^ R^)) Œû‚ÇÄ Œ£)})
      (if C:arity
          (go C:arity)
          (match (for/set : (‚Ñò Arity) ([V (in-set (R->V Œ£ R^))])
                   (assert (T-arity V)))
            [{singleton-set a} (go a)])))
    
    (with-check Œ£ Œ¶^‚ÇÄ ctx T^‚ÇÄ 'procedure? (if (‚àÄ/C? C) wrap chk-arity)))

  (: mon-St/C : St/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-St/C C) T^‚ÇÄ ctx Œ¶^‚ÇÄ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (match-define (St/C _ ùíæ Œ±‚Ñìs) C)
    (with-check Œ£ Œ¶^‚ÇÄ ctx T^‚ÇÄ (-st-p ùíæ)
      (Œª (R^)
        (define-values (T^ Œ¶^) (collapse-R^-1 Œ£ R^))
        (define ‚ü¶mon‚üßs : (Listof ‚ü¶E‚üß)
          (for/list ([Œ±‚Ñì·µ¢ (in-list Œ±‚Ñìs)] [i (in-naturals)] #:when (index? i))
            (match-define (Œ±‚Ñì Œ±·µ¢ ‚Ñì·µ¢) Œ±‚Ñì·µ¢)
            (define ‚ü¶V·µ¢‚üß (let ([‚Ñì* (‚Ñì-with-id ‚Ñì (list 'mon-struct/c ùíæ i))])
                           (mk-app ‚Ñì* (mk-T (-st-ac ùíæ i)) (list (mk-T T^)))))
            (mk-mon (Ctx-with-‚Ñì ctx ‚Ñì·µ¢) (mk-T (Œ£·µ•@ Œ£ Œ±·µ¢)) ‚ü¶V·µ¢‚üß)))
        (define ‚ü¶reconstr‚üß (mk-app ‚Ñì (mk-T (-st-mk ùíæ)) ‚ü¶mon‚üßs))
        (define Œû* (cond [(struct-all-immutable? ùíæ) Œû‚ÇÄ]
                         [else (K+ (F:Wrap C ctx (mk-Œ± (-Œ±:st ùíæ ctx (Œû:co-ctx Œû‚ÇÄ)))) Œû‚ÇÄ)]))
        {set (‚ü¶reconstr‚üß ‚ä•Œ° Œ¶^ Œû* Œ£)})))

  (: mon-X/C : X/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-X/C C) V ctx Œ¶^ Œû Œ£)
    (match-define (Œû:co (K _ (Œ±‚Çñ H _)) ?m) Œû)
    (match-define (X/C Œ±) C)
    (define H* (H+ H (Ctx-loc ctx) C))
    (define Œ±* (Œ±‚Çñ H* (Œ≤‚Çñ:mon ctx Œ±)))
    (‚äî‚Çñ! Œ£ Œ±* (Rt Œ¶^ {seteq Œ±} Œû))
    (match-define (-Œ±:x/c x _) (inspect-Œ± Œ±))
    (define-values (Œ¶^* Œ°) (bind-args! Œ¶^ ‚ä•Œ° (-var (list x) #f) (list V) H* Œ£))
    (define Œû* (Œû:co (K (list (F:Mon:C ctx (Œ£·µ•@ Œ£ Œ±))) Œ±*) ?m))
    {set (ret! (R (list (S:Œ± (hash-ref Œ° x))) Œ¶^*) Œû* Œ£)})

  (: mon-And/C : And/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-And/C C) V ctx Œ¶^ Œû Œ£)
    (match-define (And/C _ Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) C)
    (define-values (C‚ÇÅ ctx‚ÇÅ) (Œ£·µ•@/ctx Œ£ ctx Œ±‚Ñì‚ÇÅ))
    (define-values (C‚ÇÇ ctx‚ÇÇ) (Œ£·µ•@/ctx Œ£ ctx Œ±‚Ñì‚ÇÇ))
    (define Œû* (K+ (F:Mon:C ctx‚ÇÅ C‚ÇÅ) (K+ (F:Mon:C ctx‚ÇÇ C‚ÇÇ) Œû)))
    {set (ret! (T->R V Œ¶^) Œû* Œ£)})

  (: mon-Or/C : Or/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Or/C C) V ctx Œ¶^ Œû‚ÇÄ Œ£)
    (match-define (Or/C flat? Œ±‚Ñì‚ÇÅ Œ±‚Ñì‚ÇÇ) C)

    (: chk : V^ Ctx V^ Ctx ‚Üí (‚Ñò Œû))
    (define (chk C-fl ctx-fl C-ho ctx-ho)
      (match-define (Ctx _ _ l‚Çí-fl ‚Ñì-fl) ctx-fl)
      (define Œû* (K+ (F:Mon-Or/C ctx-ho C-fl C-ho V) Œû‚ÇÄ))
      (fc C-fl V (‚Ñì-with-src ‚Ñì-fl l‚Çí-fl) Œ¶^ Œû* Œ£))

    (define-values (C‚ÇÅ ctx‚ÇÅ) (Œ£·µ•@/ctx Œ£ ctx Œ±‚Ñì‚ÇÅ))
    (define-values (C‚ÇÇ ctx‚ÇÇ) (Œ£·µ•@/ctx Œ£ ctx Œ±‚Ñì‚ÇÇ))
    (cond [(C^-flat? C‚ÇÅ) (chk C‚ÇÅ ctx‚ÇÅ C‚ÇÇ ctx‚ÇÇ)]
          [(C^-flat? C‚ÇÇ) (chk C‚ÇÇ ctx‚ÇÇ C‚ÇÅ ctx‚ÇÅ)]
          [else (error 'or/c "No more than 1 higher-order disjunct for now")]))

  (: mon-Not/C : Not/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Not/C C) V ctx Œ¶^ Œû Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì‚Çò) ctx)
    (match-define (Not/C (Œ±‚Ñì Œ± ‚Ñì)) C)
    (define C* (Œ£·µ•@ Œ£ Œ±))
    (define Œû*
      (let ([‚ü¶ok‚üß (mk-W (list V))]
            [‚ü¶er‚üß (mk-Blm (Blm (‚Ñì-with-src ‚Ñì‚Çò l+) l‚Çí (list {set C}) (list V)))])
        (K+ (F:If l‚Çí ‚ü¶er‚üß ‚ü¶ok‚üß ‚ä•Œ°) Œû)))
    (app C* (list V) ‚Ñì Œ¶^ Œû* Œ£))

  (: mon-One-Of/C : One-Of/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-One-Of/C C) V ctx Œ¶^ Œû Œ£)
    (match-define (One-Of/C bs) C)
    (define (er) (match-let ([(Ctx l+ _ lo ‚Ñì) ctx])
                   (blm (‚Ñì-with-src ‚Ñì l+) lo (list C) (list V))))
    (case (check-one-of Œ¶^ V bs)
      [(‚úì) {set (ret! (T->R V Œ¶^) Œû Œ£)}]
      [(‚úó) (er)]
      [else (set-add (er) (ret! (T->R (list->set (map -b bs)) Œ¶^) Œû Œ£))]))

  (: mon-Vectof : Vectof ‚Üí ‚ü¶C‚üß)
  (define ((mon-Vectof C) V ctx Œ¶^‚ÇÄ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (match-define (Vectof (Œ±‚Ñì Œ±* ‚Ñì*)) C)
    (with-check Œ£ Œ¶^‚ÇÄ ctx V 'vector?
      (Œª (R^)
        (define-values (T^ Œ¶^) (collapse-R^-1 Œ£ R^))
        (define ‚ü¶elem‚üß
          (let ([‚Ñì* (‚Ñì-with-id ‚Ñì '(mon-vectorof))]
                [Idx (mk-T (-‚óè {set 'exact-nonnegative-integer?}))])
            (mk-app ‚Ñì* (mk-T 'vector-ref) (list (mk-T T^) Idx))))
        (define ‚ü¶mon‚üß (mk-mon (Ctx-with-‚Ñì ctx ‚Ñì*) (mk-T (Œ£·µ•@ Œ£ Œ±*)) ‚ü¶elem‚üß))
        (define Œû*
          (let ([F:wrap (F:Wrap C ctx (mk-Œ± (-Œ±:unvct ctx (Œû:co-ctx Œû‚ÇÄ))))]
                [F:mk (F:Ap (list (vec-len T^) {set 'make-vector}) '() ‚Ñì)])
            (K+ F:mk (K+ F:wrap Œû‚ÇÄ))))
        {set (‚ü¶mon‚üß ‚ä•Œ° Œ¶^ Œû* Œ£)})))

  (: mon-Vect/C : Vect/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Vect/C C) V ctx Œ¶^‚ÇÄ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (match-define (Vect/C Œ±‚Ñìs) C)
    (define n (length Œ±‚Ñìs))

    (define ((chk-elems [T^ : T^]) [Œ¶^ : Œ¶^])
      (define ‚ü¶mon‚üßs : (Listof EŒ°)
        (for/list ([Œ±‚Ñì·µ¢ (in-list Œ±‚Ñìs)] [i (in-naturals)] #:when (index? i))
          (match-define (Œ±‚Ñì Œ±·µ¢ ‚Ñì·µ¢) Œ±‚Ñì·µ¢)
          (define ‚ü¶elem‚üß
            (mk-app (‚Ñì-with-id ‚Ñì (list 'mon-vector/c i))
                    (mk-T 'vector-ref)
                    (list (mk-T T^) (mk-T (-b i)))))
          (EŒ° (mk-mon (Ctx-with-‚Ñì ctx ‚Ñì·µ¢) (mk-T (Œ£·µ•@ Œ£ Œ±·µ¢)) ‚ü¶elem‚üß) ‚ä•Œ°)))
      {set (match ‚ü¶mon‚üßs
             ['() (ret! (T->R (Vect '()) Œ¶^) Œû‚ÇÄ Œ£)]
             [(cons (EŒ° ‚ü¶mon‚üß _) ‚ü¶mon‚üßs)
              (define F:wrap (F:Wrap C ctx (mk-Œ± (-Œ±:unvct ctx (Œû:co-ctx Œû‚ÇÄ)))))
              (define F:ap (F:Ap (list {set 'vector}) ‚ü¶mon‚üßs ‚Ñì))
              (‚ü¶mon‚üß ‚ä•Œ° Œ¶^ (K+ F:ap (K+ F:wrap Œû‚ÇÄ)) Œ£)])})

    (with-check Œ£ Œ¶^‚ÇÄ ctx V 'vector?
      (Œª (R^)
        (define-values (T^ Œ¶^) (collapse-R^-1 Œ£ R^))
        (define V‚Çó (vec-len T^))
        (with-2-paths/collapse (Œª () (split-results Œ£ (R (list V‚Çó {set (-b n)}) Œ¶^) '=))
          (chk-elems T^)
          (Œª _
            (define P (format-symbol "(vector-length/c ~a)" n))
            (blm (‚Ñì-with-src ‚Ñì l+) l‚Çí (list P) (list V)))))))

  (: mon-Hash/C : Hash/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Hash/C C) V ctx Œ¶^ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (match-define (Hash/C (Œ±‚Ñì Œ±‚Çñ ‚Ñì‚Çñ) (Œ±‚Ñì Œ±·µ• ‚Ñì·µ•)) C)
    (with-check Œ£ Œ¶^ ctx V 'hash?
      (Œª (R^)
        (define Œ±‚Çï (mk-Œ± (-Œ±:unhsh ctx (Œû:co-ctx Œû‚ÇÄ))))
        (for*/union : (‚Ñò Œû) ([R·µ¢ (in-set R^)]
                             [Œ¶^·µ¢ (in-value (R-_1 R·µ¢))]
                             [V·µ§ (in-set (T->V Œ£ Œ¶^·µ¢ (car (R-_0 R·µ¢))))])
          (define (chk-key-vals [V‚Çñ : V^] [V·µ• : V^])
            (define ‚ü¶wrap‚üß (mk-wrapped C ctx Œ±‚Çï {set V·µ§}))
            (cond ;; FIXME hack for now
              [(or (set-empty? V‚Çñ) (set-empty? V·µ•)) {set (‚ü¶wrap‚üß ‚ä•Œ° Œ¶^·µ¢ Œû‚ÇÄ Œ£)}]
              [else
               (define ‚ü¶mon‚üß (mk-mon (Ctx-with-‚Ñì ctx ‚Ñì·µ•) (mk-T (Œ£·µ•@ Œ£ Œ±·µ•)) (mk-T V·µ•)))
               (define Œû* (K+ (F:Bgn (list ‚ü¶mon‚üß ‚ü¶wrap‚üß) ‚ä•Œ°) Œû‚ÇÄ))
               (mon (Œ£·µ•@ Œ£ Œ±‚Çñ) V‚Çñ ctx Œ¶^·µ¢ Œû* Œ£)]))
          (match V·µ§
            [(X/G _ (? Hash/C?) _)
             ;; TODO havoc would be expensive. Just wrap it for now
             (‚äîT! Œ£ Œ¶^·µ¢ Œ±‚Çï V·µ§)
             {set (ret! (T->R (X/G ctx C Œ±‚Çï) Œ¶^·µ¢) Œû‚ÇÄ Œ£)}]
            [(Hash^ Œ±‚ÇÅ Œ±‚ÇÇ _) (chk-key-vals (Œ£·µ•@ Œ£ Œ±‚ÇÅ) (Œ£·µ•@ Œ£ Œ±‚ÇÇ))]
            [_ (let ([‚óès {set (-‚óè ‚àÖ)}]) (chk-key-vals ‚óès ‚óès))])))))

  (: mon-Set/C : Set/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Set/C C) V ctx Œ¶^ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ l‚Çí ‚Ñì) ctx)
    (match-define (Set/C (Œ±‚Ñì Œ±‚Çë ‚Ñì‚Çë)) C)
    (with-check Œ£ Œ¶^ ctx V 'set?
      (Œª (R^)
        (define Œ±‚Çõ (mk-Œ± (-Œ±:unset ctx (Œû:co-ctx Œû‚ÇÄ))))
        (for*/union : (‚Ñò Œû) ([R·µ¢ (in-set R^)]
                             [Œ¶^·µ¢ (in-value (R-_1 R·µ¢))]
                             [V·µ§ (in-set (T->V Œ£ Œ¶^·µ¢ (car (R-_0 R·µ¢))))])
          (define (chk-elems [V^ : V^])
            (define ‚ü¶wrap‚üß (mk-wrapped C ctx Œ±‚Çõ {set V·µ§}))
            (cond
              [(set-empty? V^) {set (‚ü¶wrap‚üß ‚ä•Œ° Œ¶^·µ¢ Œû‚ÇÄ Œ£)}]
              [else
               (define Œû* (K+ (F:Bgn (list ‚ü¶wrap‚üß) ‚ä•Œ°) Œû‚ÇÄ))
               (mon (Œ£·µ•@ Œ£ Œ±‚Çë) V^ (Ctx-with-‚Ñì ctx ‚Ñì‚Çë) Œ¶^·µ¢ Œû* Œ£)]))
          (match V·µ§
            [(X/G _ (? Set/C?) _)
             ;; TODO havoc would be expensive. Just wrap for now
             (‚äîT! Œ£ Œ¶^·µ¢ Œ±‚Çõ V·µ§)
             {set (ret! (T->R (X/G ctx C Œ±‚Çõ) Œ¶^·µ¢) Œû‚ÇÄ Œ£)}]
            [(Set^ Œ± _) (chk-elems (Œ£·µ•@ Œ£ Œ±))]
            [_ (chk-elems {set (-‚óè ‚àÖ)})])))))

  (: mon-Seal/C : Seal/C ‚Üí ‚ü¶C‚üß)
  (define ((mon-Seal/C C) V ctx Œ¶^ Œû‚ÇÄ Œ£)
    (match-define (Seal/C x H l) C)
    (match-define (Ctx l+ l- lo ‚Ñì) ctx)
    (define Œ± (mk-Œ± (-Œ±:sealed x H)))
    (cond
      [(equal? l l+) ; seal
       (‚äîT! Œ£ Œ¶^ Œ± V)
       {set (ret! (T->R (Sealed Œ±) Œ¶^) Œû‚ÇÄ Œ£)}]
      [(equal? l l-) ; unseal
       (define (er) (blm (‚Ñì-with-src ‚Ñì l+) lo (list {set C}) (list V)))
       (define (ok) {set (ret! (T->R (Œ£·µ•@ Œ£ Œ±) Œ¶^) Œû‚ÇÄ Œ£)})
       (set-union-map
        (match-lambda
          [(Sealed (== Œ±)) (ok)]
          [(-‚óè _) {‚à™ (ok) (er)}]
          [_ (er)])
        (T->V Œ£ Œ¶^ V))]
      [else (error 'mon-seal/c "seal label ~a in context ~a, ~a, ~a" l l+ l- lo)]))

  (: mon-Flat/C : V ‚Üí ‚ü¶C‚üß)
  (define ((mon-Flat/C C) V ctx Œ¶^‚ÇÄ Œû‚ÇÄ Œ£)
    (match-define (Ctx l+ _ lo ‚Ñì) ctx)
    (define (-blm [R^ : R^])
      (blm (‚Ñì-with-src ‚Ñì l+) lo (list {set C}) (collapse-R^/W^ R^)))
    (with-3-paths (Œª () (partition-results Œ£ (R (list V) Œ¶^‚ÇÄ) C))
      (Œª ([R^ : R^]) {set (ret! R^ Œû‚ÇÄ Œ£)})
      -blm
      (Œª ([R^ : R^])
        (define-values (T^ Œ¶^) (collapse-R^-1 Œ£ R^))
        (define Œû* (let ([T* (V^+ Œ£ T^ C)])
                     (K+ (F:If:Flat/C T* (-blm R^)) Œû‚ÇÄ)))
        (match C
          [(? -b? b) ((app‚ÇÅ 'equal?) (list T^ {set b}) ‚Ñì Œ¶^ Œû* Œ£)]
          [_         ((app‚ÇÅ C) (list T^) ‚Ñì Œ¶^ Œû* Œ£)]))))

  (: Œ£·µ•@/ctx : Œ£ Ctx Œ±‚Ñì ‚Üí (Values V^ Ctx))
  (define Œ£·µ•@/ctx
    (match-lambda**
     [(Œ£ ctx (Œ±‚Ñì Œ± ‚Ñì)) (values (Œ£·µ•@ Œ£ Œ±) (Ctx-with-‚Ñì ctx ‚Ñì))]))
  )
