#lang typed/racket/base

(provide prims-induction@)

(require racket/match
         racket/contract
         typed/racket/unit
         racket/set
         unreachable
         set-extras
         "../utils/pretty.rkt"
         "../utils/patterns.rkt"
         "../utils/debug.rkt"
         "../runtime/signatures.rkt"
         "../reduction/signatures.rkt"
         "../ast/signatures.rkt"
         "signatures.rkt"
         "def.rkt"
         (for-syntax racket/base
                     racket/syntax
                     syntax/parse))

(define-unit prims-induction@
  (import prim-runtime^ ast-pretty-print^ pretty-print^ env^ sto^ compile^ kont^)
  (export)
  

  #|
  (induct-on C) ==>
  (->i (#|major premise |# [x C]
        #|motive        |# [P (C . -> . contract?)]
        #|minor premises|# [on-case-i {P} (->i ([x-i C-i] ... [ih-j (P x-j)] ...)
                                               (_ {x-i ...} (P (K x-i ...))))])
       (_ {x P} (P x)))
  |#
  (def (induct-on ‚Ñì Vs H œÜ Œ£ ‚ü¶k‚üß)
    #:init ([C^ contract?])

    (: err : String -V ‚Üí (‚Ñò -œÇ))
    (define (err msg V)
      (define blm (-blm (‚Ñì-src ‚Ñì) 'induct-on (list (string->symbol msg)) (list {set V}) ‚Ñì))
      (‚ü¶k‚üß blm H œÜ Œ£))

    (: gen-name : Symbol (Listof -st-ac) ‚Üí Symbol)
    (define (gen-name x path)
      (foldr
       (Œª ([ac : -st-ac] [pref : Symbol])
         (format-symbol "~a.~a" pref (show-o ac)))
       x
       path))

    (: ‚ü¶shape‚üß : -‚ü¶e‚üß Symbol Shape ‚Üí -‚ü¶e‚üß)
    (define (‚ü¶shape‚üß ‚ü¶P‚üß case-name s)
      (match-define (Shape xs m ‚ü¶e‚üß) s)
      (mk-->i (for/list : (Listof -‚ü¶dom‚üß) ([x (in-list xs)])
                (hash-ref m x))
              (let* ([‚Ñì·µ£ (‚Ñì-with-id ‚Ñì case-name)]
                    [‚Ñì‚Çê (‚Ñì-with-id ‚Ñì·µ£ 'app)])
                (-‚ü¶dom‚üß '_ xs (mk-app ‚Ñì‚Çê ‚ü¶P‚üß (list ‚ü¶e‚üß)) ‚Ñì·µ£))))

    (: recombine-shape : -ùíæ (Listof -st-ac) (Listof Shape) ‚Üí Shape)
    (define (recombine-shape ùíæ path shapes)
      (define-values (var-lists maps exprs)
        (for/lists ([var-lists : (Listof (Listof Symbol))]
                    [maps : (Listof (Immutable-HashTable Symbol -‚ü¶dom‚üß))]
                    [exprs : (Listof -‚ü¶e‚üß)])
                   ([s (in-list shapes)])
          (match-define (Shape xs m e) s)
          (values xs m e)))
      (Shape (apply append var-lists)
             (for*/fold ([acc : (Immutable-HashTable Symbol -‚ü¶dom‚üß) (hasheq)])
                        ([m (in-list maps)] [(k v) (in-hash m)])
               (hash-set acc k v))
             (mk-app (‚Ñì-with-id ‚Ñì path) (mk-V (-st-mk ùíæ)) exprs)))

    (: gen-shape : -x/C -‚ü¶e‚üß -V ‚Üí Shape)
    (define (gen-shape C-ind ‚ü¶P‚üß C)
      (let go ([path : (Listof -st-ac) '()] [C : -V C])
        (define (gen)
          (define x (gen-name 'x path))
          (define ‚ü¶x‚üß (‚Üì‚Çì 'induct-on x ‚Ñì))
          (values x ‚ü¶x‚üß (-‚ü¶dom‚üß x #f (mk-V C) (‚Ñì-with-id ‚Ñì x))))
        (match C
          [(== C-ind)
           (define-values (x ‚ü¶x‚üß ‚ü¶dom-x‚üß) (gen))
           (define ‚ü¶P-x‚üß (mk-app ‚Ñì ‚ü¶P‚üß (list ‚ü¶x‚üß)))
           (define x·µ¢‚Çï (format-symbol "ih_~a" x))
           (define ‚ü¶dom-ih‚üß (-‚ü¶dom‚üß x·µ¢‚Çï (list x) ‚ü¶P-x‚üß (‚Ñì-with-id ‚Ñì x·µ¢‚Çï)))
           (Shape (list x x·µ¢‚Çï) (hasheq x ‚ü¶dom-x‚üß x·µ¢‚Çï ‚ü¶dom-ih‚üß) ‚ü¶x‚üß)]
          [(-St/C _ ùíæ Œ±‚Ñìs)
           (recombine-shape
            ùíæ
            path
            (for/list ([Œ±‚Ñì (in-list Œ±‚Ñìs)] [i (in-naturals)] #:when (index? i))
              (match-define {singleton-set C·µ¢} (œÉ@ Œ£ (-œÜ-cache œÜ) (-‚ü™Œ±‚ü´‚Ñì-addr Œ±‚Ñì)))
              (go (cons (-st-ac ùíæ i) path) C·µ¢)))]
          [_
           (define-values (x ‚ü¶x‚üß ‚ü¶dom-x‚üß) (gen))
           (Shape (list x) (hasheq x ‚ü¶dom-x‚üß) ‚ü¶x‚üß)])))
    
    (: gen-cases : -x/C -‚ü¶e‚üß -V ‚Üí (Listof -‚ü¶dom‚üß))
    (define (gen-cases C-ind ‚ü¶P‚üß C)
      (let go ([C : -V C] [ith : Natural 0])
        (match C
          [(-Or/C _ (-‚ü™Œ±‚ü´‚Ñì Œ±‚ÇÅ _) (-‚ü™Œ±‚ü´‚Ñì Œ±‚ÇÇ _))
           (match-define {singleton-set C‚ÇÅ} (œÉ@ Œ£ (-œÜ-cache œÜ) Œ±‚ÇÅ))
           (match-define {singleton-set C‚ÇÇ} (œÉ@ Œ£ (-œÜ-cache œÜ) Œ±‚ÇÇ))
           (define doms‚ÇÅ (go C‚ÇÅ ith))
           (define doms‚ÇÇ (go C‚ÇÇ (+ ith (length doms‚ÇÅ))))
           (append doms‚ÇÅ doms‚ÇÇ)]
          [_
           (define case-name (format-symbol "case-~a" ith))
           (define ‚ü¶c‚üß (‚ü¶shape‚üß ‚ü¶P‚üß case-name (gen-shape C-ind ‚ü¶P‚üß C)))
           (define dom (-‚ü¶dom‚üß case-name '{P} ‚ü¶c‚üß (‚Ñì-with-id ‚Ñì case-name)))
           (list dom)])))

    (: induct : -V ‚Üí (‚Ñò -œÇ))
    (define induct
      (match-lambda
        [(and C (-x/C Œ±))
         (match-define {singleton-set C*} (œÉ@ Œ£ (-œÜ-cache œÜ) Œ±))
         (define ‚ü¶c‚üß
           (let* ([‚ü¶C‚üß (mk-V C)]
                  [‚ü¶P‚üß (‚Üì‚Çì 'induct-on 'P ‚Ñì)]
                  [‚ü¶x‚üß (list (‚Üì‚Çì 'induct-on 'x ‚Ñì))])
             (mk-->i (list* (-‚ü¶dom‚üß 'x #f ‚ü¶C‚üß ‚Ñì)
                            (-‚ü¶dom‚üß 'P #f (mk--> (‚Ñì-with-id ‚Ñì 'P) (list ‚ü¶C‚üß) (mk-V 'contract?)) (‚Ñì-with-id ‚Ñì 'mk-P))
                            (gen-cases C ‚ü¶P‚üß C*))
                     (-‚ü¶dom‚üß '_ '{x P} (mk-app ‚Ñì ‚ü¶P‚üß ‚ü¶x‚üß) (‚Ñì-with-id ‚Ñì 'concl)))))
         (printf "generated induction principle: ~a~n" (show-‚ü¶e‚üß ‚ü¶c‚üß))
         (‚ü¶c‚üß ‚ä•œÅ H œÜ Œ£ ‚ü¶k‚üß)]
        [C (err "inductive contract" C)]))
    
    (for/union : (‚Ñò -œÇ) ([C (in-set C^)]) (induct C)))

  (def trivial (->* () #:rest list? any/c)))

(struct Shape ([order : (Listof Symbol)]
               [maps : (Immutable-HashTable Symbol -‚ü¶dom‚üß)]
               [expr : -‚ü¶e‚üß])
      #:transparent)
