#lang typed/racket/base

(provide prims-08@)

(require racket/match
         racket/set
         racket/contract
         racket/splicing
         typed/racket/unit
         set-extras
         "../utils/patterns.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../execution/signatures.rkt"
         "../signatures.rkt"
         "def.rkt"
         "signatures.rkt")

(define-unit prims-08@
  (import meta-functions^
          prim-runtime^
          val^ sto^ cache^
          exec^
          prover^)
  (export)

  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; 8.1 Data-structure Contracts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (def flat-named-contract
    (case->
     [any/c flat-contract? . -> . flat-contract?]
     [any/c flat-contract? (or/c not (-> contract? (-> integer? any/c))) . -> . flat-contract?]))
  (def any/c (any/c . -> . #t))
  (def none/c (any/c . -> . not))

  (splicing-local
      ((: reduce-contracts : Œ£ ‚Ñì W (‚Ñì V^ V^ ‚Üí (Values V ŒîŒ£)) V^ ‚Üí R)
       (define (reduce-contracts Œ£ ‚Ñì W-fields comb V‚ÇÄ)
         (define-values (V‚Çê ŒîŒ£‚Çê)
           (match W-fields
             ['() (values V‚ÇÄ ‚ä•ŒîŒ£)]
             [(cons D‚Çó W·µ£)
              (let loop : (Values D ŒîŒ£) ([D‚Çó : D D‚Çó] [W·µ£ : W W·µ£] [i : Natural 0])
                (match W·µ£
                  ['() (values D‚Çó ‚ä•ŒîŒ£)]
                  [(cons D‚Çó* W·µ£*)
                   (define-values (V·µ£ ŒîŒ£·µ£) (loop D‚Çó* W·µ£* (+ 1 i)))
                   (define-values (V* ŒîŒ£*) (comb (‚Ñì-with-id ‚Ñì i) (unpack D‚Çó Œ£) (unpack V·µ£ Œ£)))
                   (values {set V*} (‚ß∫ ŒîŒ£·µ£ ŒîŒ£*))]))]))
         (R-of V‚Çê ŒîŒ£‚Çê)))
    
    (def (or/c Œ£ ‚Ñì‚ÇÄ W)
      #:init []
      #:rest [W (listof contract?)]
      (: step : ‚Ñì V^ V^ ‚Üí (Values V ŒîŒ£))
      (define (step ‚Ñì V‚ÇÅ V‚ÇÇ)
        (define Œ±‚ÇÅ (Œ±:dyn (Œ≤:or/c:l ‚Ñì) H‚ÇÄ))
        (define Œ±‚ÇÇ (Œ±:dyn (Œ≤:or/c:r ‚Ñì) H‚ÇÄ))
        (values (Or/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) (‚ß∫ (alloc Œ±‚ÇÅ V‚ÇÅ) (alloc Œ±‚ÇÇ V‚ÇÇ))))
      (reduce-contracts Œ£ ‚Ñì‚ÇÄ W step {set 'none/c}))
    
    (def (and/c Œ£ ‚Ñì‚ÇÄ W)
      #:init ()
      #:rest [W (listof contract?)]
      (: step : ‚Ñì V^ V^ ‚Üí (Values V ŒîŒ£))
      (define (step ‚Ñì V‚ÇÅ V‚ÇÇ)
        (define Œ±‚ÇÅ (Œ±:dyn (Œ≤:and/c:l ‚Ñì) H‚ÇÄ))
        (define Œ±‚ÇÇ (Œ±:dyn (Œ≤:and/c:r ‚Ñì) H‚ÇÄ))
        (values (And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) (‚ß∫ (alloc Œ±‚ÇÅ V‚ÇÅ) (alloc Œ±‚ÇÇ V‚ÇÇ))))
      (reduce-contracts Œ£ ‚Ñì‚ÇÄ W step {set 'any/c})))

  (def (not/c Œ£ ‚Ñì W)
    #:init ([V flat-contract?])
    (define Œ± (Œ±:dyn (Œ≤:not/c ‚Ñì) H‚ÇÄ))
    (define ‚Ñì* (‚Ñì-with-id ‚Ñì 'not/c))
    (R-of {set (Not/C Œ± ‚Ñì)} (alloc Œ± V)))
  (def* (=/c </c >/c <=/c >=/c) ; TODO
    (real? . -> . flat-contract?))
  (def between/c (real? real? . -> . flat-contract?))
  [def-alias real-in between/c]
  (def integer-in (exact-integer? exact-integer? . -> . flat-contract?))
  (def char-in (char? char? . -> . flat-contract?))
  (def-alias natural-number/c exact-nonnegative-integer?)
  (def string-len/c (real? . -> . flat-contract?))
  (def-alias false/c not)
  (def-pred printable/c)
  (def (one-of/c Œ£ ‚Ñì W)
    #:init ()
    #:rest [W (listof any/c)]
    (define vals
      (map (match-lambda
             [(-b b) b]
             [V^ (error 'one-of/c "only support simple values, got ~a" V^)])
           W))
    (R-of {set (One-Of/C (list->set vals))} ‚ä•ŒîŒ£))
  #;[symbols
     (() #:rest (listof symbol?) . ->* . flat-contract?)]
  (def (vectorof Œ£ ‚Ñì W) ; FIXME uses
    #:init ([V contract?])
    (define Œ± (Œ±:dyn (Œ≤:vectof ‚Ñì) H‚ÇÄ))
    (R-of {set (Vectof/C Œ± ‚Ñì)} (alloc Œ± V)))
  (def vector-immutableof (contract? . -> . contract?))
  (def (vector/c Œ£ ‚Ñì W)
    #:init ()
    #:rest [W (listof contract?)]
    (define S (list->vector (unpack-W W Œ£)))
    (define Œ± (Œ±:dyn (Œ≤:vect/c-elems ‚Ñì (vector-length S)) H‚ÇÄ))
    (R-of {set (Vect/C Œ±)} (alloc Œ± S)))
  #;[vector-immutable/c
     (() #:rest (listof contract?) . ->* . contract?)]
  (def box/c ; FIXME uses
    (contract? . -> . contract?))
  (def box-immutable/c (contract? . -> . contract?))
  (def (listof Œ£ ‚Ñì W)
    #:init ([C contract?])
    (define Œ±‚ÇÄ (Œ≥:imm 'null?))
    (define Œ±‚ÇÅ (Œ±:dyn (Œ≤:or/c:r ‚Ñì) H‚ÇÄ))
    (define Œ±‚Çó (Œ±:dyn (Œ≤:x/c (+x!/memo 'listof ‚Ñì)) H‚ÇÄ))
    (define Disj (Or/C Œ±‚ÇÄ Œ±‚ÇÅ ‚Ñì))
    (define Œ±‚Çö (Œ±:dyn (Œ≤:st/c-elems ‚Ñì -ùíæ-cons) H‚ÇÄ))
    (define Cons (St/C Œ±‚Çö))
    (define C‚Çê {set (X/C Œ±‚Çó)})
    (R-of C‚Çê (‚ß∫ (alloc Œ±‚Çó {set Disj})
                (alloc Œ±‚ÇÅ {set Cons})
                (alloc Œ±‚Çö (vector-immutable (unpack C Œ£) C‚Çê)))))
  (def non-empty-listof (contract? . -> . list-contract?))
  (def list*of (contract? . -> . contract?))
  (def cons/c (contract? contract? . -> . contract?))
  (def list/c (() #:rest (listof contract?) . ->* . list-contract?))
  (def syntax/c (flat-contract? . -> . flat-contract?))
  (def parameter/c ; FIXME uses
    (contract? . -> . contract?))
  (def procedure-arity-includes/c
    (exact-nonnegative-integer? . -> . flat-contract?))
  (def (hash/c Œ£ ‚Ñì W)
    #:init ([V‚Çñ contract?] [V·µ• contract?])
    (define Œ±‚Çñ (Œ±:dyn (Œ≤:hash/c:key ‚Ñì) H‚ÇÄ))
    (define Œ±·µ• (Œ±:dyn (Œ≤:hash/c:val ‚Ñì) H‚ÇÄ))
    (R-of {set (Hash/C Œ±‚Çñ Œ±·µ• ‚Ñì)} (‚ß∫ (alloc Œ±‚Çñ V‚Çñ) (alloc Œ±·µ• V·µ•))))
  (def channel/c (contract? . -> . contract?))
  (def continuation-mark-key/c (contract? . -> . contract?))
  ;;[evt/c (() #:rest (listof chaperone-contract?) . ->* . chaperone-contract?)]
  (def promise/c (contract? . -> . contract?))
  (def flat-contract (flat-contract? . -> . flat-contract?))
  (def flat-contract-predicate (flat-contract? . -> . (any/c . -> . any/c)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; 8.2 Function Contracts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (def-opq predicate/c contract?)
  (def-opq the-unsupplied-arg unsupplied-arg?)
  (def-pred unsupplied-arg?)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; 8.8 Contract Utilities
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; TODO
  (def contract-first-order-passes? (contract? any/c . -> . boolean?))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; 8.8 Contract Utilities
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (def-pred contract?)
  (def-pred chaperone-contract?)
  (def-pred impersonator-contract?)
  (def-pred flat-contract?)
  (def-pred list-contract?)
  (def contract-name (contract? . -> . any/c))
  (def value-contract (has-contract? . -> . (or/c contract? not)))
  [def-pred has-contract?]
  (def value-blame (has-blame? . -> . (or/c blame? not)))
  [def-pred has-blame?]
  (def contract-projection (contract? . -> . (blame? . -> . (any/c . -> . any/c))))
  (def make-none/c (any/c . -> . contract?))
  (def-opq contract-continuation-mark-key continuation-mark-key?))
