#lang typed/racket/base

(provide prims-scv@)

(require racket/match
         racket/contract
         typed/racket/unit
         racket/set
         unreachable
         set-extras
         (submod (lib "typed-racket/private/type-contract.rkt") predicates)
         "../utils/debug.rkt"
         "../utils/list.rkt"
         "../utils/patterns.rkt"
         (except-in "../ast/signatures.rkt" normalize-arity arity-includes?)
         "../runtime/signatures.rkt"
         "../execution/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         "def.rkt"
         (for-syntax racket/base
                     racket/syntax
                     syntax/parse))

(define-unit prims-scv@
  (import static-info^
          prim-runtime^
          sto^ val^ cache^
          app^ mon^ exec^
          prover^)
  (export)

  (def (scv:mon Œ£ ‚Ñì W)
    #:init ([src symbol?] [C contract?] [V any/c])
    (match src
      [(-b (? symbol? name))
       (define l (current-module))
       (define ctx (Ctx l #|TODO|# l ‚Ñì ‚Ñì))
       (mon Œ£ ctx C V)]
      [_ !!!]))

  ;; TODO: obsolete. Can be expressed directly in big step
  (def (scv:struct/c Œ£ ‚Ñì W)
    #:init ([V‚Çñ any/c])
    #:rest [W·µ£ (listof contract?)]
    (define-set seen : Œ± #:mutable? #t)
    (define step : (V ‚Üí R)
      (match-lambda
        [(-st-mk ùíæ)
         (if (= (count-struct-fields ùíæ) (length W·µ£))
             (let ([Œ± (Œ±:dyn (Œ≤:st/c-elems ‚Ñì ùíæ) H‚ÇÄ)])
               (R-of {set (St/C Œ±)} (alloc Œ± (list->vector (unpack-W W·µ£ Œ£)))))
             (begin (err! (Err:Arity (-ùíæ-name ùíæ) W·µ£ ‚Ñì))
                    ‚ä•R))]
        [(Guarded _ _ Œ±)
         (cond [(seen-has? Œ±) ‚ä•R]
               [else (seen-add! Œ±)
                     (fold-ans step (Œ£@ Œ± Œ£))])]
        [_ (err! (blm (‚Ñì-src ‚Ñì) ‚Ñì +‚Ñì‚ÇÄ '(constructor?) (list V‚Çñ)))
           ‚ä•R]))
    (fold-ans step (unpack V‚Çñ Œ£)))

  (def (scv:hash-key Œ£ ‚Ñì W)
    #:init ([V‚Çï hash?])
    (define ac‚ÇÅ : (V ‚Üí R)
      (match-lambda
        [(Empty-Hash) (err! (Blm (‚Ñì-src ‚Ñì) ‚Ñì (‚Ñì-with-src ‚Ñì 'hash-ref)
                                 (list {set (Not/C (Œ≥:imm 'hash-empty?) +‚Ñì‚ÇÄ)})
                                 (list {set (Empty-Hash)})))
                      ‚ä•R]
        [(Hash-Of Œ±‚Çñ _) (R-of (Œ£@ Œ±‚Çñ Œ£))]
        [(Guarded (cons l+ l-) (Hash/C Œ±‚Çñ _ ‚Ñì‚Çï) Œ±)
         (define ctx (Ctx l+ l- ‚Ñì‚Çï ‚Ñì))
         (with-collapsing/R Œ£ [(ŒîŒ£ Ws) (app Œ£ ‚Ñì‚Çï {set 'scv:hash-key} (list (Œ£@ Œ± Œ£)))]
           (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
           (ŒîŒ£‚ß∫R ŒîŒ£ (mon Œ£* ctx (Œ£@ Œ±‚Çñ Œ£) (car (collapse-W^ Œ£* Ws)))))]
        [(? -‚óè?) (R-of {set (-‚óè ‚àÖ)})]
        [_ !!!]))
    (fold-ans/collapsing Œ£ ac‚ÇÅ (unpack V‚Çï Œ£)))

  (def (scv:hash-val Œ£ ‚Ñì W)
    #:init ([V‚Çï hash?])
    (define ac‚ÇÅ : (V ‚Üí R)
      (match-lambda
        [(Empty-Hash) (err! (Blm (‚Ñì-src ‚Ñì) ‚Ñì (‚Ñì-with-src ‚Ñì 'hash-ref)
                                 (list {set (Not/C (Œ≥:imm 'hash-empty?) +‚Ñì‚ÇÄ)})
                                 (list {set (Empty-Hash)})))
                      ‚ä•R]
        [(Hash-Of _ Œ±·µ•) (R-of (Œ£@ Œ±·µ• Œ£))]
        [(Guarded (cons l+ l-) (Hash/C _ Œ±·µ• ‚Ñì‚Çï) Œ±)
         (define ctx (Ctx l+ l- ‚Ñì‚Çï ‚Ñì))
         (with-collapsing/R Œ£ [(ŒîŒ£ Ws) (app Œ£ ‚Ñì‚Çï {set 'scv:hash-val} (list (Œ£@ Œ± Œ£)))]
           (define Œ£* (‚ß∫ Œ£ ŒîŒ£))
           (ŒîŒ£‚ß∫R ŒîŒ£ (mon Œ£* ctx (Œ£@ Œ±·µ• Œ£) (car (collapse-W^ Œ£* Ws)))))]
        [(? -‚óè?) (R-of {set (-‚óè ‚àÖ)})]
        [_ !!!]))
    (fold-ans/collapsing Œ£ ac‚ÇÅ (unpack V‚Çï Œ£)))

  ;; HACK for some internal uses of `make-sequence`
  (def (make-sequence Œ£ ‚Ñì W)
    #:init ()
    #:rest [_ (listof any/c)]
    (R-of (list {set -car} {set -cdr} {set 'values} {set -one} {set -cons?} {set -ff} {set -ff})))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;; MISC
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (def-pred index?)
  (def-pred nonnegative?)
  (def-pred nonpositive?)
  (def-pred extflzero?)
  (def-pred extflnonnegative?)
  (def-pred extflnonpositive?)
  )
