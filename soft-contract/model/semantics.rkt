#lang racket/base

(require racket/set racket/list racket/match redex
         "lib.rkt" "syntax.rkt" "proof-relation.rkt" "delta.rkt")

;; Load expression into initial program configuration
(define-metafunction Œª-sym
  ùë∞ : e -> (œÇ œÉ Œû M)
  [(ùë∞ e) (((e ‚ä•œÅ) ‚ä§Œì (œÑ) (ùí∏ 0)) ‚ä•œÉ ‚ä•Œû ‚ä•M)
   (where œÑ (->œÑ e ‚ä•œÅ ‚ä§Œì))])

;; Narrow reduction step
(define ->‚ÇÅ
  (reduction-relation
   Œª-sym #:domain (œÇ œÉ Œû M)
   
   [--> (((x œÅ)   Œì Œ∫ ùíû) œÉ Œû M)
        (((V @ S) Œì Œ∫ ùíû) œÉ Œû M)
        Var
        (judgment-holds (‚àà V (œÉ@ œÉ (œÅ@ œÅ x))))
        (where S (canonicalize Œì x))
        (where #f (spurious? M Œì V S))]

   ;; Value
   [--> (((b _)   Œì Œ∫ ùíû) œÉ Œû M)
        (((b @ b) Œì Œ∫ ùíû) œÉ Œû M)
        Base]
   [--> ((((Œª (x) e) œÅ)                                 Œì Œ∫ ùíû) œÉ Œû M)
        ((((Clo x e œÅ (invalidate-muts Œì)) @ (Œª (x) e)) Œì Œ∫ ùíû) œÉ Œû M)
        Lam]
   [--> (((‚Ä¢ œÅ)   Œì Œ∫ ùíû) œÉ Œû M)
        (((‚óè @ ‚Ä¢) Œì Œ∫ ùíû) œÉ Œû M)
        Opq]

   ;; Set!
   [--> ((((set! x e) œÅ) Œì (                  œÜ ... œÑ) ùíû) œÉ Œû M)
        (((e œÅ)          Œì ((set! x (œÅ@ œÅ x)) œÜ ... œÑ) ùíû) œÉ Œû M)
        Set!-Push]
   [--> (((V @ S) Œì   ((set! x Œ±) œÜ ... œÑ) ùíû) œÉ   Œû M)
        (((1 @ 1) Œì_1 (           œÜ ... œÑ) ùíû) œÉ_1 Œû M) ; `1` as `void`
        Set!-Pop
        (where Œì_1 (bind Œì x S))
        (where œÉ_1 (‚äî œÉ Œ± V))]

   ;; Conditional
   [--> ((((if e e_1 e_2) œÅ) Œì (               œÜ ... œÑ) ùíû) œÉ Œû M)
        ((  (   e         œÅ) Œì ((if e_1 e_2 œÅ) œÜ ... œÑ) ùíû) œÉ Œû M)
        If-Push]
   [--> (((V @ S) Œì   ((if e _ œÅ) œÜ ... œÑ) ùíû) œÉ Œû M)
        (((e œÅ)   Œì_t (           œÜ ... œÑ) ùíû) œÉ Œû M)
        If-True
        (where (Œì_t _) (MŒì+/- M Œì V S))]
   [--> (((V @ S) Œì   ((if _ e œÅ) œÜ ... œÑ) ùíû) œÉ Œû M)
        (((e œÅ)   Œì_f (           œÜ ... œÑ) ùíû) œÉ Œû M)
        If-False
        (where (_ Œì_f) (MŒì+/- M Œì V S))]

   ;; Application
   [--> ((((e_f e_x l) œÅ) Œì (          œÜ ... œÑ) ùíû) œÉ Œû M)
        (((e_f œÅ)         Œì ((e_x œÅ l) œÜ ... œÑ) ùíû) œÉ Œû M)
        App-Push]
   [--> ((W     Œì  ((e œÅ l) œÜ ... œÑ) ùíû) œÉ Œû M)
        (((e œÅ) Œì  ((W l)   œÜ ... œÑ) ùíû) œÉ Œû M)
        App-Swap]
   [--> ((W_x      Œì   ((W_f l) œÜ ... œÑ) ùíû  ) œÉ   Œû   M)
        (((e œÅ_f*) Œì_f (            œÑ_1) ùíû_1) œÉ_1 Œû_1 M)
        Œ≤
        (where ((Clo x e œÅ_f Œì_f) @ S_f) W_f)
        (where (V_x @ S_x) W_x)
        (where ùíû_1 (ùíû+ ùíû (e l)))
        (where Œ± (->Œ± x ùíû_1))
        (where œÅ_f* ,(hash-set (term œÅ_f) (term x) (term Œ±)))
        (where œÉ_1 (‚äî œÉ Œ± V_x))
        (where œÑ_1 (->œÑ e œÅ_f* Œì_f))
        (where Œû_1 (‚äî Œû œÑ_1 ((rt ùíû Œì S_f [x ‚Ü¶ S_x]) œÜ ... œÑ)))
        ; Debug
        ;(where (ùí∏ n_1) ùíû_1)
        ;(where _ ,(printf "~a~n" (term n_1)))
        ]
   [--> ((W_x Œì   ((W_f l) œÜ ... œÑ) ùíû) œÉ Œû M)
        ((A   Œì_a (        œÜ ... œÑ) ùíû) œÉ Œû M)
        Œ¥
        (where (o @ _) W_f)
        (where (Œì_a A) (Œ¥ l M Œì o W_x))]
   [--> ((W_x                        Œì   ((W l) _ ... œÑ) ùíû) œÉ Œû M)
        (((blame l "apply non-proc") Œì_1 (            œÑ) ùíû) œÉ Œû M)
        App-Err
        (where (_ Œì_1) (MŒì+/-oW M Œì procedure? W))]
   [--> ((W_x     Œì   ((W_f l)                  œÜ ... œÑ) ùíû) œÉ Œû M)
        (((0 @ 0) Œì_1 ((havoc W_x (@S S_f S_x)) œÜ ... œÑ) ùíû) œÉ Œû M)
        App-‚óè
        (where (‚óè @ S_f) W_f)
        (where (_ @ S_x) W_x)
        (where (Œì_1 _) (MŒì+/-oW M Œì procedure? W_f))]

   ;; Havoc
   [--> ((_       Œì ((havoc W S) œÜ ... œÑ) ùíû) œÉ Œû M)
        (((‚óè @ S) Œì (            œÜ ... œÑ) ùíû) œÉ Œû M) ; assume opaque function is extensional by default
        Havoc-Done]
   [--> ((_        Œì (       (havoc W S) œÜ ... œÑ) ùíû) œÉ Œû M)
        (((‚óè @ #f) Œì ((W ‚Ñì‚Ä¢) (havoc W S) œÜ ... œÑ) ùíû) œÉ Œû M)
        Havoc-Cont]

   ;; Return + Change context
   ;; TODO: throw away spurious returns (where path conditions disagree)
   [--> (((V  @ S  ) Œì    (        œÑ) ùíû  ) œÉ Œû M  )
        (((V  @ S_a) Œì_0* (œÜ ... œÑ_0) ùíû_0) œÉ Œû M_1)
        Rt
        (judgment-holds (‚àà ((rt ùíû_0 Œì_0 S_f [x ‚Ü¶ S_x]) œÜ ... œÑ_0) (Œû@ Œû œÑ)))
        (where S_a ,(and (term S) (term (@S S_f S_x))))
        (where Œì_0*
               ,(cond ; attach another path-condition "tail" if function was extensional
                  [(term S_a)
                   (make-Œì (Œì-canonical (term Œì_0))
                           (Œì-props (term Œì_0))
                           (set-add (Œì-rests (term Œì_0)) (term (œÑ S_f [x ‚Ü¶ S_x]))))]
                  [else (term Œì_0)]))
        (where M_1 (‚äî M œÑ ,(make-Ans (term Œì) (term (V @ S)))))]
   
   ))

;; Widened reduction step. Return the relation as well as 3 (boxed) stores
(define (make-->)
  (let ([œÉ^ (box (hash))]
        [Œû^ (box (hash))]
        [M^ (box (hash))])
    (values
     (reduction-relation
      Œª-sym #:domain (œÇ œÉ Œû M)
      [--> (œÇ œÉ Œû M)
           (œÇ_1 œÉ_1* Œû_1* M_1*)
           (computed-name (term any_name))
           (where (_ ... (any_name (œÇ_1 œÉ_1 Œû_1 M_1)) _ ...)
                  ,(apply-reduction-relation/tag-with-names ->‚ÇÅ (term (œÇ œÉ Œû M))))
           (where œÉ_1* (‚äî/m œÉ_1 ,(unbox œÉ^)))
           (where Œû_1* (‚äî/m Œû_1 ,(unbox Œû^)))
           (where M_1* (‚äî/m M_1 ,(unbox M^)))
           (where _ ,(set-box! œÉ^ (term œÉ_1*)))
           (where _ ,(set-box! Œû^ (term Œû_1*)))
           (where _ ,(set-box! M^ (term M_1*)))])
     œÉ^
     Œû^
     M^)))

;; Visualize program traces and return 3 (concurrently updated) global stores
(define (viz e)
  (define-values (-> œÉ Œû M) (make-->))
  (traces -> (term (ùë∞ ,e)))
  (values œÉ Œû M))

;; Evaluate program and return answer as well as 3 global stores
(define (ev e) 
  (define-values (-> œÉ Œû M) (make-->))
  (define œÇs (remove-duplicates
              (map first (apply-reduction-relation* -> (term (ùë∞ ,e)) #:cache-all? #t))))
  (values œÇs (unbox œÉ) (unbox Œû) (unbox M)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Testing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(module+ test

  (define-term e‚ÇÅ
    (-let ([!x 42])
       (set! !x 43)
       (add1 !x ‚Ñì‚ÇÅ)))

  (define-term e‚ÇÇ
    (-let ([f ‚Ä¢‚ÇÄ])
       (if (f 1 ‚Ñì‚ÇÄ)
           (if (f 1 ‚Ñì‚ÇÅ) 42 43) ; should reach 42 only
           (if (f 1 ‚Ñì‚ÇÇ) 44 45)))) ; should reach 45 only

  (define-term e‚ÇÉ
    (-let ([!x 42])
      (-let ([f (Œª (y) (set! !x (add1 !x ‚Ñì‚ÇÄ)))])
         (‚Ä¢‚ÇÅ f ‚Ñì‚Ä¢))))

  (define-term e‚ÇÑ
    ((Œª (f) ((f f ‚Ñì‚ÇÄ) 0 ‚Ñì‚ÇÅ))
     (Œª (x) x)
     ‚Ñì‚ÇÇ))

  (define-term e‚ÇÖ
    (-let* ([jd (Œª (z) z)]
            [id (Œª (u) (jd u ‚Ñì‚ÇÇ))]
            [x (id 0 ‚Ñì‚ÇÄ)]
            [y (id 1 ‚Ñì‚ÇÅ)])
       y))

  (define-term e-kcfa3
    ((Œª (f1)
       (-let ([a (f1 1 ‚Ñì‚ÇÅ)])
         (f1 0 ‚Ñì‚ÇÇ)))
     (Œª (x1)
       ((Œª (f2)
          (-let ([b (f2 1 ‚Ñì‚ÇÉ)])
            (f2 0 ‚Ñì‚ÇÑ)))
        (Œª (x2)
          ((Œª (f3)
             (-let ([c (f3 1 ‚Ñì‚ÇÑ)])
               (f3 0 ‚Ñì‚ÇÖ)))
           (Œª (x3)
             ((Œª (z) (((z x1 ‚Ñì‚ÇÜ) x2 ‚Ñì‚Çá) x3 ‚Ñì‚Çà))
              (Œª (y1)
                (Œª (y2)
                  (Œª (y3) y1)))
              ‚Ñì‚Çâ))
           ‚Ñì‚ÇÅ‚ÇÄ))
        ‚Ñì‚ÇÅ‚ÇÅ))
     ‚Ñì‚ÇÅ‚ÇÇ))

  (define-term e-sat-7
    (-let* ([try (Œª (f) (-or (f 0 ‚Ñì‚ÇÄ) (f 1 ‚Ñì‚ÇÅ)))]
            [p (Œª (x‚ÇÅ)
                  (Œª (x‚ÇÇ)
                    (Œª (x‚ÇÉ)
                      (Œª (x‚ÇÑ)
                        (Œª (x‚ÇÖ)
                          (Œª (x‚ÇÜ)
                            (Œª (x‚Çá)
                              (-and x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ x‚ÇÜ x‚Çá)
                              #;(-and (-or x‚ÇÅ x‚ÇÇ)
                                    (-or x‚ÇÅ (not x‚ÇÇ ‚Ñì‚Çô‚ÇÄ) (not x‚ÇÉ ‚Ñì‚Çô‚ÇÅ))
                                    (-or x‚ÇÉ x‚ÇÑ)
                                    (-or (not x‚ÇÑ ‚Ñì‚Çô‚ÇÇ) x‚ÇÅ)
                                    (-or (not x‚ÇÇ ‚Ñì‚Çô‚ÇÉ) (not x‚ÇÉ ‚Ñì‚Çô‚ÇÑ))
                                    (-or x‚ÇÑ x‚ÇÇ))
                              )))))))]
            [solve
              (Œª (q)
                (try (Œª (n‚ÇÅ)
                       (try (Œª (n‚ÇÇ)
                              (try (Œª (n‚ÇÉ)
                                     (try (Œª (n‚ÇÑ)
                                            (try (Œª (n‚ÇÖ)
                                                   (try (Œª (n‚ÇÜ)
                                                          (try (Œª (n‚Çá)
                                                                 (((((((q n‚ÇÅ ‚Ñì‚ÇÄ‚ÇÅ) n‚ÇÇ ‚Ñì‚ÇÄ‚ÇÇ) n‚ÇÉ ‚Ñì‚ÇÄ‚ÇÉ) n‚ÇÑ ‚Ñì‚ÇÄ‚ÇÑ) n‚ÇÖ ‚Ñì‚ÇÄ‚ÇÖ) n‚ÇÜ ‚Ñì‚ÇÄ‚ÇÜ) n‚Çá ‚Ñì‚ÇÄ‚Çá))
                                                               ‚Ñì‚ÇÅ‚Çá))
                                                        ‚Ñì‚ÇÅ‚ÇÜ))
                                                 ‚Ñì‚ÇÅ‚ÇÖ))
                                          ‚Ñì‚ÇÅ‚ÇÑ))
                                   ‚Ñì‚ÇÅ‚ÇÉ))
                            ‚Ñì‚ÇÅ‚ÇÇ))
                     ‚Ñì‚ÇÅ‚ÇÅ))])
       (solve p ‚Ñì‚Çú)))

  (define-term e-rep
    (-let* ([Y (Œª (f)
                 (Œª (x) (((Œª (g) (f (Œª (x) ((g g ‚ÑìY‚ÇÄ) x ‚ÑìY‚ÇÅ)) ‚ÑìY‚ÇÇ))
                          (Œª (g) (f (Œª (x) ((g g ‚ÑìY‚ÇÉ) x ‚ÑìY‚ÇÑ)) ‚ÑìY‚ÇÖ))
                          ‚ÑìY‚ÇÜ)
                         x
                         ‚ÑìY‚Çá)))]
            [id (Œª (a) a)]
            [mk-rep (Œª (rep)
                      (Œª (n)
                        (-let* ([id (Œª (p) p)])
                           (if n
                               (add1 (rep (sub1 n ‚Ñìrep‚ÇÅ) ‚Ñìrep‚ÇÇ) ‚Ñìrep‚ÇÉ)
                               0))))])
      ((Y mk-rep ‚Ñì·µ£‚ÇÄ) 100 ‚Ñì·µ£‚ÇÅ)))

  ;; no letrec yet
  #;(define-term e-blur
    (-let* ([id (Œª (x) x)]
            [blur (Œª (y) y)]
            [lp (Œª (a)
                  (Œª (n)
                    (if n
                        (-let* ([r ((blur id ‚Ñì‚ÇÄ) 1 ‚Ñì‚ÇÅ)]
                                [s ((blur id ‚Ñì‚ÇÇ) 0 ‚Ñì‚ÇÉ)])
                          (not (((blur lp ‚Ñì‚ÇÑ) s ‚Ñì‚ÇÖ) (sub1 n ‚Ñì‚ÇÜ) ‚Ñì‚Çá) ‚Ñì‚Çà))
                        (id a ‚Ñì‚Çâ))))])
       ((lp 0 ‚Ñì‚ÇÅ‚ÇÄ) 2 ‚Ñì‚ÇÅ‚ÇÅ)))

  (define-term e-eta
    (-let* ([do-something (Œª (z) 10)]
            [id (Œª (y)
                  (-begin
                   (do-something 42 ‚Ñì‚ÇÑ)
                   y))])
      ((id (Œª (a) a) ‚Ñì‚ÇÄ) 1 ‚Ñì‚ÇÅ)
      ((id (Œª (b) b) ‚Ñì‚ÇÇ) 0 ‚Ñì‚ÇÉ)))

  (define-term e-loop
    (-let* ([!lp1 2000]
            [a
             (set! !lp1
                   (Œª (i)
                     (Œª (x)
                       (-let ([a* (not i ‚Ñì‚ÇÅ‚ÇÑ)])
                          (if
                           a*
                           x
                           (-let* ([!lp2 1000]
                                   [b
                                    (set! !lp2
                                          (Œª (j)
                                            (Œª (f)
                                              (Œª (y)
                                                (-let ([b* (not j ‚Ñì‚ÇÅ‚ÇÉ)])
                                                  (if b*
                                                      ((!lp1 (sub1 i ‚Ñì‚ÇÅ‚ÇÄ) ‚Ñì‚ÇÅ‚ÇÅ) y ‚Ñì‚ÇÅ‚ÇÇ)
                                                      (-let ([tmp (f y ‚Ñì‚Çâ)])
                                                        (((!lp2 (sub1 j ‚Ñì‚ÇÖ) ‚Ñì‚ÇÜ) f ‚Ñì‚Çá) tmp ‚Ñì‚Çà))))))))])
                             (((!lp2 10 ‚Ñì‚ÇÇ) (Œª (n) (add1 i ‚Ñì‚ÇÅ‚ÇÖ)) ‚Ñì‚ÇÉ) x ‚Ñì‚ÇÑ)))))))])
      ((!lp1 10 ‚Ñì‚ÇÄ) 0 ‚Ñì‚ÇÅ)))

  (define-term e-mj09
    (-let* ([h (Œª (b)
                 (-let* ([g (Œª (z) z)]
                         [f (Œª (k) (if b (k 1 ‚Ñì‚ÇÑ) (k 2 ‚Ñì‚ÇÖ)))]
                         [y (f (Œª (x) x) ‚Ñì‚ÇÉ)])
                   (g y ‚Ñì‚ÇÇ)))]
            [x (h 1 ‚Ñì‚ÇÄ)]
            [y (h 0 ‚Ñì‚ÇÅ)])
      y))
  )

