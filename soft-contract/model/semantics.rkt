#lang racket/base

(require racket/set racket/list racket/match redex
         "lib.rkt" "syntax.rkt" "proof-relation.rkt" "delta.rkt")

;; Load expression into initial program configuration
(define-metafunction Œª-sym
  ùë∞ : e -> (œÇ œÉ Œû M)
  [(ùë∞ e) (((e ‚ä•œÅ) ‚ä§Œì (œÑ)) ‚ä•œÉ ‚ä•Œû ‚ä•M)
   (where œÑ (->œÑ e ‚ä•œÅ ‚ä§Œì))])

;; Narrow reduction step
(define ->‚ÇÅ
  (reduction-relation
   Œª-sym #:domain (œÇ œÉ Œû M)
   
   [--> (((x œÅ)   Œì Œ∫) œÉ Œû M)
        (((V @ S) Œì Œ∫) œÉ Œû M)
        Var
        (judgment-holds (‚àà V (œÉ@ œÉ (œÅ@ œÅ x))))
        (where S (canonicalize Œì x))
        (where #f (spurious? M Œì V S))]

   ;; Value
   [--> (((b _)   Œì Œ∫) œÉ Œû M)
        (((b @ b) Œì Œ∫) œÉ Œû M)
        Base]
   [--> ((((Œª (x) e) œÅ)                                 Œì Œ∫) œÉ Œû M)
        ((((Clo x e œÅ (invalidate-muts Œì)) @ (Œª (x) e)) Œì Œ∫) œÉ Œû M)
        Lam]
   [--> (((‚Ä¢ œÅ)   Œì Œ∫) œÉ Œû M)
        (((‚óè @ ‚Ä¢) Œì Œ∫) œÉ Œû M)
        Opq]

   ;; Set!
   [--> ((((set! x e) œÅ) Œì (                  œÜ ... œÑ)) œÉ Œû M)
        (((e œÅ)          Œì ((set! x (œÅ@ œÅ x)) œÜ ... œÑ)) œÉ Œû M)
        Set!-Push]
   [--> (((V @ S) Œì   ((set! x Œ±) œÜ ... œÑ)) œÉ   Œû M)
        (((1 @ 1) Œì_1 (           œÜ ... œÑ)) œÉ_1 Œû M) ; `1` as `void`
        Set!-Pop
        (where Œì_1 (bind Œì x S))
        (where œÉ_1 (‚äî œÉ Œ± V))]

   ;; Conditional
   [--> ((((if e e_1 e_2) œÅ) Œì (               œÜ ... œÑ)) œÉ Œû M)
        ((  (   e         œÅ) Œì ((if e_1 e_2 œÅ) œÜ ... œÑ)) œÉ Œû M)
        If-Push]
   [--> (((V @ S) Œì   ((if e _ œÅ) œÜ ... œÑ)) œÉ Œû M)
        (((e œÅ)   Œì_t (           œÜ ... œÑ)) œÉ Œû M)
        If-True
        (where (Œì_t _) (MŒì+/- M Œì V S))]
   [--> (((V @ S) Œì   ((if _ e œÅ) œÜ ... œÑ)) œÉ Œû M)
        (((e œÅ)   Œì_f (           œÜ ... œÑ)) œÉ Œû M)
        If-False
        (where (_ Œì_f) (MŒì+/- M Œì V S))]

   ;; Application
   [--> ((((e_f e_x l) œÅ) Œì (          œÜ ... œÑ)) œÉ Œû M)
        (((e_f œÅ)         Œì ((e_x œÅ l) œÜ ... œÑ)) œÉ Œû M)
        App-Push]
   [--> ((W     Œì  ((e œÅ l) œÜ ... œÑ)) œÉ Œû M)
        (((e œÅ) Œì  ((W l)   œÜ ... œÑ)) œÉ Œû M)
        App-Swap]
   [--> ((W_x      Œì   ((W_f l) œÜ ... œÑ)) œÉ   Œû   M)
        (((e œÅ_f*) Œì_f (            œÑ_1)) œÉ_1 Œû_1 M)
        Œ≤
        (where ((Clo x e œÅ_f Œì_f) @ S_f) W_f)
        (where (V_x @ S_x) W_x)
        (where Œ± (->Œ± x e S_x ,(Œì-props (term Œì))))
        (where œÉ_1 (‚äî œÉ Œ± V_x))
        (where œÅ_f* ,(hash-set (term œÅ_f) (term x) (term Œ±)))
        (where œÑ_1 (->œÑ e œÅ_f* Œì_f))
        (where Œû_1 (‚äî Œû œÑ_1 ((rt Œì S_f [x ‚Ü¶ S_x]) œÜ ... œÑ)))]
   [--> ((W_x Œì   ((W_f l) œÜ ... œÑ)) œÉ Œû M)
        ((A   Œì_a (        œÜ ... œÑ)) œÉ Œû M)
        Œ¥
        (where (o @ _) W_f)
        (where (Œì_a A) (Œ¥ l M Œì o W_x))]
   [--> ((W_x                        Œì   ((W l) _ ... œÑ)) œÉ Œû M)
        (((blame l "apply non-proc") Œì_1 (            œÑ)) œÉ Œû M)
        App-Err
        (where (_ Œì_1) (MŒì+/-oW M Œì procedure? W))]
   [--> ((W_x     Œì   ((W_f l)                  œÜ ... œÑ)) œÉ Œû M)
        (((0 @ 0) Œì_1 ((havoc W_x (@S S_f S_x)) œÜ ... œÑ)) œÉ Œû M)
        App-‚óè
        (where (‚óè @ S_f) W_f)
        (where (_ @ S_x) W_x)
        (where (Œì_1 _) (MŒì+/-oW M Œì procedure? W_f))]

   ;; Havoc
   [--> ((_       Œì ((havoc W S) œÜ ... œÑ)) œÉ Œû M)
        (((‚óè @ S) Œì (            œÜ ... œÑ)) œÉ Œû M) ; assume opaque function is extensional by default
        Havoc-Done]
   [--> ((_        Œì (          (havoc W S) œÜ ... œÑ)) œÉ Œû M)
        (((‚óè @ #f) Œì ((W ‚Ñì‚Ä¢) (havoc W S) œÜ ... œÑ)) œÉ Œû M)
        Havoc-Cont]

   ;; Return + Change context
   ;; TODO: throw away spurious returns (where path conditions disagree)
   [--> (((V  @ S  ) Œì    (        œÑ)) œÉ Œû M  )
        (((V  @ S_a) Œì_0* (œÜ ... œÑ_0)) œÉ Œû M_1)
        Rt
        (judgment-holds (‚àà ((rt Œì_0 S_f [x ‚Ü¶ S_x]) œÜ ... œÑ_0) (Œû@ Œû œÑ)))
        (where S_a ,(and (term S) (term (@S S_f S_x))))
        (where Œì_0*
               ,(cond ; attach another path-condition "tail" if function was extensional
                  [(term S_a)
                   (make-Œì (Œì-canonical (term Œì_0))
                           (Œì-props (term Œì_0))
                           (set-add (Œì-rests (term Œì_0)) (term (œÑ S_f [x ‚Ü¶ S_x]))))]
                  [else (term Œì_0)]))
        (where M_1 (‚äî M œÑ ,(make-Ans (term Œì) (term (V @ S)))))]
   
   ))

;; Widened reduction step. Return the relation as well as 3 (boxed) stores
(define (make-->)
  (let ([œÉ^ (box (hash))]
        [Œû^ (box (hash))]
        [M^ (box (hash))])
    (values
     (reduction-relation
      Œª-sym #:domain (œÇ œÉ Œû M)
      [--> (œÇ œÉ Œû M)
           (œÇ_1 œÉ_1* Œû_1* M_1*)
           (computed-name (term any_name))
           (where (_ ... (any_name (œÇ_1 œÉ_1 Œû_1 M_1)) _ ...)
                  ,(apply-reduction-relation/tag-with-names ->‚ÇÅ (term (œÇ œÉ Œû M))))
           (where œÉ_1* (‚äî/m œÉ_1 ,(unbox œÉ^)))
           (where Œû_1* (‚äî/m Œû_1 ,(unbox Œû^)))
           (where M_1* (‚äî/m M_1 ,(unbox M^)))
           (where _ ,(set-box! œÉ^ (term œÉ_1*)))
           (where _ ,(set-box! Œû^ (term Œû_1*)))
           (where _ ,(set-box! M^ (term M_1*)))])
     œÉ^
     Œû^
     M^)))

;; Visualize program traces and return 3 (concurrently updated) global stores
(define (viz e)
  (define-values (-> œÉ Œû M) (make-->))
  (traces -> (term (ùë∞ ,e)))
  (values œÉ Œû M))

;; Evaluate program and return answer as well as 3 global stores
(define (ev e) 
  (define-values (-> œÉ Œû M) (make-->))
  (define œÇs (map first (apply-reduction-relation* -> (term (ùë∞ ,e)) #:cache-all? #t)))
  (values œÇs (unbox œÉ) (unbox Œû) (unbox M)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Testing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(module+ test

  (define-term e‚ÇÅ
    (-let ([!x 42])
      (-begin
         (set! !x 43))
         (add1 !x ‚Ñì‚ÇÅ)))

  (define-term e‚ÇÇ
    (-let ([f ‚Ä¢‚ÇÄ])
       (if (f 1 ‚Ñì‚ÇÄ)
           (if (f 1 ‚Ñì‚ÇÅ) 42 43) ; should reach 42 only
           (if (f 1 ‚Ñì‚ÇÇ) 44 45)))) ; should reach 45 only

  (define-term e‚ÇÉ
    (-let ([!x 42])
      (-let ([f (Œª (y) (set! !x (add1 !x ‚Ñì‚ÇÄ)))])
         (‚Ä¢‚ÇÅ f ‚Ñì‚Ä¢))))

  (define-term e‚ÇÑ
    ((Œª (f) ((f f ‚Ñì‚ÇÄ) 0 ‚Ñì‚ÇÅ))
     (Œª (x) x)
     ‚Ñì‚ÇÇ))
  )

