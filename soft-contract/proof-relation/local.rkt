#lang typed/racket/base

(provide local-prover@)

(require (for-syntax racket/base
                     racket/contract
                     "../utils/pretty.rkt")
         typed/racket/unit
         racket/match
         racket/set
         racket/bool
         racket/list
         syntax/parse/define
         (only-in racket/list first second)
         set-extras
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit local-prover@
  (import static-info^ prims^ pc^ sto^ val^ pretty-print^)
  (export local-prover^)
  (init-depend prims^)

  ;; Check whether predicate excludes boolean
  (define boolean-excludes? (set->predicate (get-exclusions 'boolean?)))

  ;; Check if expression returns truth
  (define (‚ä¢t [t : -t]) : -R
    (match t
      [(-b b) (if b '‚úì '‚úó)]
      [(? -‚Ä¢?) '?]
      [(? -v?) '‚úì]
      [(-t.@ f xs) (‚ä¢@ f xs)]
      [_ '?]))

  ;; Check if application returns truth
  (define (‚ä¢@ [p : -h] [xs : (Listof -t)]) : -R
    (case p
      [(equal? eq? eqv? =)
       (match xs
         [(list t‚ÇÅ t‚ÇÇ)
          (match* (t‚ÇÅ t‚ÇÇ)
            [((? -Œª? v‚ÇÅ) (? -Œª? v‚ÇÇ)) ; can't compare higher-order literals
             (if (equal? v‚ÇÅ v‚ÇÇ) '? '‚úó)]
            [((? -‚Ä¢?) _) '?]
            [(_ (? -‚Ä¢?)) '?]
            [((? -v? v‚ÇÅ) (? -v? v‚ÇÇ)) (boolean->R (equal? v‚ÇÅ v‚ÇÇ))]
            [((-t.x x) (-t.x y))
             (if (equal? x y) '‚úì '?)]
            [(_ _) '?])]
         [_ #|TODO|# '?])]
      [(<=)
       (match xs
         [(list (-b (? (<=/c 0))) (-t.@ '* (list t t))) '‚úì]
         [_ '?])]
      [(<)
       (match xs
         [(list (-t.@ '* (list t t)) (-b (? (>=/c 0)))) '‚úì]
         [_ '?])]
      [(>=) (‚ä¢@ '<= (reverse xs))]
      [(>)  (‚ä¢@ '<  (reverse xs))]
      [else '?]))

  (define (Œì‚ä¢t [œÜs : -Œì] [t‚ÇÄ : -?t]) : -R

    (define t ; FIXME clean up hack
      (match t‚ÇÄ
        [(-t.@ (-‚â•/c b) (list t*))
         (-t.@ '<= (list (-b b) t*))]
        [(-t.@ (->/c b) (list t*))
         (-t.@ '< (list (-b b) t*))]
        [(-t.@ (-</c b) (list t*))
         (-t.@ '< (list t* (-b b)))]
        [(-t.@ (-‚â§/c b) (list t*))
         (-t.@ '<= (list t* (-b b)))]
        [(-t.@ (-‚â¢/c b) (list t*))
         (-t.@ 'not (list (-t.@ 'equal? (list t* (-b b)))))]
        [_ t‚ÇÄ]))

    (when (‚àã œÜs -ff)
      ;; Rule `{‚Ä¶ #f ‚Ä¶} ‚ä¢ e : ‚úì` is not always desirable, because
      ;; sometimes we want `{‚Ä¶ #f ‚Ä¶} ‚ä¢ (¬¨ e) : ‚úì`, which means `{‚Ä¶ #f ‚Ä¶} ‚ä¢ e : ‚úó`
      ;; This is a problem with precision rather than soundness, but I want
      ;; (obviously) inconsistent path-conditions to not exist in the first place.
      (error 'Œì‚ä¢t "Attempt to prove/refute with inconsistent path-condition: ~a" (show-Œì œÜs)))

    (: t‚ä¢t : -t -t ‚Üí -R)
    ;; Check if `t‚ÇÇ` returns truth when `t‚ÇÅ` does
    (define (t‚ä¢t t‚ÇÅ t‚ÇÇ)
      (with-debugging/off
        ((ans)
         ;; (‚ä¢t t‚ÇÇ) is not redundant, because this may be just a sub-exp of the original goal
         (case (‚ä¢t t‚ÇÅ)
           [(‚úó) '‚úì]
           [else
            (match (‚ä¢t t‚ÇÇ)
              ['?
               (match* (t‚ÇÅ t‚ÇÇ)
                 ; t ‚áí t
                 [(t t) '‚úì]
                 ; NOTE: Don't abuse "contrapositive"
                 ; (¬¨t‚ÇÅ ‚ä¢ ¬¨t‚ÇÇ : ‚úó) does not follow from (t‚ÇÇ ‚ä¢ t‚ÇÅ : ‚úó)
                 [((-t.not t‚ÇÅ*) (-t.not t‚ÇÇ*))
                  (case (t‚ä¢t t‚ÇÇ* t‚ÇÅ*)
                    [(‚úì)   '‚úì]
                    [(‚úó ?) '?])]
                 [(t‚ÇÅ (-t.not t‚ÇÇ*))
                  (not-R (t‚ä¢t t‚ÇÅ t‚ÇÇ*))]
                 [((-t.@ (? -h? p) (list t)) (-t.@ (? -h? q) (list t)))
                  (p‚áíp p q)] ; FIXME
                 [((-t.@ (? -o? p) (list t)) t)
                  (cond
                    [(eq? 'not p) '‚úó]
                    [(and (symbol? p) (boolean-excludes? p)) '‚úì]
                    [(-st-p? p) '‚úì]
                    [else '?])]
                 [((-t.@ (? op-‚â°?) (list t‚ÇÅ t‚ÇÇ)) (-t.@ (? -o? p) (list t‚ÇÅ)))
                  (‚ä¢@ p (list t‚ÇÇ))]
                 [((-t.@ (? op-‚â°?) (list t‚ÇÅ t‚ÇÇ)) (-t.@ (? -o? p) (list t‚ÇÇ)))
                  (‚ä¢@ p (list t‚ÇÅ))]
                 [((-t.@ (? op-‚â°?) (list t (-b b‚ÇÅ)))
                   (-t.@ (? op-‚â°?) (list t (-b b‚ÇÇ))))
                  (boolean->R (equal? b‚ÇÅ b‚ÇÇ))]
                 [((-t.@ (? op-‚â°?) (list (-b b‚ÇÅ) t))
                   (-t.@ (? op-‚â°?) (list (-b b‚ÇÇ) t)))
                  (boolean->R (equal? b‚ÇÅ b‚ÇÇ))]
                 ;; Ariths
                 [((or (-t.@ (? op-‚â°?) (list t (-b b‚ÇÅ)))
                       (-t.@ (? op-‚â°?) (list (-b b‚ÇÅ) t)))
                   (-t.@ (? -special-bin-o? o) (list t (-b b‚ÇÇ))))
                  (p‚áíp (-‚â°/c b‚ÇÅ) ((bin-o->h o) b‚ÇÇ))]
                 [((or (-t.@ (? op-‚â°?) (list t (-b b‚ÇÅ)))
                       (-t.@ (? op-‚â°?) (list (-b b‚ÇÅ) t)))
                   (-t.@ (? -special-bin-o? o) (list (-b b‚ÇÇ) t)))
                  (p‚áíp (-‚â°/c b‚ÇÅ) ((bin-o->h (flip-bin-o o)) b‚ÇÇ))]
                 ;; Ariths special cases (TODO generalize)
                 [((-t.@ '<          (list (-b (? real? b‚ÇÅ)) t))
                   (-t.@ (or '<= '<) (list (-b (? real? b‚ÇÇ)) t)))
                  #:when (<= b‚ÇÇ b‚ÇÅ)
                  '‚úì]
                 ;; List
                 [((-t.@ (? op-‚â°?) (or (list (-t.@ 'length (list t)) (-b (? integer? n)))
                                       (list (-b (? integer? n)) (-t.@ 'length (list t)))))
                   (-t.@ (== -cons?) (list t)))
                  #:when n
                  (boolean->R (> n 0))]
                 [((-t.@ '<= (list (-b (? real? n)) (-t.@ 'length (list t))))
                   (-t.@ (== -cons?) (list t)))
                  #:when (<= 1 n)
                  '‚úì]
                 [((-t.@ '< (list (-b (? real? n)) (-t.@ 'length (list t))))
                   (-t.@ (== -cons?) (list t)))
                  #:when (<= 0 n)
                  '‚úì]
                 [((-t.@ (? op-‚â°?) (list (-t.@ 'length (list t)) (-b (? integer? n))))
                   (-t.@ 'null? (list t)))
                  (boolean->R (= n 0))]
                 [((-t.@ '<= (list (-b (? real? n)) (-t.@ 'length (list t))))
                   (-t.@ 'null? (list t)))
                  #:when (<= 1 n)
                  '‚úó]
                 [((-t.@ '< (list (-b (? real? n)) (-t.@ 'length (list t))))
                   (-t.@ (== -cons?) (list t)))
                  #:when (<= 0 n)
                  '‚úó]
                 [(_ _) '?])]
              [R R])]))
        (printf "~a ‚ä¢ ~a : ~a~n" (show-t t‚ÇÅ) (show-t t‚ÇÇ) ans)))

    (with-debugging/off
      ((ans)
       (cond
         [t
          (first-R
           (‚ä¢t t)
           (match t
             [_ #:when (‚àã œÜs         t ) '‚úì]
             [_ #:when (‚àã œÜs (-t.not t)) '‚úó]
             [(-t.not t*) #:when (‚àã œÜs t*) '‚úó]
             [else '?])
           (for*/fold ([R : -R '?])
                      ([œÜ (in-set œÜs)] #:when (eq? '? R))
             (t‚ä¢t œÜ t))
           '?)]
         [else '?]))
      (printf "~a ‚ä¢À° ~a : ~a~n" (show-Œì œÜs) (show-t t) ans)))

  ;; Return whether predicate `p` definitely implies or excludes `q`.
  (define (p‚áíp [p : -h] [q : -h]) : -R
    (match* (p q)
      [(_ 'any/c) '‚úì]
      [('none/c _) '‚úì]
      [(_ 'none/c) '‚úó]
      [((? symbol? p) (? symbol? q)) (o‚áío p q)]
      [(p 'values)
       (case p
         [(not) '‚úó]
         [(any/c) '?]
         [else '‚úì])]
      [((-st-p ùíæ‚ÇÅ) (-st-p ùíæ‚ÇÇ))
       (boolean->R (ùíæ‚ÇÅ . substruct? . ùíæ‚ÇÇ))]

      ;; Negate
      [((-not/c (? -h? p)) (-not/c (? -h? q)))
       (case (p‚áíp q p)
         [(‚úì) '‚úì]
         [else '?])]
      [(p (-not/c (? -h? q)))
       (not-R (p‚áíp p q))]
      [((-not/c (? -h? p)) q)
       (case (p‚áíp q p)
         [(‚úì) '‚úó]
         [else '?])]

      ;; Special rules for reals
      ; 
      [(_ 'positive?) (p‚áíp p (->/c 0))]
      [(_ 'negative?) (p‚áíp p (-</c 0))]
      [('positive? _) (p‚áíp (->/c 0) q)]
      [('negative? _) (p‚áíp (-</c 0) q)]
      [(_ 'zero?) (p‚áíp p (-‚â°/c 0))]
      [('zero? _) (p‚áíp (-‚â°/c 0) q)]
      ; < and <
      [((-</c (? real? a)) (-</c (? real? b))) (if (<= a b) '‚úì '?)]
      [((-‚â§/c (? real? a)) (-‚â§/c (? real? b))) (if (<= a b) '‚úì '?)]
      [((-</c (? real? a)) (-‚â§/c (? real? b))) (if (<= a b) '‚úì '?)]
      [((-‚â§/c (? real? a)) (-</c (? real? b))) (if (<= a b) '‚úì '?)]
      ; > and >
      [((->/c (? real? a)) (->/c (? real? b))) (if (>= a b) '‚úì '?)]
      [((-‚â•/c (? real? a)) (-‚â•/c (? real? b))) (if (>= a b) '‚úì '?)]
      [((->/c (? real? a)) (-‚â•/c (? real? b))) (if (>= a b) '‚úì '?)]
      [((-‚â•/c (? real? a)) (->/c (? real? b))) (if (>= a b) '‚úì '?)]
      ; < and >
      [((-</c (? real? a)) (->/c (? real? b))) (if (<= a b) '‚úó '?)]
      [((-‚â§/c (? real? a)) (-‚â•/c (? real? b))) (if (<  a b) '‚úó '?)]
      [((-</c (? real? a)) (-‚â•/c (? real? b))) (if (<= a b) '‚úó '?)]
      [((-‚â§/c (? real? a)) (->/c (? real? b))) (if (<= a b) '‚úó '?)]
      ; > and <
      [((->/c (? real? a)) (-</c (? real? b))) (if (>= a b) '‚úó '?)]
      [((-‚â•/c (? real? a)) (-‚â§/c (? real? b))) (if (>  a b) '‚úó '?)]
      [((->/c (? real? a)) (-‚â§/c (? real? b))) (if (>= a b) '‚úó '?)]
      [((-‚â•/c (? real? a)) (-</c (? real? b))) (if (>= a b) '‚úó '?)]
      ; exact-nonnegative-integer?
      [('exact-nonnegative-integer? (-</c (? real? r))) (if (<= r 0) '‚úó '?)]
      [('exact-nonnegative-integer? (-‚â§/c (? real? r))) (if (<  r 0) '‚úó '?)]
      [('exact-nonnegative-integer? (->/c (? real? r))) (if (<  r 0) '‚úì '?)]
      [('exact-nonnegative-integer? (-‚â•/c (? real? r))) (if (<= r 0) '‚úì '?)]
      [((-</c (? real? r)) 'exact-nonnegative-integer?) (if (<= r 0) '‚úó '?)]
      [((-‚â§/c (? real? r)) 'exact-nonnegative-integer?) (if (<  r 0) '‚úó '?)]
      ; exact-positive-integer?
      [('exact-positive-integer? (-</c (? real? r))) (if (<  r 1) '‚úó '?)]
      [('exact-positive-integer? (-‚â§/c (? real? r))) (if (<  r 1) '‚úó '?)]
      [('exact-positive-integer? (->/c (? real? r))) (if (<  r 1) '‚úì '?)]
      [('exact-positive-integer? (-‚â•/c (? real? r))) (if (<= r 1) '‚úì '?)]
      [((-</c (? real? r)) 'exact-positive-integer?) (if (<= r 1) '‚úó '?)]
      [((-‚â§/c (? real? r)) 'exact-positive-integer?) (if (<  r 1) '‚úó '?)]
      ; _ -> real?
      [((or (? -</c?) (? ->/c?) (? -‚â§/c?) (? -‚â•/c?)) (or 'real? 'number?)) '‚úì]
      [((? -b? b) o) (p‚àãVs ‚ä•œÉ o b)]
      
      
      ; equal?
      [((-‚â°/c b‚ÇÅ) (-‚â°/c b‚ÇÇ)) (boolean->R (equal? b‚ÇÅ b‚ÇÇ))]
      [((-‚â¢/c b‚ÇÅ) (-‚â°/c b‚ÇÇ)) (boolean->R (not (equal? b‚ÇÅ b‚ÇÇ)))]
      [((-</c (? real? b‚ÇÅ)) (-‚â°/c (? real? b‚ÇÇ))) #:when (<= b‚ÇÅ b‚ÇÇ) '‚úó]
      [((-‚â§/c (? real? b‚ÇÅ)) (-‚â°/c (? real? b‚ÇÇ))) #:when (<  b‚ÇÅ b‚ÇÇ) '‚úó]
      [((->/c (? real? b‚ÇÅ)) (-‚â°/c (? real? b‚ÇÇ))) #:when (>= b‚ÇÅ b‚ÇÇ) '‚úó]
      [((-‚â•/c (? real? b‚ÇÅ)) (-‚â°/c (? real? b‚ÇÇ))) #:when (>  b‚ÇÅ b‚ÇÇ) '‚úó]
      ; ‚â¢/c
      [((-‚â°/c b‚ÇÅ) (-‚â¢/c b‚ÇÇ)) (boolean->R (not (equal? b‚ÇÅ b‚ÇÇ)))]
      [((-</c (? real? b‚ÇÅ)) (-‚â¢/c (? real? b‚ÇÇ))) #:when (<= b‚ÇÅ b‚ÇÇ) '‚úì]
      [((-‚â§/c (? real? b‚ÇÅ)) (-‚â¢/c (? real? b‚ÇÇ))) #:when (<  b‚ÇÅ b‚ÇÇ) '‚úì]
      [((->/c (? real? b‚ÇÅ)) (-‚â¢/c (? real? b‚ÇÇ))) #:when (>= b‚ÇÅ b‚ÇÇ) '‚úì]
      [((-‚â•/c (? real? b‚ÇÅ)) (-‚â¢/c (? real? b‚ÇÇ))) #:when (>  b‚ÇÅ b‚ÇÇ) '‚úì]
      ; 
      [((-‚â°/c (? real? b‚ÇÅ)) (-</c (? real? b‚ÇÇ))) (boolean->R (<  b‚ÇÅ b‚ÇÇ))]
      [((-‚â°/c (? real? b‚ÇÅ)) (-‚â§/c (? real? b‚ÇÇ))) (boolean->R (<= b‚ÇÅ b‚ÇÇ))]
      [((-‚â°/c (? real? b‚ÇÅ)) (->/c (? real? b‚ÇÇ))) (boolean->R (>  b‚ÇÅ b‚ÇÇ))]
      [((-‚â°/c (? real? b‚ÇÅ)) (-‚â•/c (? real? b‚ÇÇ))) (boolean->R (>= b‚ÇÅ b‚ÇÇ))]

      ;; default
      [(p p) '‚úì]
      [((? base-only?) (? -st-p?)) '‚úó]
      [((? -st-p?) (? base-only?)) '‚úó]
      [(_ _) '?]))

  (define (base-only? [p : -h]) : Boolean
    (and (symbol? p) (not (memq p '(list? struct?)))))

  (define (plausible-œÜs-t? [œÜs : -Œì] [t : -?t]) : Boolean
    (with-debugging/off
      ((a) (not (eq? '‚úó (Œì‚ä¢t œÜs t))))
      (when a
        (printf "~a ‚ä¢ ~a : ~a~n"
                (set-map œÜs show-t)
                (show-t t)
                (if a 'plausible 'implausible)))))

  (: plausible‚ÇÅ-V-t? : -V -t ‚Üí Boolean)
  (define (plausible‚ÇÅ-V-t? V t)
    (define label : (Any ‚Üí (U Symbol -ùíæ #f))
      (match-lambda
        [(-b b)
         (cond [(number? b) 'number]
               [(string? b) 'string]
               [(not b) 'false]
               [(boolean? b) 'true]
               [(symbol? b) 'symbol]
               [else 'base])]
        [(or (? -Œª?) (? -Fn?) (? -Ar?) (? -o?)) 'procedure]
        [(or (? -Vector?) (? -Vector^?) (? -Vector/guard?)) 'vector]
        [(or (? -Hash^?) (? -Hash/guard?)
             (-t.@ (or 'make-hash 'make-hasheq 'hash 'hasheq) _)) 'hash]
        [(or (? -Set^?) (? -Set/guard?)
             (-t.@ (or 'set 'make-set 'seteq) _)) 'set]
        ;; could be wrapped by superstruct's contract, so no
        [(or (-St ùíæ _) #;(-St* (-St/C _ ùíæ _) _ _) (-t.@ (-st-mk ùíæ) _)) ùíæ]
        [_ #f]))
    (define V.lab (label V))
    (define t.lab (label t))
    (or (not V.lab)
        (not t.lab)
        (equal? V.lab t.lab)))

  (define (plausible-V-t? [œÜs : -Œì] [V : -V] [t : -?t]) : Boolean
    (define-syntax-rule (with-prim-checks p? ...)
      (cond
        [t
         (and (plausible‚ÇÅ-V-t? V t)
              (match V
                [(or (-St ùíæ _) (-St* (-St/C _ ùíæ _) _ _))
                 #:when ùíæ
                 (plausible-œÜs-t? œÜs (?t@ (-st-p ùíæ) t))]
                [(or (? -Vector?) (? -Vector^?) (? -Vector/guard?))
                 (plausible-œÜs-t? œÜs (?t@ 'vector? t))]
                [(or (? -Hash^?) (? -Hash/guard?))
                 (plausible-œÜs-t? œÜs (?t@ 'hash? t))]
                [(or (? -Set^?) (? -Set/guard?))
                 (plausible-œÜs-t? œÜs (?t@ 'set? t))]
                [(or (? -Fn?) (? -Ar?) (? -o?))
                 (plausible-œÜs-t? œÜs (?t@ 'procedure? t))]
                [(-b (? p?))
                 (and (plausible-œÜs-t? œÜs (?t@ 'p? t))
                      (plausible-œÜs-t? œÜs (?t@ 'equal? t V))
                      (implies (-b? t) (equal? V t)))] ...
                [(or (? -=>_?) (? -St/C?) (? -x/C?))
                 (for/and : Boolean ([p : -o '(procedure? p? ...)])
                   (case (Œì‚ä¢t œÜs (?t@ p t))
                     [(‚úì)   #f]
                     [(‚úó ?) #t]))]
                [(-b (list))
                 (plausible-œÜs-t? œÜs (?t@ 'null? t))]
                [(? -v? v)
                 (plausible-œÜs-t? œÜs (?t@ 'equal? t v))]
                [(-‚óè ps)
                 (not (for/or : Boolean ([p ps])
                        (match p
                          [(? -o? o) (equal? '‚úó (Œì‚ä¢t œÜs (-t.@ o (list t))))]
                          [_ #f])))]
                [_ #t]))]
        [else #t]))
    
    ;; order matters for precision, in the presence of subtypes
    (with-debugging/off ((ans) (with-prim-checks
                                 exact-positive-integer?
                                 exact-nonnegative-integer?
                                 exact-integer?
                                 integer?
                                 real?
                                 number?
                                 null?
                                 string?
                                 symbol?
                                 keyword?
                                 not
                                 boolean?
                                 char?
                                 eof-object?
                                 regexp?
                                 pregexp?
                                 byte-regexp?
                                 byte-pregexp?))
      (when ans
        (printf "plausible-V-t: ~a ‚ä¢ ~a @ ~a : ~a~n"
                (set-map œÜs show-t) (show-V V) (show-t t) ans))))

  
  (: plausible-W? : -Œì (Listof -V) -?t ‚Üí Boolean)
  ;; Check if value(s) `Vs` can instantiate symbol `t` given path condition `œÜs`
  ;; - #f indicates a definitely bogus case
  ;; - #t indicates (conservative) plausibility
  (define (plausible-W? œÜs Vs t)
    (match* (Vs t)
      [(_ (-t.@ 'values ts))
       (and (= (length Vs) (length ts))
            (for/and : Boolean ([V (in-list Vs)] [t (in-list ts)])
              (plausible-V-t? œÜs V t)))]
      [((list V) _) #:when t
       (plausible-V-t? œÜs V t)]
      [(_ (or (? -v?) (-t.@ (? -prim?) _))) #f] ; reached here: length(Vs) ‚â† 1, length(t) = 1
      [(_ _) #t]))

  ;; Check if value represents truth
  (define ‚ä¢V : (-V ‚Üí -R)
    (match-lambda
      [(-b #f) '‚úó]
      [(-‚óè ps)
       (or (for/or : (U #f '‚úì '‚úó) ([p ps])
             (case (p‚áíp p 'not)
               [(‚úì) '‚úó]
               [(‚úó) '‚úì]
               [(?) #f]))
           '?)]
      [_ '‚úì]))

  ;; Check if value satisfies predicate
  (define (p‚àãVs [œÉ : -œÉ] [p : (U -h -v -V)] . [Vs : -V *]) : -R
    (define (check-proc-arity-1 [V : -V]) : -R
      (match (p‚àãVs œÉ 'procedure? V)
        ['‚úì (boolean->R (arity-includes? (assert (V-arity V)) 1))]
        [ans ans]))

    (with-debugging/off
      ((R) (ann (match Vs
                  [(list (-‚óè ps)) #:when (-h? p)
                   (ps‚áíp ps p)]
                  [_
                   [match p
                     [(? -st-mk?) '‚úì]
                     [(? -st-mut?) '‚úì]
                     [(? -st-ac?) '‚úì]
                     [(-st-p ùíæ)
                      (match Vs
                        [(list (or (-St ùíæ* _) (-St* (-St/C _ ùíæ* _) _ _)))
                         (boolean->R (ùíæ* . substruct? . ùíæ))]
                        [(list (-‚óè ps))
                         (or (for/or : (U '‚úì '‚úó #f) ([p ps] #:when (-st-p? p))
                               (match-define (-st-p ùíæ*) p)
                               (boolean->R (equal? ùíæ* ùíæ)))
                             '?)]
                        [_ '‚úó])]
                     [(-Ar _ (app ‚ü™Œ±‚ü´->-Œ± (? -o? o)) _) (apply p‚àãVs œÉ o Vs)]
                     [(-One-Of/C bs) (sat-one-of (car Vs) bs)]
                     [(? symbol?)
                      (assert (not (match? Vs (list (? -‚óè?))))) ; just for debugging

                      (define-simple-macro (with-base-predicates (o?:id ...) clauses ...)
                        (case p
                          [(o?)
                           (match Vs
                             [(list (-b b)) (boolean->R (o? b))]
                             [_ '‚úó])] ...
                          clauses ...))

                      (with-base-predicates (not
                                             exact-positive-integer?
                                             exact-nonnegative-integer?
                                             exact-integer?
                                             integer?
                                             inexact-real?
                                             real?
                                             number?
                                             null?
                                             boolean?
                                             path-string?
                                             string?
                                             char?
                                             symbol?
                                             void?
                                             eof-object?
                                             regexp?
                                             pregexp?
                                             byte-regexp?
                                             byte-pregexp?)
                        ;; Insert manual rules here
                        [(zero?)
                         (match Vs
                           [(list (-b (? number? n))) (boolean->R (zero? n))]
                           [_ '‚úó])]
                        [(even?)
                         (match Vs
                           [(list (-b (? exact-integer? n))) (boolean->R (even? n))]
                           [_ '‚úó])]
                        [(odd?)
                         (match Vs
                           [(list (-b (? exact-integer? n))) (boolean->R (odd? n))]
                           [_ '‚úó])]
                        [(exact?)
                         (match Vs
                           [(list (-b b)) (boolean->R (and (number? b) (exact? b)))]
                           [_ '‚úó])]
                        [(inexact?)
                         (match Vs
                           [(list (-b b)) (boolean->R (and (number? b) (inexact? b)))]
                           [_ '‚úó])]
                        [(procedure?)
                         (match Vs
                           [(list (or (? -o?) (? -Fn?) (? -Ar?) (? -Not/C?) (? -One-Of/C?))) '‚úì]
                           [(list (or (-And/C flat? _ _) (-Or/C flat? _ _) (-St/C flat? _ _))) (boolean->R flat?)]
                           [_ '‚úó])]
                        [(vector?)
                         (match Vs
                           [(list (or (? -Vector?) (? -Vector^?) (? -Vector/guard?))) '‚úì]
                           [_ '‚úó])]
                        [(hash?)
                         (match Vs
                           [(list (or (? -Hash^?) (? -Hash/guard?))) '‚úì]
                           [_ '‚úó])]
                        [(set? generic-set?)
                         (match Vs
                           [(list (or (? -Set^?) (? -Set/guard?))) '‚úì]
                           [_ '‚úó])]
                        [(contract?)
                         (match Vs
                           [(list (or (? -=>_?) (? -And/C?) (? -Or/C?) (? -Not/C?) (? -Not/C?)
                                      (? -Vectorof?) (? -Vector/C?) (? -St/C?) (? -x/C?) (? -Hash/C?) (? -Set/C?)
                                      (? -‚àÄ/C?) (? -Seal/C?) (? -b?))) '‚úì]
                           [(list V) (check-proc-arity-1 V)]
                           [_ '?])]
                        [(flat-contract?)
                         (match Vs
                           [(list (? -b?)) '‚úì]
                           [(list V) (check-proc-arity-1 V)]
                           [_ '?])]
                        [(any/c) '‚úì]
                        [(none/c) '‚úó]
                        [(arity-includes?)
                         (match Vs
                           [(list (-b (? Arity? a)) (-b (? Arity? b)))
                            (boolean->R (arity-includes? a b))]
                           [_ '?])]
                        [(immutable?)

                         (: check-all-immutable : ‚ü™Œ±‚ü´ ‚Üí -R)
                         (define (check-all-immutable Œ±)
                           (define Rs
                             (for/seteq: : (‚Ñò -R) ([V (in-set (œÉ@ œÉ Œ±))])
                               (p‚àãVs œÉ 'immutable? V)))
                           (cond [(or (‚àã Rs '?) (> (set-count Rs) 1)) '?]
                                 [(‚àã Rs '‚úó) '‚úó]
                                 [else '‚úì]))
                         
                         (match Vs
                           [(list (-b b)) (boolean->R (immutable? b))]
                           [(list (-Hash^ _ _ im?)) (if im? '‚úì '‚úó)]
                           [(list (-Hash/guard _ Œ± _)) (check-all-immutable Œ±)]
                           [(list (-Set^ _ im?)) (if im? '‚úì '‚úó)]
                           [(list (-Set/guard _ Œ± _)) (check-all-immutable Œ±)]
                           ;; vectors always false for now because no support for immutable vectors
                           [(list (or (? -Vector?) (? -Vector^?) (? -Vector/guard?))) '‚úó]
                           [_ '?])]
                        [(<)
                         (match Vs
                           [(list (-b (? real? b‚ÇÅ)) (-b (? real? b‚ÇÇ)))
                            (boolean->R (< b‚ÇÅ b‚ÇÇ))]
                           [(list (-b (? real? b‚ÇÅ))
                                  (-‚óè (app set->list (list _ ... (-‚â•/c (? real? b‚ÇÇ)) _ ...))))
                            #:when (< b‚ÇÅ b‚ÇÇ)
                            '‚úì]
                           [(list (-b (? real? b‚ÇÅ))
                                  (-‚óè (app set->list (list _ ... (->/c (? real? b‚ÇÇ)) _ ...))))
                            #:when (<= b‚ÇÅ b‚ÇÇ)
                            '‚úì]
                           [(list (-‚óè ps) (-b (? real? b)))
                            (match (set->list ps)
                              [(list _ ... (-</c (? real? a)) _ ...) (if (<= a b) '‚úì '?)]
                              [(list _ ... (-‚â§/c (? real? a)) _ ...) (if (<  a b) '‚úì '?)]
                              [(list _ ... (->/c (? real? a)) _ ...) (if (>= a b) '‚úó '?)]
                              [(list _ ... (-‚â•/c (? real? a)) _ ...) (if (>  a b) '‚úó '?)]
                              [(list _ ... (-‚â°/c (? real? a)) _ ...) #:when a (if (<  a b) '‚úì '‚úó)]
                              [_ '?])]
                           [(list (-b (? real? b)) (-‚óè ps))
                            #:when (and (< b 0)
                                        (‚àã ps 'exact-nonnegative-integer?))
                            '‚úì]
                           [(list (-b (? real? b)) (-‚óè ps))
                            #:when (and (<= b 0)
                                        (‚àã ps 'exact-positive-integer?))
                            '‚úì]
                           [_ '?])]
                        [(<=)
                         (match Vs
                           [(list (-b (? real? b‚ÇÅ)) (-b (? real? b‚ÇÇ)))
                            (boolean->R (<= b‚ÇÅ b‚ÇÇ))]
                           [(list (-b (? real? b‚ÇÅ))
                                  (-‚óè (app set->list (list _ ... (or (-‚â•/c (? real? b‚ÇÇ))
                                                                     (->/c (? real? b‚ÇÇ))) _ ...))))
                            #:when (and b‚ÇÇ (>= b‚ÇÇ b‚ÇÅ))
                            '‚úì]
                           [(list (-‚óè ps) (-b (? real? b)))
                            (match (set->list ps)
                              [(list _ ... (-</c (? real? a)) _ ...) (if (<= a b) '‚úì '?)]
                              [(list _ ... (-‚â§/c (? real? a)) _ ...) (if (<= a b) '‚úì '?)]
                              [(list _ ... (->/c (? real? a)) _ ...) (if (>  a b) '‚úó '?)]
                              [(list _ ... (-‚â•/c (? real? a)) _ ...) (if (>  a b) '‚úó '?)]
                              [(list _ ... (-‚â°/c (? real? a)) _ ...) #:when a (if (<= a b) '‚úì '‚úó)]
                              [_ '?])]
                           [(list (-b (? real? b)) (-‚óè ps))
                            #:when (and (<= b 0) (‚àã ps 'exact-nonnegative-integer?))
                            '‚úì]
                           [(list (-b (? real? b)) (-‚óè ps))
                            #:when (and (<= b 1) (‚àã ps 'exact-positive-integer?))
                            '‚úì]
                           [_ '?])]
                        [(>) (p‚àãVs œÉ '< (second Vs) (first Vs))]
                        [(>=) (p‚àãVs œÉ '<= (second Vs) (first Vs))]
                        [(= equal? eq? char=? string=?)
                         (match Vs
                           [(list (-b b‚ÇÅ) (-b b‚ÇÇ)) (boolean->R (equal? b‚ÇÅ b‚ÇÇ))]
                           [(list (-‚óè ps) (-b b)) (ps‚áíp ps (-‚â°/c b))]
                           [(list (-b b) (-‚óè ps)) (ps‚áíp ps (-‚â°/c b))]
                           [(list (? symbol? o‚ÇÅ) (? symbol? o‚ÇÇ)) (boolean->R (equal? o‚ÇÅ o‚ÇÇ))]
                           [_ '?])]
                        [(list?) (check-proper-list œÉ (car Vs))]
                        ;; Default rules for operations on base values rely on simplification from `-?@`
                        [(boolean-excludes? (get-conservative-range p)) '‚úì]
                        [else '?])]
                     [(-not/c (? -h? p))
                      (not-R (apply p‚àãVs œÉ p Vs))]
                     [(-Œª (list x) (-@ 'not (list e) _))
                      (not-R (apply p‚àãVs œÉ (-Œª (list x) e) Vs))] ; more general than the `not/c` case
                     [(-Œª (list x) (-@ (? -o? o) (list (-b (? real? a)) (-x x _)) _))
                      (match Vs
                        [(list (-b b))
                         (define op : (Real Real ‚Üí Boolean)
                           (case o
                             [(<) <]
                             [(<=) <=]
                             [(>) >]
                             [(>=) >=]
                             [(=) =]
                             [else (error 'p‚àãVs "unhandled: ~a" o)]))
                         (boolean->R (and (real? b) (op a b)))]
                        [(list (-‚óè ps)) #|TODO|# '?]
                        [_ '‚úó])]
                     [(-Œª (list x) (-@ (? -o? o) (list (-x x _) (-b (? real? a))) _))
                      (match Vs
                        [(list (-b b))
                         (define op : (Real Real ‚Üí Boolean)
                           (case o
                             [(<) <]
                             [(<=) <=]
                             [(>) >]
                             [(>=) >=]
                             [(=) =]
                             [else (error 'p‚àãVs "unhandled: ~a" o)]))
                         (boolean->R (and (real? b) (op b a)))]
                        [(list (-‚óè ps)) #|TODO|# '?]
                        [_ '‚úó])]
                     [(-‚â•/c b) (p‚àãVs œÉ '>= (car Vs) (-b b))]
                     [(->/c b) (p‚àãVs œÉ '> (car Vs) (-b b))]
                     [(-</c b) (p‚àãVs œÉ '< (car Vs) (-b b))]
                     [(-‚â§/c b) (p‚àãVs œÉ '<= (car Vs) (-b b))]
                     [(or (-‚â°/c b‚ÇÅ) (-b b‚ÇÅ)) (p‚àãVs œÉ 'equal? (-b b‚ÇÅ) (car Vs))]
                     [(-‚â¢/c b) (not-R (p‚àãVs œÉ 'equal? (-b b) (car Vs)))]
                     [_ '?]]]) -R))
      (printf "~a ~a : ~a~n" p (map show-V Vs) R)))

  (define (ps‚áíp [ps : (‚Ñò -h)] [p : -h]) : -R
    (or (for/or : (U #f '‚úì '‚úó) ([q ps] #:when (-h? q))
          (case (p‚áíp q p)
            [(‚úì) '‚úì]
            [(‚úó) '‚úó]
            [(?) #f]))
        (case p ; special hacky cases where `q` is implied by 2+ predicates
          [(exact-nonnegative-integer?)
           (cond
             [(and (‚àã ps 'integer?)
                   (for/or : Boolean ([p ps])
                     (match?
                      p
                      (->/c (? (>/c -1)))
                      (-‚â•/c (? (>=/c 0)))
                      (-‚â°/c (? (>=/c 0))))))
              '‚úì]
             [(and (‚àã ps 'integer?)
                   (for/or : Boolean ([p ps])
                     (match?
                      p
                      (-</c (? (<=/c 0)))
                      (-‚â§/c (? (</c  0)))
                      (-‚â°/c (? (</c  0))))))
              '‚úó]
             [else '?])]
          [(exact-positive-integer?)
           (cond
             [(and (‚àã ps 'exact-nonnegative-integer?)
                   (for/or : Boolean ([p ps])
                     (match?
                      p
                      (->/c (? (>=/c 0)))
                      (-‚â•/c (? (>/c 0)))
                      (-‚â°/c (? (>/c 0)))
                      (-‚â¢/c 0))))
              '‚úì]
             [(and (‚àã ps 'integer?)
                   (for/or : Boolean ([p ps])
                     (match?
                      p
                      (->/c (? (>=/c 0)))
                      (-‚â•/c (? (>/c 0)))
                      (-‚â°/c (? (>/c 0))))))
              '‚úì]
             [else '?])]
          [(any/c) '‚úì]
          [(none/c) '‚úó]
          [else '?])))

  (define (check-proper-list [œÉ : -œÉ] [V : -V]) : -R
    (define-set seen : ‚ü™Œ±‚ü´ #:eq? #t #:as-mutable-hash? #t)
    
    (define (combine [Rs : (‚Ñò -R)]) : -R
      (cond [(‚àã Rs '?) '?]
            [(and (‚àã Rs '‚úì) (‚àã Rs '‚úó)) '?]
            [(‚àã Rs '‚úó) '‚úó]
            [else '‚úì]))

    (define (check-‚ü™Œ±‚ü´ [‚ü™Œ±‚ü´ : ‚ü™Œ±‚ü´]) : -R
      (cond [(seen-has? ‚ü™Œ±‚ü´) '‚úì]
            [else
             (seen-add! ‚ü™Œ±‚ü´)
             (combine
              (for/seteq: : (‚Ñò -R) ([V·µ£ (œÉ@ œÉ ‚ü™Œ±‚ü´)])
                (check V·µ£)))]))

    (define (check [V : -V]) : -R
      (match V
        [(-Cons _ Œ±) (check-‚ü™Œ±‚ü´ Œ±)]
        [(-Cons* Œ±) (check-‚ü™Œ±‚ü´ Œ±)]
        [(-b b) (boolean->R (null? b))]
        [(-‚óè ps)
         (cond
           [(‚àã ps 'list?) '‚úì]
           [(set-empty?
             (‚à© ps {set 'number? 'integer? 'real? 'exact-nonnegative-integer?
                        'string? 'symbol?}))
            '?]
           [else '‚úó])]
        [_ '‚úó]))
    (check V))

  (define (sat-one-of [V : -V] [bs : (‚Ñò Base)]) : -R
    (match V
      [(-b b) (if (‚àã bs b) '‚úì '‚úó)]
      [(? -‚óè?) '?]
      [_ '‚úó]))

  ;; Check if 2 values are `equal?`
  (define V‚â° : (-V -V ‚Üí -R)
    (match-lambda**
     [((-b x‚ÇÅ) (-b x‚ÇÇ)) (boolean->R (equal? x‚ÇÅ x‚ÇÇ))]
     [(_ _) '?]))

  (define V-arity : (case->
                     [-Clo ‚Üí Arity]
                     [-Case-Clo ‚Üí Arity]
                     [-V ‚Üí (Option Arity)])
    (match-lambda
      [(-Clo xs _ _ _) (shape xs)]
      [(-Case-Clo cases) (normalize-arity (map V-arity cases))]
      [(-Fn‚óè arity) arity]
      [(or (-And/C #t _ _) (-Or/C #t _ _) (? -Not/C?) (-St/C #t _ _) (? -One-Of/C?)) 1]
      [(-Ar guard _ _) (guard-arity guard)]
      [(? -st-p?) 1]
      [(-st-mk ùíæ) (count-struct-fields ùíæ)]
      [(? -st-ac?) 1]
      [(? -st-mut?) 2]
      [(? symbol? o) (prim-arity o)]
      [(-‚óè _) #f]
      [V
       #:when (not (or (-Clo? V) (-Case-Clo? V))) ; to convince TR
       (printf "Warning: call `V-arity` on an obviously non-procedure ~a" (show-V V))
       #f])))
