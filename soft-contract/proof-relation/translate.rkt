#lang typed/racket/base

(provide (all-defined-out))

(require (for-syntax racket/base)
         racket/match
         racket/set
         racket/string
         syntax/parse/define
         z3/smt
         racket/list
         "../utils/main.rkt"
         "../ast/main.rkt"
         "../runtime/main.rkt")

(struct exn:scv:unsupported exn () #:transparent)
(define-type ‚ÜíZ3-Ast (‚Üí Z3-Ast))
(define-type ‚ÜíVoid   (‚Üí Void))

;; This table is just for printing out each warning once
(define unsupported : (HashTable Any Void) (make-hash))

(struct Entry ([free-vars : (‚Ñò Symbol)]
               [facts     : (‚Ñò ‚ÜíZ3-Ast)]
               [expr      : ‚ÜíZ3-Ast])
  #:transparent)
(struct App ([ctx : -Œ±‚Çñ] [fvs : (Listof Symbol)]) #:transparent)
(struct Res ([ok : (Listof Entry)] [er : (Listof Entry)]) #:transparent)
(define-type App-Trace (‚Ñò App))
;; Translation context for application includes the application and history of calls
;; that result in it
(struct App-Ctx ([app : App] [ctx : App-Trace]) #:transparent)
(Defn-Entry . ::= . -o App-Ctx)
(define-type Memo-Table
  ;; Memo table maps each function application to a pair of formulas:
  ;; - When application succeeds
  ;; - When application goes wrong
  (HashTable App Res))

(: encode : (HashTable -Œ±‚Çñ (‚Ñò -ŒìA)) -Œì -e ‚Üí (Values ‚ÜíVoid ‚ÜíZ3-Ast))
;; Encode `M Œì ‚ä¢ e` into a pair of thunks that emit assertions and goal to check for
;; satisfiability
(define (encode M Œì e)
  (define-values (refs top-entry) (encode-e ‚àÖ ‚àÖeq Œì e))
  
  (define-set seen-defns : App-Ctx #:as-mutable-hash? #t)
  (define-set seen-prims : -o)
  (define def-funs : Memo-Table (make-hash))

  (: touch! : Defn-Entry ‚Üí Void)
  (define (touch! defn-entry)
    (match defn-entry
      [(and app-ctx (App-Ctx (and app (App Œ±‚Çñ _)) _))
       (unless (seen-defns-has? app-ctx)
         (seen-defns-add! app-ctx)
         (define As (hash-ref M Œ±‚Çñ))
         (define-values (refs entries) (encode-App-Ctx app-ctx As))
         (hash-set! def-funs app entries)
         (set-for-each refs touch!))]
      [(? -o? o)
       (seen-prims-add! o)]))

  (set-for-each refs touch!)
  (emit seen-prims def-funs top-entry))

(: encode-App-Ctx : App-Ctx (‚Ñò -ŒìA) ‚Üí (Values (‚Ñò Defn-Entry) Res))
;; Translate memo-table entry `Œ±‚Çñ(xs) ‚Üí {A‚Ä¶}` to pair of formulas for when application
;; fails and passes
(define (encode-App-Ctx app-ctx ŒìAs)
  (define-set refs : Defn-Entry)
  (match-define (App-Ctx app ctx) app-ctx)
  (match-define (App Œ±‚Çñ fvs) app)
  (define ‚¶Éfv‚¶Ñs (map ‚¶Éx‚¶Ñ fvs))
  (define xs : (Listof Symbol)
    (match Œ±‚Çñ
      [(-‚Ñ¨ xs _ _) 
       (cond
         [(list? xs) xs]
         [else
          (hash-ref! unsupported Œ±‚Çñ (Œª () (log-warning "unsupported: ~a~n" (show-Œ±‚Çñ Œ±‚Çñ))))
          '()])]
      [(-‚Ñ≥ x _ _ _ _) (list x)]
      [(-‚Ñ± x _ _ _ _) (list x)]))
  (define t‚Çìs : (Listof ‚ÜíZ3-Ast)
    (for/list ([x xs])
      (define t (‚¶Éx‚¶Ñ x))
      (Œª () (val-of t))))
  (define f‚Çï (fun-name app))
  (define t‚Çê‚Çö‚Çö (-tapp f‚Çï ‚¶Éfv‚¶Ñs t‚Çìs))
  (define bound (‚à™ (list->seteq fvs) (list->seteq xs)))

  ;; Accumulate pair of formulas describing conditions for succeeding and erroring
  (define-values (oks ers)
    (for/fold ([oks : (Listof Entry) '()]
               [ers : (Listof Entry) '()])
              ([ŒìA ŒìAs])
      (match-define (-ŒìA Œì A) ŒìA)
      (match A
        [(-W V‚Çês s‚Çê)
         (define e‚Çí‚Çñ
           (cond
             [s‚Çê
              (define-values (refs+ entry) (encode-e ctx bound Œì s‚Çê))
              (refs-union! refs+)
              (match-define (Entry free-vars facts t‚Çê‚Çô‚Çõ) entry)
              (define facts*
                (match V‚Çês
                  [(-b b) {seteq (Œª () (=/s (t‚Çê‚Çô‚Çõ) (‚¶Éb‚¶Ñ b)))}]
                  [(-‚óè ps)
                   (for/seteq: : (‚Ñò ‚ÜíZ3:Ast) ([p ps])
                     (Œª () (‚¶Ép‚¶Ñ p (t‚Çê‚Çô‚Çõ))))]
                  [_ ‚àÖeq]))
              (Entry free-vars
                     (set-add (‚à™ facts facts*) (Œª () (=/s (t‚Çê‚Çö‚Çö) (@/s 'Val (t‚Çê‚Çô‚Çõ)))))
                     t‚Çê‚Çô‚Çõ)]
             [else
              (define-values (refs+ entry) (encode-e ctx bound Œì #|HACK|# -ff))
              (refs-union! refs+)
              (match-define (Entry free-vars facts _) entry)
              (define facts*
                (match V‚Çês
                  [(-b b) {seteq (Œª () (=/s (@/s 'unbox_Val (t‚Çê‚Çö‚Çö)) (‚¶Éb‚¶Ñ b)))}]
                  [(-‚óè ps)
                   (for/seteq: : (‚Ñò ‚ÜíZ3:Ast) ([p ps])
                     (Œª () (‚¶Ép‚¶Ñ p (@/s 'unbox_Val (t‚Çê‚Çö‚Çö)))))]
                  [_ ‚àÖeq]))
              (Entry free-vars
                     (‚à™ facts facts*)
                     #|hack|# (Œª () (@/s 'B false/s)))]))
         (values (cons e‚Çí‚Çñ oks) ers)]
        [(-blm l+ lo _ _ _)
         (define e‚Çë·µ£
           (let-values ([(refs+ entry) (encode-e ctx bound Œì #|hack|# -ff)])
             (refs-union! refs+)
             (match-define (Entry free-vars facts _) entry)
             (Entry free-vars
                    (set-add facts (Œª () (=/s (t‚Çê‚Çö‚Çö) (@/s 'Blm (-l->-‚¶Él‚¶Ñ l+) (-l->-‚¶Él‚¶Ñ lo)))))
                    #|HACK|# (Œª () (@/s 'B false/s)))))
         (values oks (cons e‚Çë·µ£ ers))])))
  (values refs (Res oks ers)))

(: encode-e : App-Trace (‚Ñò Symbol) -Œì -e ‚Üí (Values (‚Ñò Defn-Entry) Entry))
;; Encode path-condition `Œì` and expression `e` into a
;; - a Z3-Ast-producing thunk, and
;; - a set of function definitions to encode
(define (encode-e trace bound Œì e)
  
  (define-set free-vars : Symbol  #:eq? #t)
  (define-set props     : ‚ÜíZ3-Ast #:eq? #t)
  (define asserts-app : (HashTable ‚ÜíZ3-Ast (U #t ; is-Val
                                              Symbol ; is-Val + instantiate
                                              (Pairof Integer Integer) ; blm
                                              ))
    (make-hash))
  (define-set refs : Defn-Entry)
  (match-define (-Œì œÜs _ Œ≥s) Œì)

  (define fresh-free! : (Symbol ‚Üí Symbol)
    (let ([m : (HashTable Symbol Natural) (make-hasheq)])
      (Œª (s)
        (hash-update! m s add1 (Œª () 0))
        (define i (hash-ref m s))
        (define x (format-symbol "~a.~a" s i))
        (free-vars-add! x)
        x)))

  (define app-term! : (‚ÜíZ3-Ast ‚Üí ‚ÜíZ3-Ast)
    (let ([m : (HashTable ‚ÜíZ3-Ast ‚ÜíZ3-Ast) (make-hasheq)])
      (Œª (t‚Çê‚Çö‚Çö)
        (hash-ref! m t‚Çê‚Çö‚Çö
                   (Œª ()
                     (define t‚Çê (format-symbol "a.~a" (hash-count m)))
                     (free-vars-add! t‚Çê)
                     (hash-set! asserts-app t‚Çê‚Çö‚Çö t‚Çê)
                     (Œª () (val-of t‚Çê)))))))

  ;; Add a reminder to encode memo table entries for `Œ±‚Çñ` as a 1st-order function
  (define/memo (‚¶Éfun‚¶Ñ! [e‚Çï : -e] [app : App]) : Symbol
     (‚¶Ée‚¶Ñ! e‚Çï) ; for "side-effect" of `e‚Çï` having evaluated
     (refs-add! (App-Ctx app (set-add trace app)))
     (fun-name app))

  ;; encode application
  (define/memo (‚¶Éapp‚¶Ñ!
                [Œ±‚Çñ : -Œ±‚Çñ]
                [e‚Çï : -e]
                [fvs : (Listof Symbol)]
                [e‚Çìs : (Listof -e)]) : ‚ÜíZ3-Ast
    (define app (App Œ±‚Çñ fvs))
    (cond
      ;; If this is a recursive application, just existentialize the result for now,
      ;; because encoding of recursive functions slows down Z3 for sat/unknown queries
      [(‚àã trace app)
       (define t (fresh-free! 'rec-app))
       ;(printf "Existentializing recursive app~n")
       (Œª () (@/s 'Val (val-of t)))]
      [else
       (define f (‚¶Éfun‚¶Ñ! e‚Çï app))
       (define ‚¶Éfvs‚¶Ñ (map ‚¶Éx‚¶Ñ fvs))
       (define ‚¶Ée‚Çìs‚¶Ñ (map ‚¶Ée‚¶Ñ! e‚Çìs))
       (-tapp f ‚¶Éfvs‚¶Ñ ‚¶Ée‚Çìs‚¶Ñ)]))
  
  ;; encode that `e` has successfully evaluated
  (define/memo (‚¶Ée‚¶Ñ! [e : -e]) : ‚ÜíZ3-Ast
    (match e
      [(-b b) (Œª () (‚¶Éb‚¶Ñ b))]
      [(? -ùíæ? ùíæ)
       (define t (‚¶Éùíæ‚¶Ñ ùíæ))
       (free-vars-add! t)
       (Œª () (val-of t))]
      [(? -o? o)
       (define id (-o->-‚¶Éo‚¶Ñ o))
       (Œª () (@/s 'Proc id))]
      [(-x x)
       (define t (‚¶Éx‚¶Ñ x))
       (unless (‚àã bound x)
         (free-vars-add! t))
       (Œª () (val-of t))]
      [(-Œª xs e)
       (define t (fresh-free! 'lam))
       (props-add! (Œª () (@/s 'is-Proc t)))
       (cond
         [(list? xs) (props-add! (Œª () (=/s (@/s 'arity t) (length xs))))]
         [else (log-warning "No precise translation for varargs")])
       (Œª () (val-of t))]

      ;; Hacks for special applications go here
      [(-@ (-@ 'and/c ps _) es _)
       (define ts : (Listof ‚ÜíZ3-Ast) (for/list ([p ps]) (‚¶Ée‚¶Ñ! (-@ p es +‚Ñì‚ÇÄ))))
       (Œª ()
         (@/s 'B (apply and/s (for/list : (Listof Z3-Ast) ([t ts]) (@/s 'is_truish (t))))))]
      [(-@ (-@ 'or/c ps _) es _)
       (define ts : (Listof ‚ÜíZ3-Ast) (for/list ([p ps]) (‚¶Ée‚¶Ñ! (-@ p es +‚Ñì‚ÇÄ))))
       (Œª ()
         (@/s 'B (apply or/s (for/list : (Listof Z3-Ast) ([t ts]) (@/s 'is_truish (t))))))]
      [(-@ (-@ 'not/c (list p) _) es _)
       (define t (‚¶Ée‚¶Ñ! (-@ p es +‚Ñì‚ÇÄ)))
       (Œª ()
         (@/s 'B (@/s 'is_false (t))))]
      [(-@ (-struct/c s cs _) es _)
       (define t‚Çö (‚¶Ée‚¶Ñ! (-@ (-st-p s) es +‚Ñì‚ÇÄ)))
       (define ts : (Listof ‚ÜíZ3-Ast)
         (for/list ([(c i) (in-indexed cs)])
           (define e·µ¢ (-@ (-st-ac s (assert i index?)) es +‚Ñì‚ÇÄ))
           (‚¶Ée‚¶Ñ! (-@ c (list e·µ¢) +‚Ñì‚ÇÄ))))
       (Œª ()
         (@/s 'B (apply and/s
                        (for/list : (Listof Z3-Ast) ([t (cons t‚Çö ts)])
                          (@/s 'is_truish (t))))))]
      ;; End of hacks for special applications

      [(-@ (? -o? o) es _)
       (define ts (map ‚¶Ée‚¶Ñ! es))
       
       (case o ; HACK
         [(list) (refs-add! -cons)]
         [else (refs-add! o)])

       (match o ; HACK
         [(-st-ac ùíæ _)
          (define n (get-struct-arity ùíæ))
          (define is-St (format-symbol "is-St_~a" n))
          (define tag (format-symbol "tag_~a" n))
          (define stag (-ùíæ->-‚¶Éùíæ‚¶Ñ ùíæ))
          (match-define (list t) ts)
          (props-add! (Œª ()
                        (define t‚Çê (t))
                        (and/s (@/s is-St t‚Çê) (=/s (@/s tag t‚Çê) stag))))]
         [_ (void)])

       (with-handlers ([exn:scv:unsupported?
                        (Œª (_)
                          ;; suppress for now
                          (hash-ref!
                           unsupported
                           o
                           (Œª ()
                             (log-warning "Z3 translation: unsupported primitive: `~a`~n"
                                          (show-o o))))
                          (define t (fresh-free! 'o))
                          (Œª () (val-of t)))])
         (‚¶Éo‚¶Ñ o ts))]
      [(-@ e‚Çï e‚Çìs _)
       (or
        (for/or : (Option ‚ÜíZ3-Ast) ([Œ≥ Œ≥s])
          (match-define (-Œ≥ Œ±‚Çñ blm s‚Çï s‚Çìs) Œ≥)
          (define xs : (Option (Listof Symbol))
            (match Œ±‚Çñ
              [(-‚Ñ¨ xs _ _) (and (list? xs) xs)]
              [(-‚Ñ≥ x _ _ _ _) (list x)]
              [(-‚Ñ± x _ _ _ _) (list x)]))
          (cond [(not xs)
                 (hash-ref! unsupported Œ±‚Çñ
                            (Œª () (log-warning "‚¶Ée‚¶Ñ: ignore ~a for now~n" (show-Œ±‚Çñ Œ±‚Çñ))))
                 #f]
                [(and (equal? e‚Çï s‚Çï) (equal? e‚Çìs s‚Çìs))
                 (define fvs
                   (set->list/memo
                    (set-subtract (apply ‚à™ (fv‚Çõ s‚Çï) (map fv‚Çõ s‚Çìs))
                                  (list->seteq xs))))
                 (define t‚Çê‚Çö‚Çö (‚¶Éapp‚¶Ñ! Œ±‚Çñ e‚Çï fvs e‚Çìs))
                 (app-term! t‚Çê‚Çö‚Çö)]
                [else #f]))
        (let ([t (fresh-free! 'app)])
          (Œª () (val-of t))))]
      [(? -->?)
       (define t (fresh-free! 'arr))
       (props-add! (Œª () (@/s 'is-Arr t)))
       (Œª () (val-of t))]
      [(? -->i?)
       (define t (fresh-free! 'dep))
       (props-add! (Œª () (@/s 'is-ArrD t)))
       (Œª () (val-of t))]
      [(? -struct/c?)
       (define t (fresh-free! 'stc))
       (props-add! (Œª () (@/s 'is-St/C t)))
       (Œª () (val-of t))]
      [(? -‚Ä¢?)
       (define t (fresh-free! 'opq))
       (Œª () (val-of t))]
      [_
       (hash-ref!
        unsupported
        e
        (Œª ()
          (log-warning "translation: unhandled: ~a~n" (show-e e))))
       (define t (fresh-free! 'unhandled))
       (Œª () (val-of t))]))

  (: ‚¶ÉŒ≥‚¶Ñ! : -Œ≥ ‚Üí Void)
  (define (‚¶ÉŒ≥‚¶Ñ! Œ≥)
    (match-define (-Œ≥ Œ±‚Çñ blm s‚Çï s‚Çìs) Œ≥)
    (define xs : (Option (Listof Symbol))
      (match Œ±‚Çñ
        [(-‚Ñ¨ xs _ _) (and (list? xs) xs)]
        [(-‚Ñ≥ x _ _ _ _) (list x)]
        [(-‚Ñ± x _ _ _ _) (list x)]
        [(or (? -‚Ñãùí±?)) #f]))
    ;; important not to use `-?@` for `e‚Çê‚Çö‚Çö` as it may simplify away `values` used in `‚Ñ≥`
    (define e‚Çê‚Çö‚Çö (and s‚Çï (andmap -e? s‚Çìs) (-@ s‚Çï s‚Çìs +‚Ñì‚ÇÄ)))
    (unless xs
      (hash-ref! unsupported Œ±‚Çñ (Œª () (log-warning "‚¶ÉŒ≥‚¶Ñ: ignore ~a for now~n" (show-Œ±‚Çñ Œ±‚Çñ)))))
    (when (and e‚Çê‚Çö‚Çö #|TODO|# xs)
      (match-define (-@ e‚Çï e‚Çìs _) e‚Çê‚Çö‚Çö)
      (define fvs
        (set->list/memo
         (set-subtract (apply ‚à™ (fv‚Çõ s‚Çï) (map fv‚Çõ s‚Çìs))
                       (list->seteq xs))))
      (for ([fv fvs] #:unless (‚àã bound fv))
        (free-vars-add! (‚¶Éx‚¶Ñ fv)))
      (define t‚Çê‚Çö‚Çö (‚¶Éapp‚¶Ñ! Œ±‚Çñ e‚Çï fvs e‚Çìs))
      (match blm
        [(cons l+ lo) (hash-set! asserts-app t‚Çê‚Çö‚Çö (cons (-l->-‚¶Él‚¶Ñ l+) (-l->-‚¶Él‚¶Ñ lo)))]
        [_            (hash-set! asserts-app t‚Çê‚Çö‚Çö #t)])))
  
  (for ([Œ≥ (reverse Œ≥s)]) (‚¶ÉŒ≥‚¶Ñ! Œ≥))
  (for ([œÜ œÜs])
    (define t (‚¶Ée‚¶Ñ! œÜ))
    (props-add! (Œª () (@/s 'is_truish (t)))))
  (define t‚Çú‚Çí‚Çö (‚¶Ée‚¶Ñ! e))
  (define all-props
    (‚à™ (for/seteq: : (‚Ñò ‚ÜíZ3-Ast) ([(t‚Çê‚Çö‚Çö res) asserts-app])
         (match res
           [#t
            (Œª () (@/s 'is-Val (t‚Çê‚Çö‚Çö)))]
           [(? symbol? t)
            (Œª () (=/s (t‚Çê‚Çö‚Çö) (@/s 'Val (val-of t))))]
           [(cons l+ lo)
            (Œª () (=/s (t‚Çê‚Çö‚Çö) (@/s 'Blm l+ lo)))]))
       props))
  (values refs (Entry free-vars all-props t‚Çú‚Çí‚Çö)))

(: ‚¶Éo‚¶Ñ : -o (Listof ‚ÜíZ3-Ast) ‚Üí ‚ÜíZ3-Ast)
(define (‚¶Éo‚¶Ñ o ts)
  (case o
    [(defined?)
     (Œª () (@/s 'B (not/s (=/s 'Undefined ((car ts))))))]
    [(number?)
     (Œª () (@/s 'B (@/s 'is-N ((car ts)))))]
    [(real?)
     (Œª () (@/s 'B (@/s 'is-R ((car ts)))))]
    [(integer?)
     (Œª () (@/s 'B (@/s 'is-Z ((car ts)))))]
    [(symbol?)
     (Œª () (@/s 'B (@/s 'is-Sym ((car ts)))))]
    [(string?)
     (Œª () (@/s 'B (@/s 'is-Str ((car ts)))))]
    [(procedure?)
     (Œª () (@/s 'B (@/s 'is-Proc ((car ts)))))]
    [(boolean?)
     (Œª () (@/s 'B (@/s 'is-B ((car ts)))))]
    [(void?)
     (Œª () (@/s 'B (=/s 'Void ((car ts)))))]
    [(vector)
     (define i (next-int!))
     (Œª () (@/s 'Vec i))]
    [(vector?)
     (Œª () (@/s 'B (@/s 'is-Vec ((car ts)))))]
    [(not false?)
     (Œª () (@/s 'B (@/s 'is_false ((car ts)))))]
    [(null? empty?)
     (Œª () (@/s 'B (=/s 'Null ((car ts)))))]
    [(procedure-arity)
     (Œª () (@/s 'N (@/s 'arity ((car ts))) 0))]
    [(arity-includes?)
     (match-define (list a i) ts)
     (Œª () (@/s 'B (=/s (a) (i))))]
    [(list)
     (Œª ()
       (foldr
        (Œª ([t‚Çó : Z3-Ast] [t·µ£ : Z3-Ast])
          (@/s 'St_2 (-ùíæ->-‚¶Éùíæ‚¶Ñ -ùíæ-cons) t‚Çó t·µ£))
        (val-of 'Null)
        (for/list : (Listof Z3-Ast) ([t ts]) (t))))]
    [(any/c) (Œª () (@/s 'B true/s))]
    [(none/c) (Œª () (@/s 'B false/s))]
    [(= equal? eq?)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'B (=/s (t‚ÇÅ) (t‚ÇÇ))))]
    [(< > <= >=)
     (match-define (list l r) ts)
     (define o/s : (Z3-Ast Z3-Ast ‚Üí Z3-Ast)
       (case o
         [(<) </s]
         [(<=) <=/s]
         [(>) >/s]
         [else >=/s]))
     (Œª ()
       (@/s 'B (o/s (@/s 'real (l)) (@/s 'real (r)))))]
    [(add1)
     (match-define (list t) ts)
     (Œª ()
       (@/s 'N (+/s 1 (@/s 'real (t))) (@/s 'imag (t))))]
    [(sub1)
     (match-define (list t) ts)
     (Œª ()
       (@/s 'N (-/s (@/s 'real (t)) 1) (@/s 'imag (t))))]
    [(+ -)
     (match-define (list x y) ts)
     (define o/s : (Smt-Expr Smt-Expr ‚Üí Z3-Ast)
       (case o
         [(+) +/s]
         [else -/s]))
     (Œª ()
       (@/s 'N
            (o/s (@/s 'real (x)) (@/s 'real (y)))
            (o/s (@/s 'imag (x)) (@/s 'imag (y)))))]
    [(*)
     (match-define (list x y) ts)
     (Œª ()
       (define x‚Çê (x))
       (define y‚Çê (y))
       (define a (@/s 'real x‚Çê))
       (define b (@/s 'imag x‚Çê))
       (define c (@/s 'real y‚Çê))
       (define d (@/s 'imag y‚Çê))
       (@/s 'N
            (-/s (*/s a c) (*/s b d))
            (+/s (*/s a d) (*/s b c))))]
    [(/)
     (match-define (list x y) ts)
     (Œª ()
       (define x‚Çê (x))
       (define y‚Çê (y))
       (define a (@/s 'real x‚Çê))
       (define b (@/s 'imag x‚Çê))
       (define c (@/s 'real y‚Çê))
       (define d (@/s 'imag y‚Çê))
       (define c¬≤d¬≤ (+/s (*/s c c) (*/s d d)))
       (@/s 'N
            (//s (+/s (*/s a c) (*/s b d)) c¬≤d¬≤)
            (//s (-/s (*/s b c) (*/s a d)) c¬≤d¬≤)))]
    [(sqrt) ; just for real numbers for now
     (match-define (list t) ts)
     (Œª ()
       (@/s 'N (^/s (@/s 'real (t)) 0.5) 0))]
    [(zero?)
     (match-define (list t) ts)
     (Œª ()
       (@/s 'B (=/s (@/s 'N 0 0) (t))))]
    [(positive?)
     (match-define (list t) ts)
     (Œª ()
       (define t‚Çê (t))
       (@/s 'B
            (and/s (@/s 'is-R t‚Çê)
                   (>/s (@/s 'real t‚Çê) 0))))]
    [(negative?)
     (match-define (list t) ts)
     (Œª ()
       (define t‚Çê (t))
       (@/s 'B
            (and/s (@/s 'is-R t‚Çê)
                   (</s (@/s 'real t‚Çê) 0))))]
    [(exact-nonnegative-integer?)
     (match-define (list t) ts)
     (Œª ()
       (define t‚Çê (t))
       (@/s 'B (and/s (@/s 'is-Z t‚Çê)
                      (@/s 'exact? t‚Çê)
                      (>=/s (@/s 'real t‚Çê) 0))))]
    [(exact-positive-integer?)
     (match-define (list t) ts)
     (Œª ()
       (define t‚Çê (t))
       (@/s 'B (and/s (@/s 'is-Z t‚Çê)
                      (@/s 'exact? t‚Çê)
                      (>/s (@/s 'real t‚Çê) 0))))]
    ;; HERE
    [(inexact?)
     (Œª ()
       (@/s 'B (@/s 'inexact? ((car ts)))))]
    [(exact?)
     (Œª ()
       (@/s 'B (@/s 'exact? ((car ts)))))]
    [(string-length)
     (Œª ()
       (@/s 'N (@/s 'strlen ((car ts))) 0))]
    [(and/c)
     (define i (next-int!))
     (Œª () (@/s 'And/C i))]
    [(or/c)
     (define i (next-int!))
     (Œª () (@/s 'Or/C i))]
    [(not/c)
     (define i (next-int!))
     (Œª () (@/s 'Not/C i))]
    [(vector-ref)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'f.vecref (t‚ÇÅ) (t‚ÇÇ)))]
    [(vector-length)
     (Œª () (@/s 'N (@/s 'veclen ((car ts))) 0))]
    [(list?)
     (Œª () (@/s 'B (@/s 'list? ((car ts)))))]
    [(map)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'f.map (t‚ÇÅ) (t‚ÇÇ)))]
    [(append)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'f.append (t‚ÇÅ) (t‚ÇÇ)))]
    [(min)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'N (@/s 'f.min (@/s 'real (t‚ÇÅ)) (@/s 'real (t‚ÇÇ))) 0))]
    [(max)
     (match-define (list t‚ÇÅ t‚ÇÇ) ts)
     (Œª () (@/s 'N (@/s 'f.max (@/s 'real (t‚ÇÅ)) (@/s 'real (t‚ÇÇ))) 0))]
    [else
     (match o
       [(-st-p ùíæ)
        (define n (get-struct-arity ùíæ))
        (define is-St (format-symbol "is-St_~a" n))
        (define st-tag (format-symbol "tag_~a" n))
        (define tag (-ùíæ->-‚¶Éùíæ‚¶Ñ ùíæ))
        (match-define (list t) ts)
        (Œª ()
          (define t‚Çê (t))
          (@/s 'B (and/s (@/s is-St t‚Çê)
                         (=/s (@/s st-tag t‚Çê) tag))))]
       [(-st-mk ùíæ)
        (define St (format-symbol "St_~a" (get-struct-arity ùíæ)))
        (Œª ()
          (apply @/s St (-ùíæ->-‚¶Éùíæ‚¶Ñ ùíæ) (run-all ts)))]
       [(-st-ac ùíæ i)
        (define field (format-symbol "field_~a_~a" (get-struct-arity ùíæ) i))
        (Œª () (@/s field ((car ts))))]
       [_ (raise (exn:scv:unsupported (format "unsupported: ~a" (show-o o))
                                          (current-continuation-marks)))])]))

(: ‚¶Ép‚¶Ñ : (U -o -Œª) ‚ÜíZ3-Ast ‚Üí ‚ÜíZ3-Ast)
(define (‚¶Ép‚¶Ñ p t)
  (match p
    [(? -o? o) (‚¶Éo‚¶Ñ o (list t))]
    [(-Œª (list x) (-@ (? -o? o) (list (-x x) (-b b)) _))
     (‚¶Éo‚¶Ñ o (list t (Œª () (‚¶Éb‚¶Ñ b))))]
    [(-Œª (list x) (-@ (? -o? o) (list (-b b) (-x x)) _))
     (‚¶Éo‚¶Ñ o (list (Œª () (‚¶Éb‚¶Ñ b)) t))]))

(: ‚¶Éb‚¶Ñ : Base ‚Üí Z3-Ast)
(define (‚¶Éb‚¶Ñ b)
  (match b
    [#f (@/s 'B false/s)]
    [#t (@/s 'B true/s)]
    [(? number? x) (@/s 'N (real-part x) (imag-part x))]
    [(? symbol? s) (@/s 'Sym (Symbol->‚¶ÉSymbol‚¶Ñ s))]
    [(? string? s) (@/s 'Str (String->‚¶ÉString‚¶Ñ s))]
    [(? void?) (val-of 'Void)]
    [(? char? c) (@/s 'Chr (Char->‚¶ÉChar‚¶Ñ c))]
    [(list) (val-of 'Null)]
    [_ (error '‚¶Éb‚¶Ñ "value: ~a" b)]))

(: base-datatypes : (‚Ñò Natural) ‚Üí Void)
(define (base-datatypes arities)
  (define st-defs : (Listof (Pairof Symbol (Listof (List Symbol Smt-Sort-Expr))))
    (for/list ([n (set-add arities #|hack|# 2)])
      (define St_k (format-symbol "St_~a" n))
      (define tag_k (format-symbol "tag_~a" n))
      (define fields
        (for/list : (Listof (List Symbol Smt-Sort-Expr)) ([i n])
          `(,(format-symbol "field_~a_~a" n i) V)))
      `(,St_k (,tag_k ,Int/s) ,@fields)))
  (dynamic-declare-datatype
   'V
   `(Undefined
     Null
     Void
     (N [real ,Real/s] [imag ,Real/s])
     (B [unbox_B ,Bool/s])
     (Proc [proc_id ,Int/s])
     (Sym [sym ,Int/s])
     (Str [str ,Int/s])
     (Chr [chr ,Int/s])
     (And/C [and/c_id ,Int/s])
     (Or/C [or/c_id ,Int/s])
     (Not/C [not/c_id ,Int/s])
     (St/C [st/c_id ,Int/s])
     (Arr [arr_id ,Int/s])
     (ArrD [arrD_id ,Int/s])
     (Vec [unbox_Vec ,Int/s])
     ,@st-defs))
  (declare-datatype
   A
   (Val [unbox_Val 'V])
   (Blm [blm_pos Int/s] [blm_src Int/s])
   None)
  (void))

(: base-predicates : (‚Ñò -o) ‚Üí Void)
(define (base-predicates prims)
  ;; Primitive predicates
  (define-fun is_false ([x 'V]) Bool/s
    (=/s x (@/s 'B false/s)))
  (define-fun is_truish ([x 'V]) Bool/s
    (not/s (@/s 'is_false x)))
  (define-fun is-R ([x 'V]) Bool/s
    (and/s (@/s 'is-N x) (=/s 0 (@/s 'imag x))))
  (define-fun is-Z ([x 'V]) Bool/s
    (and/s (@/s 'is-R x) (is-int/s (@/s 'real x))))

  (unless (set-empty? (‚à© prims (set 'exact? 'exact-integer? 'exact-nonnegative-integer? 'exact-positive-integer?)))
    (dynamic-declare-fun 'exact? '(V) Bool/s))
  
  (when (‚àã prims 'inexact?)
    (dynamic-declare-fun 'inexact? '(V) Bool/s))
  
  (when (‚àã prims 'string-length)
    (dynamic-declare-fun 'strlen '(V) Int/s)
    (assert! (‚àÄ/s ([v 'V]) (>=/s (@/s 'strlen v) 0))))

  (when (‚àã prims 'vector-ref)
    (dynamic-declare-fun 'f.vecref '(V V) 'V))
  
  (when (‚àã prims 'vector-length)
    (dynamic-declare-fun 'veclen '(V) Int/s)
    (assert! (‚àÄ/s ([v 'V]) (>=/s (@/s 'veclen v) 0))))

  (when #t #;(‚àã prims 'procedure-arity)
    (dynamic-declare-fun 'arity '(V) Int/s)
    (assert! (‚àÄ/s ([v 'V]) (>=/s (@/s 'arity v) 0))))
  
  (when (‚àã prims 'list?)
    (dynamic-declare-fun 'list? '(V) Bool/s)
    (assert! (@/s 'list? 'Null))
    (assert! (‚àÄ/s ([h 'V] [t 'V])
                  (=>/s (@/s 'list? t) (@/s 'list? (@/s 'St_2 (-ùíæ->-‚¶Éùíæ‚¶Ñ -ùíæ-cons) h t))))))

  (when (‚àã prims 'map)
    (dynamic-declare-fun 'f.map '(V V) 'V))
  
  (when (‚àã prims 'append)
    (dynamic-declare-fun 'f.append '(V V) 'V))

  (when (‚àã prims 'min)
    (dynamic-define-fun 'f.min ([x Real/s] [y Real/s]) Real/s (ite/s (<=/s x y) x y)))
  
  (when (‚àã prims 'max)
    (dynamic-define-fun 'f.max ([x Real/s] [y Real/s]) Real/s (ite/s (>=/s x y) x y)))
  
  (void))

(define-interner -o #:interned-type-name -‚¶Éo‚¶Ñ)
(define-interner Symbol #:interned-type-name ‚¶ÉSymbol‚¶Ñ)
(define-interner String #:interned-type-name ‚¶ÉString‚¶Ñ)
(define-interner Char #:interned-type-name ‚¶ÉChar‚¶Ñ)
(define-interner -l #:interned-type-name -‚¶Él‚¶Ñ)
(define-interner -ùíæ #:interned-type-name -‚¶Éùíæ‚¶Ñ)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Emitting SMT 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(: emit : (‚Ñò -o) Memo-Table Entry ‚Üí (Values ‚ÜíVoid ‚ÜíZ3-Ast))
(define (emit prims def-funs top)
  (match-define (Entry consts facts goal) top)

  (define st-arities
    (for/fold ([acc : (‚Ñò Index) ‚àÖeq])
              ([o (in-set prims)])
      (match o
        [(or (-st-mk ùíæ) (-st-p ùíæ) (-st-ac ùíæ _) (-st-mut ùíæ _)) #:when ùíæ
         (set-add acc (get-struct-arity ùíæ))]
        [(or 'list? 'list-ref 'map)
         (set-add acc 2)]
        [_ acc])))
  
  (define-values (emit-dec-funs emit-def-funs)
    (for/fold ([decs : (Listof ‚ÜíVoid) '()]
               [defs : (Listof ‚ÜíVoid) '()])
              ([(f-xs res) def-funs])
      (match-define (App Œ±‚Çñ fvs) f-xs)
      (define xs : (Listof Symbol)
        (match Œ±‚Çñ
          [(-‚Ñ¨ xs _ _)
           (cond [(list? xs) xs]
                 [else
                  (hash-ref! unsupported Œ±‚Çñ (Œª () (log-warning "unsupported: ~a~n" (show-Œ±‚Çñ Œ±‚Çñ))))
                  '()])]
          [(-‚Ñ≥ x _ _ _ _) (list x)]
          [(-‚Ñ± x _ _ _ _) (list x)]))
      (define n (+ (length fvs) (length xs)))
      (define ‚¶Éfv‚¶Ñs (map ‚¶Éx‚¶Ñ fvs))
      (define t‚Çìs : (Listof ‚ÜíZ3-Ast)
        (for/list ([x xs])
          (define t (‚¶Éx‚¶Ñ x))
          (Œª () (val-of t))))
      (define f‚Çï (fun-name f-xs))
      (define t‚Çê‚Çö‚Çö (-tapp f‚Çï ‚¶Éfv‚¶Ñs t‚Çìs))
      (match-define (Res oks ers) res)

      (: mk-cond : (Listof Entry) ‚Üí ‚ÜíZ3-Ast)
      (define (mk-cond entries)
        (match entries
          ['() (Œª () false/s)]
          [(list ent)
           (match-define (Entry xs facts _) ent)
           (Œª ()
             (‚àÉ/V xs (apply and/s (run-all (set->list facts)))))]
          [_
           (define-values (shared-xs shared-cond)
             (for/fold ([shared-xs : (‚Ñò Symbol) (Entry-free-vars (first entries))]
                        [shared-cond : (‚Ñò ‚ÜíZ3-Ast) (Entry-facts (first entries))])
                       ([ent (in-list (rest entries))])
               (match-define (Entry xs œÜs _) ent)
               (values (‚à© shared-xs xs) (‚à© shared-cond œÜs))))
           (define disjs
             (for/list : (Listof ‚ÜíZ3-Ast) ([ent entries])
               (match-define (Entry xs‚ÇÄ œÜs‚ÇÄ _) ent)
               (define xs (set-subtract xs‚ÇÄ shared-xs))
               (define œÜs (set-subtract œÜs‚ÇÄ shared-cond))
               (Œª () (‚àÉ/V xs (apply and/s (run-all (set->list œÜs)))))))
           (Œª ()
             (‚àÉ/V shared-xs (apply and/s
                                   (append (run-all (set->list shared-cond))
                                           (list (apply or/s (run-all disjs)))))))]))

      (define ok-cond (mk-cond oks))
      (define er-cond (mk-cond ers))
      (define params : (Listof Symbol) (append ‚¶Éfv‚¶Ñs (map ‚¶Éx‚¶Ñ xs)))
      
      (values
       (cons
        (Œª ()
          (void (dynamic-declare-fun f‚Çï (make-list n 'V) 'A)))
        decs)
       (cons
        (Œª ()
          (assert! (‚àÄ/V params (=>/s (@/s 'is-Val (t‚Çê‚Çö‚Çö)) (ok-cond))
                           #:pattern (list (pattern-of (t‚Çê‚Çö‚Çö)))))
          (assert! (‚àÄ/V params (=>/s (@/s 'is-Blm (t‚Çê‚Çö‚Çö)) (er-cond))
                           #:pattern (list (pattern-of (t‚Çê‚Çö‚Çö))))))
        defs))))

  (define (emit-dec-consts)
    (for ([x consts])
      (dynamic-declare-const x 'V)))

  (define (emit-asserts)
    (for ([œÜ facts])
      (assert! (œÜ))))

  (values (Œª ()
            (base-datatypes st-arities)
            (base-predicates prims)
            (emit-dec-consts)
            (run-all emit-dec-funs)
            (run-all emit-def-funs)
            (emit-asserts))
          goal))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-syntax-rule (quant/V quant xs* e #:pattern pats)
  (let ([xs xs*])
    (define ts : (Listof Symbol) (for/list ([x xs]) 'V))
    (quant xs ts e #:pattern pats)))
(define-simple-macro (‚àÉ/V xs e (~optional (~seq #:pattern pats) #:defaults ([(pats 0) #'null])))
  (quant/V dynamic-‚àÉ/s xs e #:pattern pats))
(define-simple-macro (‚àÄ/V xs e (~optional (~seq #:pattern pats) #:defaults ([(pats 0) #'null])))
  (quant/V dynamic-‚àÄ/s xs e #:pattern pats))

(: run-all (‚àÄ (X) (Listof (‚Üí X)) ‚Üí (Listof X)))
(define (run-all fs) (for/list ([f fs]) (f)))

(: -tapp : Symbol (Listof Symbol) (Listof ‚ÜíZ3-Ast) ‚Üí ‚ÜíZ3-Ast)
(define (-tapp f fvs args)
  (cond
    [(and (null? fvs) (null? args))
     (Œª () (val-of f))]
    [else
     (Œª ()
       (define all-args
         (append
          (for/list : (Listof Z3-Ast) ([fv fvs])
            (val-of fv))
          (for/list : (Listof Z3-Ast) ([arg args])
            (arg))))
       (apply @/s f all-args))]))

(: fun-name : App ‚Üí Symbol)
(define fun-name
  (let ([m : (HashTable App Symbol) (make-hash)])
    (Œª (app)
      (hash-ref! m app (Œª () (format-symbol "f.~a" (hash-count m)))))))

(: ‚¶Éùíæ‚¶Ñ : -ùíæ ‚Üí Symbol)
(define (‚¶Éùíæ‚¶Ñ ùíæ)
  (format-symbol "t.~a" (string->symbol (fix-name (symbol->string (-ùíæ-name ùíæ))))))

(: ‚¶Éx‚¶Ñ : Symbol ‚Üí Symbol)
(define (‚¶Éx‚¶Ñ x)
  (cond [(integer? x) (format-symbol "x.~a" x)]
        [else (string->symbol (fix-name (symbol->string x)))]))

(: fix-name : String ‚Üí String)
(define (fix-name s)

  (: subst : Char ‚Üí (Listof Char))
  (define (subst c)
    (case c
      [(#\‚ÇÄ) '(#\_ #\_ #\0)]
      [(#\‚ÇÅ) '(#\_ #\_ #\1)]
      [(#\‚ÇÇ) '(#\_ #\_ #\2)]
      [(#\‚ÇÉ) '(#\_ #\_ #\3)]
      [(#\‚ÇÑ) '(#\_ #\_ #\4)]
      [(#\‚ÇÖ) '(#\_ #\_ #\5)]
      [(#\‚ÇÜ) '(#\_ #\_ #\6)]
      [(#\‚Çá) '(#\_ #\_ #\7)]
      [(#\‚Çà) '(#\_ #\_ #\8)]
      [(#\‚Çâ) '(#\_ #\_ #\9)]
      [(#\‚Å∞) '(#\_ #\^ #\0)]
      [(#\¬π) '(#\_ #\^ #\1)]
      [(#\¬≤) '(#\_ #\^ #\2)]
      [(#\¬≥) '(#\_ #\^ #\3)]
      [(#\‚Å¥) '(#\_ #\^ #\4)]
      [(#\‚Åµ) '(#\_ #\^ #\5)]
      [(#\‚Å∂) '(#\_ #\^ #\6)]
      [(#\‚Å∑) '(#\_ #\^ #\7)]
      [(#\‚Å∏) '(#\_ #\^ #\8)]
      [(#\‚Åπ) '(#\_ #\^ #\9)]
      [(#\:) '(#\_)]
      [else (list c)]))

  (list->string (append-map subst (string->list s))))

(: next-int! : ‚Üí Natural)
(define next-int!
  (let ([i : Natural 0])
    (Œª ()
      (begin0 i (set! i (+ 1 i))))))

;; memoize to ensure fixed order
(define/memo (set->list/memo [xs : (Setof Symbol)]) : (Listof Symbol) (set->list xs))
