#lang typed/racket/base

(provide (all-defined-out))

(require typed/racket/unit
         racket/match
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         racket/sequence
         racket/list
         racket/splicing
         racket/string
         syntax/parse/define
         set-extras
         unreachable
         typed-racket-hacks
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../runtime/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-unit local-prover-core@
  (import static-info^ meta-functions^
          sto^ evl^ val^ prims^
          sat-result^)
  (export local-prover-core^)
  (init-depend prims^)

  (: check : (U Œ£ Œ£·µ•) Œ¶ T (Listof T) ‚Üí ?Dec)
  (define (check Œ£ Œ¶ P‚ÇÄ Ts‚ÇÄ)
    
    (: check-equal* : (Listof Œ±) (Listof Œ±) ‚Üí ?Dec)
    (define (check-equal* Œ±s‚ÇÅ Œ±s‚ÇÇ)
      (for/fold ([d : ?Dec '‚úì])
                ([Œ±‚ÇÅ (in-list Œ±s‚ÇÅ)]
                 [Œ±‚ÇÇ (in-list Œ±s‚ÇÇ)]
                 #:break (not (equal? d '‚úì)))
        (define Vs‚ÇÅ (Œ£·µ•@ Œ£ Œ±‚ÇÅ))
        (define Vs‚ÇÇ (Œ£·µ•@ Œ£ Œ±‚ÇÇ))
        (define ‚äî* (inst ‚äî*/set V))
        (‚äî* (Œª (V‚ÇÅ) (‚äî* (Œª (V‚ÇÇ) (go 'equal? (list V‚ÇÅ V‚ÇÇ))) Vs‚ÇÇ)) Vs‚ÇÇ)))

    (: go-harder : P S ‚Üí ?Dec)
    (define (go-harder P S)
      (assert (not (V? S))) ; internally maintained
      (‚äî*/set (Œª ([V : V]) (go P (list V))) (T->V Œ£ {set Œ¶} S)))

    (: go : T (Listof T) ‚Üí ?Dec)
    (define (go P Vs)
      (cond
        [(and (P? P)
              (andmap S? Vs)
              (or (Ps‚ä¢P (Œ®@ Œ¶ Vs) P)
                  (neg (Ps‚ä¢P (Œ®@ Œ¶ Vs) (P:¬¨ P)))))]
        [else
         (match* (P Vs)
           [('values (list (S:@ Q Vs*))) (go Q Vs*)]
           [('not    (list (S:@ Q Vs*))) (neg (go Q Vs*))]
           [('equal? (or (list (? S? S) (? -b? b)) (list (? -b? b) (? S? S))))
            #:when (and S b)
            (match (go 'boolean? (list S))
              [‚úì (go (if b 'values 'not) (list S))]
              [d d])]
           [('equal? (list (? S? S) (? S? S))) '‚úì]
           [('equal? (list (St ùíæ Œ±s‚ÇÅ) (St ùíæ Œ±s‚ÇÇ))) (check-equal* Œ±s‚ÇÅ Œ±s‚ÇÇ)]
           [((? P?) (list (-‚óè Ps))) (Ps‚ä¢P Ps P)]
           [((? P?) (list (and (S:@ (? -o? k) _)
                               (app (match-lambda
                                      [(S:@ k _) (k . check-range-in . P)])
                                    (? values d)))))
            d]
           [('= (list V V)) '‚úì]
           [((or (? -st-mk?) (? -st-mut?)) _) '‚úì]
           [((-st-p ùíæ) Vs)
            (match Vs
              [(list (or (St ùíæ* _) (X/G _ (St/C _ ùíæ* _) _)))
               (bool->Dec (and ùíæ* (ùíæ* . substruct? . ùíæ)))]
              [(list (? V?)) '‚úó]
              [(list (? S? S)) #:when (not (-b? S)) (go-harder P S)]
              [_ '‚úó])]
           [((One-Of/C bs) _) (check-one-of (car Vs) bs)]
           [((? symbol?) _)
            (define-simple-macro (with-base-predicates ([g:id ... o?:id] ...)
                                   c ...)
              (case P
                [(o?)
                 (match Vs
                   [(list V)
                    (match V
                      [(-b (and b (? g) ...)) (bool->Dec (o? b))]
                      [(? V?) '‚úó]
                      [(? S? S) (go-harder 'o? S)]
                      [_ '‚úó])]
                   [_ '‚úó])] ...
                c ...))
            (define (proc-arity-1? [T : T])
              (and (equal? '‚úì (go 'procedure? (list T)))
                   (arity-includes? (assert (T-arity T)) 1)))
            (: check-among : (V ‚Üí Boolean) * ‚Üí ?Dec)
            (define (check-among . ps)
              (match Vs
                [(list V)
                 (or (for/or : (Option '‚úì) ([p (in-list ps)])
                       (and (if (S? V)
                                (set-andmap p (T->V Œ£ {set Œ¶} V))
                                (p V))
                            '‚úì))
                     '‚úó)]
                [_ '‚úó]))
            (with-base-predicates ([not]
                                   [exact-positive-integer?]
                                   [exact-nonnegative-integer?]
                                   [exact-integer?]
                                   [number? zero?]
                                   [exact-integer? even?]
                                   [exact-integer? odd?]
                                   [number? exact?]
                                   [number? inexact?]
                                   [integer?]
                                   [inexact-real?]
                                   [real?]
                                   [number?]
                                   [null?]
                                   [boolean?]
                                   [non-empty-string?]
                                   [path-string?]
                                   [string?]
                                   [char?]
                                   [symbol?]
                                   [void?]
                                   [eof-object?]
                                   [regexp?]
                                   [pregexp?]
                                   [byte-regexp?]
                                   [byte-pregexp?])
              ;; Manual cases
              [(values)
               (match Vs
                 [(list (-b b)) (if b '‚úì '‚úó)]
                 [_ '‚úó])]
              [(procedure?)
               (check-among -o? Fn? Not/C? One-Of/C?
                            (match-Œª? (X/G _ (? Fn/C?) _)
                                      (And/C #t _ _)
                                      (Or/C #t _ _)
                                      (St/C #t _ _)))]
              [(vector?)
               (check-among Vect? Vect^?
                            (match-Œª? (X/G _ (or (? Vect/C?) (? Vectof?)) _)))]
              [(hash?) (check-among Hash^? (match-Œª? (X/G _ (? Hash/C?) _)))]
              [(set? generic-set?) (check-among Set^? (match-Œª? (X/G _ (? Set/C?) _)))]
              [(contract?) (check-among Fn/C? And/C? Or/C? Not/C?
                                        Vectof? Vect/C? St/C? X/C? Hash/C? Set/C?
                                        ‚àÄ/C? Seal/C? -b?
                                        proc-arity-1?)]
              [(flat-contract?) (check-among -b? proc-arity-1?)]
              [(any/c)
               (match Vs
                 [(list (? Sealed?)) #f] ; know absolutely nothing about sealed
                 [_ '‚úì])]
              [(none/c) '‚úó]
              [(arity-includes?)
               (match Vs
                 [(list (-b (? Arity? a)) (-b (? Arity? b)))
                  (bool->Dec (arity-includes? a b))]
                 [_ #f])]
              [(immutable?)
               (define (check-at [Œ± : Œ±])
                 ((inst ‚äî*/set V) (Œª (V) (go 'immutable? (list V))) (Œ£·µ•@ Œ£ Œ±)))
               (match (car Vs)
                 [(-b b) (bool->Dec (immutable? b))]
                 [(Hash^ _ _ im?) (bool->Dec im?)]
                 [(Set^ _ im?) (bool->Dec im?)]
                 [(X/G _ (or (? Hash/C?) (? Set/C?)) Œ±) (check-at Œ±)]
                 ;; No support for immutable vectors for now
                 [(or (? Vect?) (? Vect^?) (X/G _ (or (? Vect/C?) (? Vectof?)) _))
                  '‚úó]
                 [_ #f])]
              [(<=)
               (match Vs
                 [(list (-b (? real? x)) (-b (? real? y))) (bool->Dec (<= x y))] 
                 [(list (-b (? real? x)) (-‚óè Ps))
                  (for/or : ?Dec ([P (in-set Ps)])
                   (match P
                     [(or (P:‚â• y) (P:> y)) #:when (and y (>= y x)) '‚úì]
                     [(P:< y) #:when (<= y x) '‚úó]
                     ['exact-nonnegative-integer? #:when (<= x 0) '‚úì]
                     ['exact-positive-integer? #:when (<= x 1) '‚úì]
                     [_ #f]))]
                 [(list (? -b? b) (? S? S))
                  (‚äî*/set (Œª ([V : V]) (go '<= (list b V))) (T->V Œ£ {set Œ¶} S))]
                 [(list (-‚óè Ps) (-b (? real? y)))
                  (for/or : ?Dec ([P (in-set Ps)])
                    (match P
                      [(P:< x) (and (<= x y) '‚úì)]
                      [(P:‚â§ x) (and (<= x y) '‚úì)]
                      [(P:> x) (and (>  x y) '‚úó)]
                      [(P:‚â• x) (and (>  x y) '‚úó)]
                      [(P:‚â° (? real? x)) (bool->Dec (<= x y))]
                      [_ #f]))]
                 [(list (? S? S) (? -b? b))
                  (‚äî*/set (Œª ([V : V]) (go '<= (list V b))) (T->V Œ£ {set Œ¶} S))]
                 ;; More special case to avoid SMT
                 [(list (S:@ 'sub1 (list S)) S) '‚úì]
                 [(list S (S:@ 'sub1 (list S))) '‚úó]
                 [(list (S:@ '- (list S (-b (? (>=/c 0))))) S) '‚úì]
                 [(list S (S:@ '- (list S (-b (? (>/c 0)))))) '‚úó]
                 [(list (S:@ '+ (list S (-b (? (<=/c 0))))) S) '‚úì]
                 [(list (S:@ '+ (list (-b (? (<=/c 0))) S)) S) '‚úì]
                 [(list S (S:@ '+ (list S (-b (? (</c 0)))))) '‚úó]
                 [(list S (S:@ '+ (list (-b (? (</c 0))) S))) '‚úó]
                 [_ #f])]
              [(<) (neg (go '<= (reverse Vs)))]
              [(>) (neg (go '<= Vs))]
              [(>=) (go '<= (reverse Vs))]
              [(= equal? eq? char=? string=?)
               (match Vs
                 [(list (-b x) (-b y)) (bool->Dec (equal? x y))]
                 [(list (-‚óè Ps) (-b b)) (Ps‚ä¢P Ps (P:‚â° b))]
                 [(list (-b b) (-‚óè Ps)) (Ps‚ä¢P Ps (P:‚â° b))]
                 [(list (? -o? o‚ÇÅ) (? -o? o‚ÇÇ)) (bool->Dec (equal? o‚ÇÅ o‚ÇÇ))]
                 [_ #f])]
              [(list?) (check-proper-list Œ£ Œ¶ (car Vs))]
              [(port? input-port? output-port?) '‚úó]
              [else (and (bool-excludes? (get-conservative-range P)) '‚úì)])]
           [((P:¬¨ Q) _) (neg (go Q Vs))]
           [((P:‚â• r) _) (go '>= (list (car Vs) (-b r)))]
           [((P:> r) _) (go '>  (list (car Vs) (-b r)))]
           [((P:‚â§ r) _) (go '<= (list (car Vs) (-b r)))]
           [((P:< r) _) (go '<  (list (car Vs) (-b r)))]
           [((P:‚â° b) _) (go 'equal? (cons (-b b) Vs))]
           [((P:arity-includes a) (list V))
            (match (T-arity V)
              [(? values V:arity) (bool->Dec (arity-includes? V:arity a))]
              [_ #f])]
           [(_ _) #f])]))

    (go P‚ÇÄ Ts‚ÇÄ))

  (: Ps‚ä¢P : (‚Ñò P) P ‚Üí ?Dec)
  (define (Ps‚ä¢P Ps Q)
    (define (go [Ps : (‚Ñò P)] [Q : P])
      (or (match Q ;; Tmp. hack when `Q` is implied by 2+ predicates
            [(== -cons?)
             (and (‚àã Ps (P:¬¨ 'null?)) (‚àã Ps 'list?) '‚úì)]
            ['none/c '‚úó]
            ['any/c '‚úì]
            [_ #f])
          (for/or : ?Dec ([P (in-set Ps)])
            (P‚ä¢P P Q))))
    (define Q* (canonicalize Q))
    (if (set? Q*)
        (go/conj go Ps Q*)
        (go Ps Q*)))

  (: P‚ä¢P : P P ‚Üí ?Dec)
  (splicing-local
      ((define (base-only? [P : P]) ; whether predicate only covers base types
         (and (symbol? P) (not (memq P '(list? struct?)))))
       (define go : (P P ‚Üí ?Dec)
         (match-lambda**
          ;; Base
          [(_ 'any/c) '‚úì]
          [('none/c _) '‚úì]
          [(_ 'none/c) '‚úó]
          [('any/c _) #f]
          [(P P) '‚úì]
          [((? symbol? P) (? symbol? Q)) (o‚ä¢o P Q)]
          [(P 'values) (if (eq? P 'not) '‚úó '‚úì)]
          [((-st-p ùíæ‚ÇÅ) (-st-p ùíæ‚ÇÇ)) (bool->Dec (ùíæ‚ÇÅ . substruct? . ùíæ‚ÇÇ))]
          [((? base-only?) (? -st-p?)) '‚úó]
          [((? -st-p?) (? base-only?)) '‚úó]
          ;; Negate
          [((P:¬¨ P) (P:¬¨ Q)) (case (go Q P)
                               [(‚úì) '‚úì]
                               [else #f])]
          [((? P? P) (P:¬¨ Q)) (neg (go P Q))]
          [((P:¬¨ P) (? P? Q)) (case (go Q P)
                                [(‚úì) '‚úó]
                                [else #f])]
          ;; Special rules for real numbers
          ; < and <
          [((P:‚â§ a)              (P:< b)             ) (and     (<  a b) '‚úì)]
          [((or (P:< a) (P:‚â§ a)) (or (P:< b) (P:‚â§ b))) (and a b (<= a b) '‚úì)]
          ; > and >
          [((P:‚â• a)              (P:> b)             ) (and     (>  a b) '‚úì)]
          [((or (P:> a) (P:‚â• a)) (or (P:> b) (P:‚â• b))) (and a b (>= a b) '‚úì)]
          ; < and >
          [((P:‚â§ a)              (P:‚â• b)             ) (and     (<  a b) '‚úó)]
          [((or (P:< a) (P:‚â§ a)) (or (P:> b) (P:‚â• b))) (and a b (<= a b) '‚úó)]
          ; > and <
          [((P:‚â• a)              (P:‚â§ b)             ) (and (>  a b) '‚úó)]
          [((or (P:> a) (P:‚â• a)) (or (P:< b) (P:‚â§ b))) (and a b (>= a b) '‚úó)]
          ; _ -> real?
          [((or (? P:<?) (? P:‚â§?) (? P:>?) (? P:‚â•?)) (or 'real? 'number?)) '‚úì]
          [((P:‚â° b) (? P? Q)) (check dummy-Œ£ ‚ä§Œ¶ Q (list (-b b)))]
          ; equal?
          [((P:‚â° b‚ÇÅ) (P:‚â° b‚ÇÇ)) (bool->Dec (equal? b‚ÇÅ b‚ÇÇ))]
          [((P:< a) (P:‚â° (? real? b))) #:when (<= a b) '‚úó]
          [((P:‚â§ a) (P:‚â° (? real? b))) #:when (<  a b) '‚úó]
          [((P:> a) (P:‚â° (? real? b))) #:when (>= a b) '‚úó]
          [((P:‚â• a) (P:‚â° (? real? b))) #:when (>  a b) '‚úó]
          [((P:‚â° (? real? a)) (P:< b)) (bool->Dec (<  a b))]
          [((P:‚â° (? real? a)) (P:‚â§ b)) (bool->Dec (<= a b))]
          [((P:‚â° (? real? a)) (P:> b)) (bool->Dec (>  a b))]
          [((P:‚â° (? real? a)) (P:‚â• b)) (bool->Dec (>= a b))]
          ;; Default
          [(_ _) #f])))
    (define (P‚ä¢P P Q)
      (define P* (canonicalize P))
      (define Q* (canonicalize Q))
      (cond [(and (set? P*) (set? Q*)) (go/conj Ps‚ä¢P P* Q*)]
            [(set? Q*)                 (go/conj go   P* Q*)]
            [(set? P*)                 (Ps‚ä¢P P* Q*)]
            [else                      (go P* Q*)])))

  (: go/conj (‚àÄ (X) (X P ‚Üí ?Dec) X (‚Ñò P) ‚Üí ?Dec))
  (define (go/conj step LHS RHS)
    ;; ‚úì if all RHS ‚úì
    ;; ? if all RHS ‚úì and ?
    ;; ‚úó if any RHS ‚úó
    (for/fold ([d : ?Dec '‚úì]) ([P·µ¢ (in-set RHS)] #:break (eq? d '‚úó))
      (case (step LHS P·µ¢)
        [(‚úì ) d ]
        [(‚úó ) '‚úó]
        [(#f) #f])))

  (splicing-local
      ((: with-conj : (Œ¶ P (Listof S) ‚Üí Œ¶) ‚Üí R T ‚Üí R)
       (define ((with-conj conj) R‚ÇÄ P)
         (cond
           [(P? P)
            (match-define (R W Œ¶^‚ÇÄ) R‚ÇÄ)
            (define Œ¶^‚ÇÅ (cond [(andmap S? W)
                               (for/set : Œ¶^ ([Œ¶ : Œ¶ (in-set Œ¶^‚ÇÄ)])
                                 (conj Œ¶ P W))]
                              [else Œ¶^‚ÇÄ]))
            (R W Œ¶^‚ÇÅ)]
           [else R‚ÇÄ]))
       (:* conj conj¬¨ : Œ¶ P (Listof S) ‚Üí Œ¶)
       (define (conj Œ¶ P Vs)
         (match* (P Vs)
           [('values (list (S:@ (? -o? P*) Vs*))) (conj  Œ¶ P* Vs*)]
           [('not    (list (S:@ (? -o? P*) Vs*))) (conj¬¨ Œ¶ P* Vs*)]
           [('>      (list (-b (? real? x)) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:< x) (list S))]
           [('>=     (list (-b (? real? x)) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:‚â§ x) (list S))]
           [('<      (list (-b (? real? x)) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:> x) (list S))]
           [('<=     (list (-b (? real? x)) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:‚â• x) (list S))]
           [('>      (list (and S (not (? -b?))) (-b (? real? x)))) (Œ®+ Œ¶ (P:> x) (list S))]
           [('>=     (list (and S (not (? -b?))) (-b (? real? x)))) (Œ®+ Œ¶ (P:‚â• x) (list S))]
           [('<      (list (and S (not (? -b?))) (-b (? real? x)))) (Œ®+ Œ¶ (P:< x) (list S))]
           [('<=     (list (and S (not (? -b?))) (-b (? real? x)))) (Œ®+ Œ¶ (P:‚â§ x) (list S))]
           [((or '= 'equal? 'eq? 'eqv? 'char=? 'string=?)  (list (-b x) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:‚â° x) (list S))]
           [((or '= 'equal? 'eq? 'eqv? 'char=? 'string=?)  (list (and S (not (? -b?))) (-b x))) (Œ®+ Œ¶ (P:‚â° x) (list S))]
           [(_       _                          ) (Œ®+ Œ¶ P Vs)]))
       (define (conj¬¨ Œ¶ P Vs)
         (match* (P Vs)
           [('values (list (S:@ (? -o? P*) Vs*))) (conj¬¨ Œ¶ P* Vs*)]
           [('not    (list (S:@ (? -o? P*) Vs*))) (conj  Œ¶ P* Vs*)]
           [((P:< X) _                          ) (conj  Œ¶ (P:‚â• X) Vs)]
           [((P:‚â§ X) _                          ) (conj  Œ¶ (P:> X) Vs)]
           [((P:> X) _                          ) (conj  Œ¶ (P:‚â§ X) Vs)]
           [((P:‚â• X) _                          ) (conj  Œ¶ (P:< X) Vs)]
           [((P:¬¨ Q) _                          ) (conj  Œ¶ Q Vs)]
           [('>      _                          ) (conj Œ¶ '<= Vs)]
           [('>=     _                          ) (conj Œ¶ '<  Vs)]
           [('<      _                          ) (conj Œ¶ '>= Vs)]
           [('<=     _                          ) (conj Œ¶ '>  Vs)]
           [((or '= 'equal? 'eq? 'eqv? 'char=? 'string=?) (list (-b x) (and S (not (? -b?))))) (Œ®+ Œ¶ (P:¬¨ (P:‚â° x)) (list S))]
           [((or '= 'equal? 'eq? 'eqv? 'char=? 'string=?) (list (and S (not (? -b?))) (-b x))) (Œ®+ Œ¶ (P:¬¨ (P:‚â° x)) (list S))]
           [(_       _                          ) (Œ®+ Œ¶ (P:¬¨ P) Vs)])))
    (define ‚àß (with-conj conj))
    (define ‚àß¬¨ (with-conj conj¬¨)))

  (splicing-let ([list-excl? ; TODO use prim-runtime
                  (set->predicate
                   {set 'number? 'integer? 'real? 'exact-nonnegative-integer?
                        'string? 'symbol?})])
    (: check-proper-list : (U Œ£ Œ£·µ•) Œ¶ T ‚Üí ?Dec)
    (define (check-proper-list Œ£ Œ¶ T‚ÇÄ)
      (define Œ® (Œ¶-condition Œ¶))
      (define-set seen : Œ± #:eq? #t #:as-mutable-hash? #t)

      (: go-Œ± : Œ± ‚Üí ?Dec)
      (define (go-Œ± Œ±)
        (cond [(seen-has? Œ±) '‚úì]
              [else (seen-add! Œ±)
                    (‚äî*/set go (Œ£·µ•@ Œ£ Œ±))]))
      
      (: go : T ‚Üí ?Dec)
      (define go
        (match-lambda
          [(Cons _ Œ±) (go-Œ± Œ±)]
          [(Cons/G Œ±) (go-Œ± Œ±)]
          [(-b b) (bool->Dec (null? b))]
          [(S:@ (== -cons) (list _ S)) (go S)]
          [(-‚óè Ps) (cond [(‚àã Ps 'list?) '‚úì]
                         [(sequence-ormap list-excl? Ps) '‚úó]
                         [else #f])]
          [(? S? S)
           (or (Ps‚ä¢P (Œ®@ Œ¶ (list S)) 'list?)
               (match (Ps‚ä¢P (Œ®@ Œ¶ (list S)) -cons?)
                 ['‚úì (define S.cdr (S:@ -cdr (list S)))
                     (and (hash-has-key? Œ® (list S.cdr)) (go S.cdr))]
                 [d d]))]))
      (go T‚ÇÄ)))

  (: check-one-of : T (Listof Base) ‚Üí ?Dec)
  (define (check-one-of T bs)
    (match T
      [(-b b) (if (member b bs) '‚úì '‚úó)]
      [(? -‚óè?) #f]
      [(? S?) #f]
      [_ '‚úó]))

  (define ‚ä¢T : (T ‚Üí ?Dec)
    (match-lambda
      [(-b b) (bool->Dec (and b #t))]
      [(-‚óè Ps) (neg (Ps‚ä¢P Ps 'not))]
      [(S:@ (? -st-mk?) _) '‚úì]
      [(? S?) #f]
      [_ '‚úì]))

  (: check-range-in : -o P ‚Üí ?Dec)
  (define (o . check-range-in . P)
    (match o
      [(? symbol? o) (P‚ä¢P (get-conservative-range o) P)]
      [(-st-mk ùíæ) (P‚ä¢P (-st-p ùíæ) P)]
      [(? -st-mut?) (P‚ä¢P 'void? P)]
      [_ #f]))

  (define bool-excludes? (set->predicate (get-exclusions 'boolean?)))

  (: T-arity (case-> [Clo ‚Üí (U Natural arity-at-least)]
                     [Case-Clo ‚Üí Arity]
                     [T ‚Üí (Option Arity)]))
  (define T-arity
    (match-lambda
      [(Clo xs _ _) (shape xs)]
      [(Case-Clo cases) (normalize-arity (map T-arity cases))]
      [(-‚óè Ps) (for/or : (Option Arity) ([P (in-set Ps)])
                 (match P
                   [(P:arity-includes a) a]
                   [_ #f]))]
      [(or (And/C #t _ _) (Or/C #t _ _) (? Not/C?) (St/C #t _ _) (? One-Of/C?)) 1]
      [(X/G _ (? Fn/C? G) Œ±) (or (guard-arity G)
                                 (match-let ([(-Œ±:fn _ _ a) (inspect-Œ± Œ±)])
                                   a))]
      [(? -st-p?) 1]
      [(-st-mk ùíæ) (count-struct-fields ùíæ)]
      [(? -st-ac?) 1]
      [(? -st-mut?) 2]
      [(? symbol? o) (prim-arity o)]
      [V
       #:when (not (or (Clo? V) (Case-Clo? V))) ; to convince TR
       (log-warning "Warning: call `T-arity` on non-procedure ~a" V)
       #f]))

  (: T->V : ((U Œ£ Œ£·µ•) Œ¶^ (U T T^) ‚Üí V^))
  (define (T->V Œ£ Œ¶^ T)

    (: refine‚ÇÅ : V (‚Ñò P) ‚Üí (Option V))
    (define (refine‚ÇÅ V‚ÇÄ Ps)
      (for/fold ([V* : (Option V) V‚ÇÄ])
                ([P (in-set Ps)] #:break (not V*))
        (and (not (for/and : Boolean ([Œ¶ (in-set Œ¶^)])
                    (eq? '‚úó (check Œ£ Œ¶ P (list (assert V*))))))
             (V+ (assert V*) P))))

    (: refine : V^ (‚Ñò P) ‚Üí V^)
    (define (refine Vs Ps)
      (for*/set : V^ ([V (in-set Vs)]
                      [V* (in-value (refine‚ÇÅ V Ps))] #:when V*)
        V*))

    (: ac : -ùíæ Index V^ ‚Üí V^)
    (define (ac ùíæ k Vs)
      (define go : (V ‚Üí V^)
        (match-lambda
          [(St (== ùíæ) Œ±s) (Œ£·µ•@ Œ£ (list-ref Œ±s k))]
          [(-‚óè Ps) {set (-‚óè (if (and (‚àã Ps 'list?) (equal? ùíæ -ùíæ-cons) (equal? k 1))
                                {set 'list?}
                                ‚àÖ))}]
          [_ absurd!]))
      (set-union-map go Vs))

    (define S->V : (S ‚Üí V^)
      (match-lambda
        [(? -b? b) {set b}]
        [(? -o? o) {set o}]
        [(and S (S:Œ± Œ±)) (refine (Œ£·µ•@ Œ£ Œ±) (Œ®@ Œ¶^ (list S)))]
        [(and S (S:@ (-st-ac ùíæ k) (list S*))) (refine (ac ùíæ k (S->V S*)) (Œ®@ Œ¶^ (list S)))]
        [S {set (-‚óè (Œ®@ Œ¶^ (list S)))}]))

    (cond [(S? T) (S->V T)]
          [(set? T) T]
          [else {set T}]))

  (: V^+ (case-> [Œ£ V^ V ‚Üí V^]
                 [Œ£ T^ V ‚Üí T^]))
  (define (V^+ Œ£ x p)
    (cond [(?concretize p)]
          [(set? x)
           (for/fold ([acc : V^ ‚àÖ]) ([V (in-set x)])
             (case (check Œ£ ‚ä§Œ¶ p (list V))
               [(‚úì) (set-add acc V)]
               [(‚úó) acc]
               [else (set-add acc (V+ V p))]))]
          [else x]))

  (define V+ : (V V ‚Üí V)
    (match-lambda**
     [(V (St/C _ ùíæ _)) (V+ V (-st-p ùíæ))]
     [(V (-st-p ùíæ)) #:when (zero? (count-struct-fields ùíæ)) (St ùíæ '())]
     [((-‚óè ps) (? P? p)) (-‚óè (Ps+ ps p))]
     [(V _) V]))

  (define ?concretize : (V ‚Üí (Option V^))
    (match-lambda
      ['null? {set -null}]
      ['not {set -ff}]
      [_ #f]))

  (: Œ®+ (case-> [Œ® (U P (‚Ñò P)) (Listof S) ‚Üí Œ®]
                [Œ¶ (U P (‚Ñò P)) (Listof S) ‚Üí Œ¶]
                [Œ¶^ (U P (‚Ñò P)) (Listof S) ‚Üí Œ¶^]))
  (define (Œ®+ x p* xs)
    (define go : (Œ® ‚Üí Œ®)
      (if (set? p*)
          (Œª (Œ®‚ÇÄ) (hash-update Œ®‚ÇÄ xs (Œª ([ps : (‚Ñò P)]) ((iter-‚äî Ps+) ps p*)) mk-‚àÖ))
          (Œª (Œ®‚ÇÄ) (hash-update Œ®‚ÇÄ xs (Œª ([ps : (‚Ñò P)]) (Ps+ ps p*)) mk-‚àÖ))))
    (define go-Œ¶ : (Œ¶ ‚Üí Œ¶) (match-lambda [(Œ¶ $ Œ®) (Œ¶ $ (go Œ®))]))
    (cond [(set? x) (map/set go-Œ¶ x)]
          [(Œ¶? x) (go-Œ¶ x)]
          [else (go x)])) 

  (define P‚äì : (?Joiner P)
    ((inst join-by-max P)
     ;; remember that it's reversed.
     ;; FIXME The names `max` and `join` are misleading
     (Œª (P Q)
       (define P‚ÜíQ? (eq? '‚úì (P‚ä¢P P Q)))
       (define Q‚ÜíP? (eq? '‚úì (P‚ä¢P Q P)))
       (or (and P‚ÜíQ? Q‚ÜíP? '=)
           (and P‚ÜíQ? '>)
           (and Q‚ÜíP? '<)))))

  (: Ps+ : (‚Ñò P) P ‚Üí (‚Ñò P))
  (define Ps+
    (let ([step : ((‚Ñò P) P ‚Üí (‚Ñò P)) (compact-with P‚äì)])
      (Œª (Ps P)
        (define Q (canonicalize P))
        (if (set? Q) ((iter-‚äî step) Ps Q) (step Ps Q)))))

  (: canonicalize : P ‚Üí (U P (‚Ñò P)))
  (define canonicalize
    (match-lambda
      ['exact-nonnegative-integer? {set 'exact? 'integer? (P:‚â• 0)}]
      ['exact-positive-integer? {set 'exact? 'integer? (P:‚â• 0) (P:¬¨ (P:‚â° 0))}]
      ['exact-integer? {set 'exact? 'integer?}]
      ['positive? {set (P:‚â• 0) (P:¬¨ (P:‚â° 0))}] ; FIXME no, subtlety with `0.0`
      ['negative? (P:¬¨ (P:‚â• 0))]
      ['zero? (P:‚â° 0)] ; FIXME no, subtlety with `0.0`
      [(P:> x) {set (P:‚â• x) (P:¬¨ (P:‚â° x))}] ; FIXME subtlety with exactness
      [(P:< x) (P:¬¨ (P:‚â• x))]
      [P P]))

  (define dummy-Œ£ (‚ä•Œ£))
  ) 
