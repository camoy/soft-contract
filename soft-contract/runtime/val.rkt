#lang typed/racket/base

(provide val@)

(require typed/racket/unit
         racket/match
         racket/set
         (only-in racket/list make-list)
         set-extras
         unreachable
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt")

(define-unit val@
  (import meta-functions^ static-info^
          prims^
          sto^)
  (export val^)

  (: collapse-W^ : W^ ‚Üí W)
  (define (collapse-W^ Ws) (set-fold W‚äî (set-first Ws) (set-rest Ws)))
  
  (: collapse-W^-by-arities : W^ ‚Üí (Immutable-HashTable Index W))
  (define (collapse-W^-by-arities Ws)
    (for/fold ([acc : (Immutable-HashTable Index W) (hasheq)])
              ([W·µ¢ (in-set Ws)])
      (define n (length W·µ¢))
      (hash-update acc n
                   (Œª ([W‚ÇÄ : W]) (W‚äî W‚ÇÄ W·µ¢))
                   (Œª () (make-list n ‚àÖ))))) 

  (: V/ : S ‚Üí V ‚Üí V)
  (define (V/ S)
    (define (Œ±/ [Œ± : Œ±]) (hash-ref S Œ± (Œª () Œ±)))
    (define Clo/ : (Clo ‚Üí Clo)
      (match-lambda [(Clo xs E Œ±s ‚Ñì) (Clo xs E (map/set Œ±/ Œ±s) ‚Ñì)]))
    (define ==>/ : (==> ‚Üí ==>)
      (match-lambda [(==> cs d ‚Ñì) (==> (var-map Œ±/ cs) (and d (map Œ±/ d)) ‚Ñì)]))
    (define Dom/ : (Dom ‚Üí Dom)
      (match-lambda [(Dom x c ‚Ñì) (Dom x (if (Clo? c) (Clo/ c) (Œ±/ c)) ‚Ñì)]))
    (define Prox/C/ : (Prox/C ‚Üí Prox/C)
      (match-lambda
        [(St/C ùíæ Œ±s ‚Ñì) (St/C ùíæ (map Œ±/ Œ±s) ‚Ñì)]
        [(Vectof/C Œ± ‚Ñì) (Vectof/C (Œ±/ Œ±) ‚Ñì)]
        [(Vect/C Œ±s ‚Ñì) (Vect/C (map Œ±/ Œ±s) ‚Ñì)]
        [(Hash/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) (Hash/C (Œ±/ Œ±‚ÇÅ) (Œ±/ Œ±‚ÇÇ) ‚Ñì)]
        [(Set/C Œ± ‚Ñì) (Set/C (Œ±/ Œ±) ‚Ñì)]
        [(? ==>? C) (==>/ C)]
        [(==>i dom rng) (==>i (map Dom/ dom) (Dom/ rng))]
        [(‚àÄ/C xs E Œ±s) (‚àÄ/C xs E (map/set Œ±/ Œ±s))]
        [(Case-=> Cs) (Case-=> (map ==>/ Cs))]))
    (Œª (V‚ÇÄ)
      (let go ([V : V V‚ÇÄ])
        (match V
          [(St ùíæ Œ±s) (St ùíæ (map Œ±/ Œ±s))]
          [(Vect Œ±s) (Vect (map Œ±/ Œ±s))]
          [(Vect-Of Œ± V‚Çô) (Vect-Of (Œ±/ Œ±) (map/set go V‚Çô))]
          [(Hash-Of Œ±‚ÇÅ Œ±‚ÇÇ im?) (Hash-Of (Œ±/ Œ±‚ÇÅ) (Œ±/ Œ±‚ÇÇ) im?)]
          [(Set-Of Œ± im?) (Set-Of (Œ±/ Œ±) im?)]
          [(Guarded ctx G Œ±) (Guarded ctx (Prox/C/ G) (Œ±/ Œ±))]
          [(Sealed Œ±) (Sealed (Œ±/ Œ±))]
          [(? Clo? clo) (Clo/ clo)]
          [(Case-Clo clos ‚Ñì) (Case-Clo (map Clo/ clos) ‚Ñì)]
          [(And/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) (And/C (Œ±/ Œ±‚ÇÅ) (Œ±/ Œ±‚ÇÇ) ‚Ñì)]
          [(Or/C Œ±‚ÇÅ Œ±‚ÇÇ ‚Ñì) (Or/C (Œ±/ Œ±‚ÇÅ) (Œ±/ Œ±‚ÇÇ) ‚Ñì)]
          [(Not/C Œ± ‚Ñì) (Not/C (Œ±/ Œ±) ‚Ñì)]
          [(? Prox/C? C) (Prox/C/ C)]
          [(Seal/C Œ±) (Seal/C (Œ±/ Œ±))]
          [(? Œ±? Œ±) (Œ±/ Œ±)]
          [V V]))))

  (: W‚äî : W W ‚Üí W)
  (define (W‚äî W‚ÇÅ W‚ÇÇ) ((inst map V^ V^ V^) ‚à™ W‚ÇÅ W‚ÇÇ))

  (define Ctx-with-site : (Ctx ‚Ñì ‚Üí Ctx)
    (match-lambda** [((Ctx l+ l- ‚Ñì:o _) ‚Ñì) (Ctx l+ l- ‚Ñì:o ‚Ñì)]))

  (define Ctx-flip : (Ctx ‚Üí Ctx)
    (match-lambda [(Ctx l+ l- lo ‚Ñì) (Ctx l- l+ lo ‚Ñì)]))

  (: C-flat? : V Œ£ ‚Üí Boolean)
  ;; Check whether contract is flat, assuming it's already a contract
  (define (C-flat? C Œ£)
    (define-set seen : Œ± #:as-mutable-hash? #t)
    (: go-Œ± : Œ± ‚Üí Boolean)
    (define (go-Œ± Œ±)
      (cond [(seen-has? Œ±) #t]
            [else (seen-add! Œ±)
                  (set-andmap go-V (unpack Œ± Œ£))]))
    (: go-V : V ‚Üí Boolean)
    (define go-V
      (match-lambda
        [(And/C Œ±‚ÇÅ Œ±‚ÇÇ _) (and (go-Œ± Œ±‚ÇÅ) (go-Œ± Œ±‚ÇÇ))]
        [(Or/C Œ±‚ÇÅ Œ±‚ÇÇ _) (and (go-Œ± Œ±‚ÇÅ) (go-Œ± Œ±‚ÇÇ))]
        [(? Not/C?) #t]
        [(St/C _ Œ±s _) (andmap go-Œ± Œ±s)]
        [(Hash/C Œ±‚Çñ Œ±·µ• _) (and (go-Œ± Œ±‚Çñ) (go-Œ± Œ±·µ•))]
        [(Set/C Œ± _) (go-Œ± Œ±)]
        [(? Fn/C?) #f]
        [(or (? Clo?) (Guarded _ (? Fn/C?) _) (? -prim?) (? Case-Clo?)) #t]
        [(Œ±:dyn (? Œ≤:x/c?) _) #t]
        [(? ‚àÄ/C?) #f]
        [(? Seal/C?) #f]
        [V (error 'C-flat? "unexpected: ~a" V)]))
    (go-V C))

  (: C^-flat? : V^ Œ£ ‚Üí Boolean)
  (define (C^-flat? C^ Œ£)
    (for/and : Boolean ([C (in-set C^)]) (C-flat? C Œ£)))

  (: arity (case->
            [Clo ‚Üí (U Natural arity-at-least)]
            [V ‚Üí (Option Arity)]))
  (define arity
    (match-lambda
      [(Guarded _ (? Fn/C? G) _) (guard-arity G)]
      [(Clo xs _ _ _) (shape xs)]
      [(Case-Clo clos _) (map arity clos)]
      [(? And/C?) 1]
      [(? Or/C?) 1]
      [(? Not/C?) 1]
      [(? St/C?) 1]
      [(? One-Of/C?) 1]
      [(? -st-p?) 1]
      [(? -st-mut?) 2]
      [(-st-mk ùíæ) (count-struct-fields ùíæ)]
      [(? symbol? o) (prim-arity o)]
      [V #:when (not (Clo? V)) #f]))

  (: guard-arity (case->
                  [==> ‚Üí (U Natural arity-at-least)]
                  [Fn/C ‚Üí Arity]))
  (define guard-arity
    (match-lambda
      [(==> doms _ _) (shape doms)]
      [(==>i doms _) (length doms)]
      [(Case-=> cases) (map guard-arity cases)]
      [(‚àÄ/C _ E _)
       ;; TODO: real Racket just returns `(arity-at-least 0)`
       (cond [(E-arity E) => values] [else (error 'guard-arity "~a" E)])]))

  (: E-arity (case->
              [--> ‚Üí (U Natural arity-at-least)]
              [E ‚Üí Arity]))
  (define E-arity
    (match-lambda
      [(--> doms _ _) (shape doms)]
      [(-->i doms _) (length doms)]
      [(case--> cases) (map E-arity cases)]
      [(-‚àÄ/c _ E) (E-arity E)]
      [E (error 'E-arity "~a" E)]))

  (: collect-behavioral-values : W^ Œ£ ‚Üí V^)
  (define (collect-behavioral-values Ws Œ£)
    (for*/fold ([acc : V^ ‚àÖ])
               ([W (in-set Ws)]
                [Vs (in-list W)]
                [V (in-set Vs)] #:when (behavioral? V Œ£))
      (set-add acc V)))

  (: behavioral? : V Œ£ ‚Üí Boolean)
  ;; Check if value maybe behavioral.
  ;; `#t` is a conservative answer "maybe yes"
  ;; `#f` is a strong answer "definitely no"
  (define (behavioral? V‚ÇÄ Œ£)
    (define-set seen : Œ± #:as-mutable-hash? #t)

    (: check-Œ± : Œ± ‚Üí Boolean)
    (define (check-Œ± Œ±)
      (cond [(seen-has? Œ±) #f]
            [else (seen-add! Œ±)
                  (set-ormap check (unpack Œ± Œ£))]))

    (: check : V ‚Üí Boolean)
    (define check
      (match-lambda
        [(St _ Œ±s) (ormap check-Œ± Œ±s)]
        [(Vect Œ±s) (ormap check-Œ± Œ±s)]
        [(Vect-Of Œ± _) (check-Œ± Œ±)]
        [(Hash-Of Œ±‚Çñ Œ±·µ• im?) (or (not im?) (check-Œ± Œ±‚Çñ) (check-Œ± Œ±·µ•))]
        [(Set-Of Œ± im?) (or (not im?) (check-Œ± Œ±))]
        [(Guarded _ G Œ±) (or (Fn/C? G) (check-Œ± Œ±))]
        [(==> (-var doms dom·µ£) rngs _)
         (or (and (pair? rngs) (ormap check-Œ± rngs))
             (and dom·µ£ (check-Œ± dom·µ£))
             (and rngs (ormap check-Œ± doms)))]
        [(? ==>i?) #t]
        [(Case-=> cases) (ormap check cases)]
        [(or (? Clo?) (? Case-Clo?)) #t]
        [(and T (or (? T:@?) (? Œ±?))) (set-ormap check (unpack T Œ£))]
        [_ #f]))

    (check V‚ÇÄ))

  (:* with-negative-party with-positive-party : -l V ‚Üí V)
  (define with-negative-party
    (match-lambda**
     [(l- (Guarded (Ctx l+ _ ‚Ñì‚Çí ‚Ñì) C Œ±)) (Guarded (Ctx l+ l- ‚Ñì‚Çí ‚Ñì) C Œ±)]
     [(_ V) V]))
  (define with-positive-party
    (match-lambda**
     [(l+ (Guarded (Ctx _ l- ‚Ñì‚Çí ‚Ñì) C Œ±)) (Guarded (Ctx l+ l- ‚Ñì‚Çí ‚Ñì) C Œ±)]
     [(_ V) V]))

  #| 
  (: estimate-list-lengths : (U Œ£ Œ£·µ•) V ‚Üí (‚Ñò (U #f Arity)))
  ;; Estimate possible list lengths from the object language's abstract list
  (define (estimate-list-lengths Œ£ V)
    ???
    #|
    (define-set seen : ‚ü™Œ±‚ü´ #:eq? #t #:as-mutable-hash? #t)
    (define maybe-non-proper-list? : Boolean #f)

    (: arity-inc : Arity ‚Üí Arity)
    (define arity-inc
      (match-lambda
        [(? exact-integer? n) (+ 1 n)]
        [(arity-at-least n) (arity-at-least (+ 1 n))]))
    
    (: go! : -V ‚Üí (‚Ñò Arity))
    (define go!
      (match-lambda
        [(-Cons _ Œ±‚Çú)
         (cond [(seen-has? Œ±‚Çú) {set (arity-at-least 0)}]
               [else (seen-add! Œ±‚Çú)
                     (for/union : (‚Ñò Arity) ([V* (in-set (œÉ@ œÉ Œ¥œÉ Œ±‚Çú))])
                       (map/set arity-inc (go! V*)))])]
        [(-b '()) {set 0}]
        [(-‚óè ps) #:when (‚àã ps 'list?) {set (arity-at-least 0)}]
        [_ (set! maybe-non-proper-list? #t)
           ‚àÖ]))
    (define res
      (match (normalize-arity (set->list (go! V)))
        [(? list? l) (list->set l)]
        [a {set a}]))
      (if maybe-non-proper-list? (set-add res #f) res)
    |#)

  (define cmp-sets : (?Cmp (‚Ñò Any))
    (Œª (s‚ÇÅ s‚ÇÇ)
      (define s‚ÇÅ‚äÜs‚ÇÇ (s‚ÇÅ . ‚äÜ . s‚ÇÇ))
      (define s‚ÇÇ‚äÜs‚ÇÅ (s‚ÇÇ . ‚äÜ . s‚ÇÅ))
      (or (and s‚ÇÅ‚äÜs‚ÇÇ s‚ÇÇ‚äÜs‚ÇÅ '=)
          (and s‚ÇÅ‚äÜs‚ÇÇ '<)
          (and s‚ÇÇ‚äÜs‚ÇÅ '>))))

  (: set-lift-cmp (‚àÄ (X) (?Cmp X) ‚Üí (?Cmp (‚Ñò X))))
  (define ((set-lift-cmp cmp*) xs ys)
    (define cache : (Mutable-HashTable X (Mutable-HashTable X ?Ord)) (make-hasheq))
    (for ([x (in-set xs)])
      (define x:cmp : (Mutable-HashTable X ?Ord) (make-hasheq))
      (hash-set! cache x x:cmp)
      (for ([y (in-set ys)])
        (hash-set! x:cmp y (cmp* x y))))
    (define (flip [o : ?Ord]) : ?Ord
      (case o [(>) '<] [(<) '>] [else o]))
    (define (cmp [x : X] [y : X]) : ?Ord
      (match (hash-ref cache x #f)
        [(? values x:cmp) (hash-ref x:cmp y (Œª () (flip (cmp y x))))]
        [#f (flip (cmp y x))]))
    (define (‚äë [s‚ÇÅ : (‚Ñò X)] [s‚ÇÇ : (‚Ñò X)])
      (for/and : Boolean ([x (in-set s‚ÇÅ)])
        (for/or : Boolean ([y (in-set s‚ÇÇ)])
          (case (cmp x y)
            [(< =) #t]
            [else  #f]))))
    (define xs‚äëys (xs . ‚äë . ys))
    (define ys‚äëys (ys . ‚äë . xs))
    (or (and xs‚äëys ys‚äëys '=)
        (and xs‚äëys '<)
        (and ys‚äëys '>)))

  (: fold-cmp (‚àÄ (X) (?Cmp X) (Listof X) (Listof X) ‚Üí ?Ord))
  (define (fold-cmp cmp xs ys)
    (let go ([xs : (Listof X) xs] [ys : (Listof X) ys])
      (match* (xs ys)
        [((cons x xs*) (cons y ys*))
         (define x-vs-y (cmp x y))
         (and x-vs-y (concat-ord x-vs-y (go xs* ys*)))]
        [('() '()) '=]
        [(_ _) #f])))

  (: join-by-max (‚àÄ (X) (?Cmp X) ‚Üí (?Joiner X)))
  (define ((join-by-max cmp) x‚ÇÅ x‚ÇÇ)
    (case (cmp x‚ÇÅ x‚ÇÇ)
      [(> =) x‚ÇÅ]
      [(<  ) x‚ÇÇ]
      [else  #f]))

  (: compact-with (‚àÄ (X) (?Joiner X) ‚Üí (‚Ñò X) X ‚Üí (‚Ñò X)))
  (define ((compact-with ?‚äî) xs x)
    (define-values (subsumed x*)
      (for*/fold ([subsumed : (‚Ñò X) ‚àÖ] [x* : X x])
                 ([x‚ÇÄ (in-set xs)]
                  [?x‚ÇÅ (in-value (?‚äî x‚ÇÄ x*))] #:when ?x‚ÇÅ)
        (values (set-add subsumed x‚ÇÄ) ?x‚ÇÅ)))
    (set-add (set-subtract xs subsumed) x*))

  (: iter-‚äî (‚àÄ (X) ((‚Ñò X) X ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X) (‚Ñò X) ‚Üí (‚Ñò X)))
  (define ((iter-‚äî f) xs‚ÇÅ xs‚ÇÇ)
    (for/fold ([acc : (‚Ñò X) xs‚ÇÅ]) ([x (in-set xs‚ÇÇ)])
      (f acc x)))

  (define Ctx-with-origin : (Ctx ‚Ñì ‚Üí Ctx)
    (match-lambda**
     [((Ctx l+ l- _ ‚Ñì) ‚Ñì:o) (Ctx l+ l- ‚Ñì:o ‚Ñì)]))

  (define X/C->binder : (X/C ‚Üí Symbol)
    (match-lambda [(X/C Œ±)
                   (match (inspect-Œ± Œ±)
                     ;; TODO other cases
                     [(-Œ±:x/c x _) x]
                     [(-Œ±:imm:listof x _ _) x])]))
  |#
  )
