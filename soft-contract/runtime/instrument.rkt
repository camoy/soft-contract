#lang typed/racket/base

(provide (all-defined-out))

(require racket/list
         syntax/parse/define
         "../utils/main.rkt"
         "definition.rkt")

(define call-count : (HashTable -‚ü¶e‚üß! Integer) (make-hasheq))
(define total-time : (HashTable -‚ü¶e‚üß! Integer) (make-hasheq))

(define-simple-macro (Œª/instrument (x ...) e ...)
  (instrument (Œª (x ...) e ...)))

(define/memoeq (instrument [‚ü¶e‚üß : -‚ü¶e‚üß!]) : -‚ü¶e‚üß!
  (Œª (œÅ $ Œì ùíû Œ£ ‚ü¶k‚üß)
    (define t‚ÇÄ (current-milliseconds))
    (define ans (‚ü¶e‚üß œÅ $ Œì ùíû Œ£ ‚ü¶k‚üß))
    (define Œ¥t (- (current-milliseconds) t‚ÇÄ))
    (hash-update! call-count ‚ü¶e‚üß add1 (Œª () 0))
    (hash-update! total-time ‚ü¶e‚üß (Œª ([t : Integer]) (+ t Œ¥t)) (Œª () 0))
    ans))

(: table-max ((HashTable -‚ü¶e‚üß! Integer) Natural ‚Üí (Listof (Pairof -‚ü¶e‚üß! Integer))))
(define (table-max m num)
  (define sorted-pairs
    (sort
     (hash->list m)
     (Œª ([p‚ÇÅ : (Pairof -‚ü¶e‚üß! Integer)] [p‚ÇÇ : (Pairof -‚ü¶e‚üß! Integer)])
       (> (cdr p‚ÇÅ) (cdr p‚ÇÇ)))))
  (take sorted-pairs (min (hash-count m) num)))

(: best-count ([] [Natural] . ->* . (Listof (Pairof -‚ü¶e‚üß! Integer))))
(define (best-count [num 1]) (table-max call-count num))
(: best-total ([] [Natural] . ->* . (Listof (Pairof -‚ü¶e‚üß! Integer))))
(define (best-total [num 1]) (table-max total-time num))
