#lang typed/racket/base

(provide for-gc@)

(require typed/racket/unit
         racket/splicing
         racket/match
         racket/set
         set-extras
         "../signatures.rkt"
         "../ast/signatures.rkt"
         "../utils/main.rkt"
         "signatures.rkt"
         )

(define-unit for-gc@
  (import sto^ pretty-print^)
  (export for-gc^)

  ;; TMP hack for part of root set from stack frames
  (splicing-let ([m ((inst make-hasheq -‚ü¶k‚üß (‚Ñò ‚ü™Œ±‚ü´)))])
    
    (define (add-‚ü¶k‚üß-roots! [‚ü¶k‚üß : -‚ü¶k‚üß] [Œ±s : (‚Ñò ‚ü™Œ±‚ü´)]) : Void
      (hash-update! m ‚ü¶k‚üß (Œª ([Œ±s‚ÇÄ : (‚Ñò ‚ü™Œ±‚ü´)]) (‚à™ Œ±s‚ÇÄ Œ±s)) mk-‚àÖeq))
    
    ;; Return the root set spanned by the stack chunk for current block
    (define (‚ü¶k‚üß->roots [‚ü¶k‚üß : -‚ü¶k‚üß])
      (hash-ref m ‚ü¶k‚üß (Œª () (error '‚ü¶k‚üß->Œ±s "nothing for ~a" ‚ü¶k‚üß)))))

  ;; TMP hack for mapping stack to stack address to return to
  (splicing-let ([m ((inst make-hasheq -‚ü¶k‚üß -Œ±‚Çñ))])

    (define (set-‚ü¶k‚üß->Œ±‚Çñ! [‚ü¶k‚üß : -‚ü¶k‚üß] [Œ±‚Çñ : -Œ±‚Çñ]) : Void
      (hash-update! m ‚ü¶k‚üß
                    (Œª ([Œ±‚Çñ‚ÇÄ : -Œ±‚Çñ]) ; just for debugging
                      (assert (equal? Œ±‚Çñ‚ÇÄ Œ±‚Çñ))
                      Œ±‚Çñ‚ÇÄ)
                    (Œª () Œ±‚Çñ)))
    
    (define (‚ü¶k‚üß->Œ±‚Çñ [‚ü¶k‚üß : -‚ü¶k‚üß]) : -Œ±‚Çñ
      (hash-ref m ‚ü¶k‚üß (Œª () (error '‚ü¶k‚üß->Œ±‚Çñ "nothing for ~a" ‚ü¶k‚üß)))))

  (define/memoeq (V->‚ü™Œ±‚ü´s [V : -V]) : (‚Ñò ‚ü™Œ±‚ü´)
    (with-debugging/off
      ((Œ±s)
       (match V
         [(-St _ Œ±s) (list->seteq Œ±s)]
         [(-Vector Œ±s) (list->seteq Œ±s)]
         [(-Vector^ Œ± _) {seteq Œ±}]
         [(-Ar V Œ± _) (set-add (V->‚ü™Œ±‚ü´s V) Œ±)]
         [(-St* grd Œ± _) (set-add (V->‚ü™Œ±‚ü´s grd) Œ±)]
         [(-Hash^ Œ±‚Çñ Œ±·µ• _) {seteq Œ±‚Çñ Œ±·µ•}]
         [(-Set^ Œ± _) {seteq Œ±}]
         [(or (-Vector/guard grd Œ± _)
              (-Hash/guard grd Œ± _)
              (-Set/guard grd Œ± _))
          #:when (and grd Œ±)
          (set-add (V->‚ü™Œ±‚ü´s grd) Œ±)]
         [(-Clo _ _ œÅ _) (œÅ->‚ü™Œ±‚ü´s œÅ)]
         [(-Case-Clo _ œÅ _) (œÅ->‚ü™Œ±‚ü´s œÅ)]
         [(-And/C _ Œ± Œ≤) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±) (-‚ü™Œ±‚ü´‚Ñì-addr Œ≤)}]
         [(-Or/C  _ Œ± Œ≤) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±) (-‚ü™Œ±‚ü´‚Ñì-addr Œ≤)}]
         [(-Not/C Œ±) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±)}]
         [(-One-Of/C _) ‚àÖeq]
         [(-Hash/C Œ± Œ≤) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±) (-‚ü™Œ±‚ü´‚Ñì-addr Œ≤)}]
         [(-Set/C Œ±) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±)}]
         [(-x/C Œ±) {seteq Œ±}]
         [(-St/C _ _ Œ±s) {list->seteq (map -‚ü™Œ±‚ü´‚Ñì-addr Œ±s)}]
         [(-Vectorof Œ±) {seteq (-‚ü™Œ±‚ü´‚Ñì-addr Œ±)}]
         [(-Vector/C Œ±s) (list->seteq (map -‚ü™Œ±‚ü´‚Ñì-addr Œ±s))]
         [(-=> Œ±s Œ≤s _)
          (match Œ±s
            [(? list? Œ±s) (set-add* (list->seteq (map -‚ü™Œ±‚ü´‚Ñì-addr Œ±s))
                                    (if (pair? Œ≤s) (map -‚ü™Œ±‚ü´‚Ñì-addr Œ≤s) '()))]
            [(-var Œ±s Œ±·µ£)
             (set-add* (set-add (list->seteq (map -‚ü™Œ±‚ü´‚Ñì-addr Œ±s)) (-‚ü™Œ±‚ü´‚Ñì-addr Œ±·µ£))
                       (if (pair? Œ≤s) (map -‚ü™Œ±‚ü´‚Ñì-addr Œ≤s) '()))])]
         [(-=>i Œ±s (list D _ _) _) (‚à™ (list->seteq (map -‚ü™Œ±‚ü´‚Ñì-addr Œ±s)) (V->‚ü™Œ±‚ü´s D))]
         [(-Case-> clauses _)
          (for/unioneq : (‚Ñò ‚ü™Œ±‚ü´) ([clause clauses])
                       (match-define (cons Œ±s Œ±) clause)
                       (set-add (list->seteq Œ±s) Œ±))]
         [_ ‚àÖeq]))
      (printf "V->‚ü™Œ±‚ü´s ~a: (~a)~n" (show-V V) (set-count Œ±s))
      (for ([Œ± Œ±s])
        (printf " - ~a~n" Œ±))
      (printf "~n")))

  (: œÅ->‚ü™Œ±‚ü´s : -œÅ ‚Üí (‚Ñò ‚ü™Œ±‚ü´))
  (define (œÅ->‚ü™Œ±‚ü´s œÅ)
    (for/seteq: : (‚Ñò ‚ü™Œ±‚ü´) ([‚ü™Œ±‚ü´ : ‚ü™Œ±‚ü´ (in-hash-values œÅ)]) ‚ü™Œ±‚ü´))

  (: Œ±‚Çñ->‚ü™Œ±‚ü´s : -Œ±‚Çñ -œÉ‚Çñ ‚Üí (‚Ñò ‚ü™Œ±‚ü´))
  (define (Œ±‚Çñ->‚ü™Œ±‚ü´s Œ±‚Çñ œÉ‚Çñ)
    (define-set seen : -Œ±‚Çñ #:as-mutable-hash? #t)
    (let go ([acc : (‚Ñò ‚ü™Œ±‚ü´) ‚àÖeq] [Œ±‚Çñ : -Œ±‚Çñ Œ±‚Çñ])
      (cond
        [(seen-has? Œ±‚Çñ) acc]
        [else
         (seen-add! Œ±‚Çñ)
         (for/fold ([acc : (‚Ñò ‚ü™Œ±‚ü´) (if (-‚Ñãùí±? Œ±‚Çñ) (set-add acc ‚ü™Œ±‚ü´‚Çï·µ•) acc)])
                   ([Œ∫ (in-set (hash-ref œÉ‚Çñ Œ±‚Çñ mk-‚àÖ))])
           (define ‚ü¶k‚üß (-Œ∫-rest Œ∫))
           (go (‚à™ acc (‚ü¶k‚üß->roots ‚ü¶k‚üß)) (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß)))])))

  (: ‚ü¶k‚üß->‚ü™Œ±‚ü´s : -‚ü¶k‚üß -œÉ‚Çñ ‚Üí (‚Ñò ‚ü™Œ±‚ü´))
  (define (‚ü¶k‚üß->‚ü™Œ±‚ü´s ‚ü¶k‚üß œÉ‚Çñ)
    (‚à™ (‚ü¶k‚üß->roots ‚ü¶k‚üß) (Œ±‚Çñ->‚ü™Œ±‚ü´s (‚ü¶k‚üß->Œ±‚Çñ ‚ü¶k‚üß) œÉ‚Çñ)))

  (: ->‚ü™Œ±‚ü´s : (Rec X (U ‚ü™Œ±‚ü´ -V -W¬π -W -œÅ (-var X) (Listof X) (‚Ñò X))) ‚Üí (‚Ñò ‚ü™Œ±‚ü´))
  (define (->‚ü™Œ±‚ü´s x)
    (cond
      [(-var? x)
       (‚à™ (->‚ü™Œ±‚ü´s (-var-rest x))
          (for/unioneq : (‚Ñò ‚ü™Œ±‚ü´) ([x·µ¢ (in-list (-var-init x))]) (->‚ü™Œ±‚ü´s x·µ¢)))]
      [(list? x)
       (for/unioneq : (‚Ñò ‚ü™Œ±‚ü´) ([x·µ¢ (in-list x)]) (->‚ü™Œ±‚ü´s x·µ¢))]
      [(set? x)
       (for/unioneq : (‚Ñò ‚ü™Œ±‚ü´) ([x·µ¢ (in-set x)]) (->‚ü™Œ±‚ü´s x·µ¢))]
      [(-V? x) (V->‚ü™Œ±‚ü´s x)]
      [(-W¬π? x) (V->‚ü™Œ±‚ü´s (-W¬π-V x))]
      [(-W? x) (->‚ü™Œ±‚ü´s (-W-Vs x))]
      [(hash? x) (œÅ->‚ü™Œ±‚ü´s x)]
      [else {seteq x}]))

  (: œÉ-equal?/spanning-root : -œÉ -œÉ (‚Ñò ‚ü™Œ±‚ü´) ‚Üí Boolean)
  (define (œÉ-equal?/spanning-root œÉ‚ÇÅ œÉ‚ÇÇ root)
    (define-set seen : ‚ü™Œ±‚ü´ #:eq? #t #:as-mutable-hash? #t)
    
    (let go ([addrs : (‚Ñò ‚ü™Œ±‚ü´) root])
      (for/and : Boolean ([Œ± : ‚ü™Œ±‚ü´ (in-set addrs)])
        (cond
          [(seen-has? Œ±) #t]
          [else
           (seen-add! Œ±)
           (define Vs‚ÇÅ (hash-ref œÉ‚ÇÅ Œ± mk-‚àÖ))
           (define Vs‚ÇÇ (hash-ref œÉ‚ÇÇ Œ± mk-‚àÖ))
           (and (equal? Vs‚ÇÅ Vs‚ÇÇ)
                (for/and : Boolean ([V (in-set Vs‚ÇÅ)])
                  (go (V->‚ü™Œ±‚ü´s V))))]))))

  (: gc-$ : -$ -œÉ (‚Ñò ‚ü™Œ±‚ü´) ‚Üí -$)
  (define (gc-$ $ œÉ root)
    (define Œ±s (span* œÉ root V->‚ü™Œ±‚ü´s))
    (define locs
      (for*/set: : (‚Ñò -loc) ([Œ± : ‚ü™Œ±‚ü´ (in-set Œ±s)]
                             [?l (in-value (hack:Œ±->loc Œ±))]
                             #:when ?l)
        ?l))
    (for/fold ([$ : -$ $])
              ([l (in-hash-keys $)]
               #:unless (or (-loc.offset? l) (‚àã locs l)))
      (hash-remove $ l)))

  (splicing-local
      ((define bvs : (HashTable -‚ü¶e‚üß (‚Ñò Symbol)) (make-hasheq)))
    
    (: bound-vars : -‚ü¶e‚üß ‚Üí (‚Ñò Symbol))
    (define (bound-vars ‚ü¶e‚üß)
      (hash-ref bvs ‚ü¶e‚üß (Œª () (error 'bound-vars "nothing for ~a~n" (show-‚ü¶e‚üß ‚ü¶e‚üß)))))

    (: set-bound-vars! : -‚ü¶e‚üß (‚Ñò Symbol) ‚Üí Void)
    (define (set-bound-vars! ‚ü¶e‚üß xs)
      (cond [(hash-ref bvs ‚ü¶e‚üß #f)
             =>
             (Œª ([xs‚ÇÄ : (‚Ñò Symbol)])
               (unless (equal? xs‚ÇÄ xs)
                 (error 'set-bound-vars! "inconsistent for ~a: ~a and ~a"
                        (show-‚ü¶e‚üß ‚ü¶e‚üß) (set->list xs‚ÇÄ) (set->list xs))))]
            [else
             (hash-set! bvs ‚ü¶e‚üß xs)])))
  
  )
