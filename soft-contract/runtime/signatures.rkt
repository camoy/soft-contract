#lang typed/racket/base

(provide (all-defined-out))

(require racket/match
         racket/set
         syntax/parse/define
         typed/racket/unit
         bnf
         unreachable
         intern
         set-extras
         "../utils/bijection.rkt"
         "../ast/signatures.rkt"
         )

;; A configuration (state sans store) consists of the continuation frames and mark.
(#|Configurations  |# Œû . ::= . (Œû:co [frames : K] [mark : (Option (Pairof Ctx M))])
                                Blm)
;; A continuation (K) consists of frames (F) and an address (Œ±‚Çñ) to the rest of the continuation
;; The continuation address (Œ±‚Çñ) stores allocation context (H), path set (Œ¶^), as well as
;; tags (Œ≤‚Çñ) marking the type of current context (e.g. function body, contract monitoring, havoc, etc.)
(#|Local kont.     |# K . ::= . (K [init : (Listof F)] [rest : Œ±‚Çñ]))
(#|Stack address   |# Œ±‚Çñ . ::= . (Œ±‚Çñ [ctx : H] [path : Œ¶^] [ext : Œ≤‚Çñ]))
(#|Instrumentation |# -H . ::= . #:TBD)
(#|Stack addr. ext.|# Œ≤‚Çñ . ::= . (Œ≤‚Çñ:exp ‚ü¶E‚üß Œ°)
                                 (Œ≤‚Çñ:app Symbol W)
                                 (Œ≤‚Çñ:mon Ctx Œ±)
                                 (Œ≤‚Çñ:fc ‚Ñì Œ±)
                                 (Œ≤‚Çñ:hv HV-Tag)
                                 (Œ≤‚Çñ:term/c Œ± W))
;; A result (R) is a pair of value list (W) and set of paths (Œ¶) under which it was computed
(#|Result          |# R . ::= . (R W Œ¶^))
;; A path (Œ¶) consists of:
;; - A path condition (Œ®) remembering assumptions
;; - A path alias ($) tracking alias between symbolic values
;; A configuration (state sans store) consists of the continuation frames and mark.
(#|Path            |# Œ¶ . ::= . (Œ¶ [alias : $] [condition : Œ®]))
(#|Path alias      |# $ . ‚âú . (Immutable-HashTable Œ± S))
(#|Path condition  |# Œ® . ‚âú . (Immutable-HashTable (Listof S) (‚Ñò P)))
(#|Environment     |# Œ° . ‚âú . (Immutable-HashTable Symbol Œ±))
;; There are 3 stores:
;; - The value store (Œ£·µ•) mapping each address to a set of values
;; - The continuation store (Œ£‚Çñ) mapping each address to a set of (return) continuations
;; - The result store (Œ£‚Çê) mapping each continuation to a set of results on top of it
(struct Œ£ ([val : Œ£·µ•] [kon : Œ£‚Çñ] [evl : Œ£‚Çê]) #:transparent #:mutable)
#;(#|Store           |# Œ£  . ::= . (Œ£ [val : Œ£·µ•] [kon : Œ£‚Çñ] [evl : Œ£‚Çê]) #:mutable)
(#|Value store     |# Œ£·µ• . ‚âú . (Immutable-HashTable Œ± V^))
(#|Kont. store     |# Œ£‚Çñ . ‚âú . (Immutable-HashTable Œ±‚Çñ Rt^))
(#|Eval. store     |# Œ£‚Çê . ‚âú . (Immutable-HashTable Œû:co R^))
(#|Call history    |# M  . ‚âú . (Immutable-HashTable Clo SCG))
(#|Value list      |# W  . ‚âú . (Listof T^))
(#|Sym/Abs value   |# T  . ::= . S V)
(#|Sym/Abs value   |# T^ . ::= . S V^)
(#|Compiled expr   |# ‚ü¶E‚üß . ‚âú . (  Œ° Œ¶^ Œû:co Œ£ ‚Üí Œû))
(#|Application     |# ‚ü¶F‚üß . ‚âú . (W ‚Ñì Œ¶^ Œû:co Œ£ ‚Üí Œû))
(#|Kont. frame     |# F . ::= . #:TBD)
(#|Annotated stack |# Rt . ::= . (Rt Œ¶^ (‚Ñò Œ±) Œû:co))
;; Approximated versions of things
(Œ¶^ . ‚âú . (‚Ñò Œ¶))
(V^ . ‚âú . (‚Ñò V))
(R^ . ‚âú . (‚Ñò R))
(Œû:co^ . ‚âú . (‚Ñò Œû:co))
(Rt^ . ‚âú .  (‚Ñò Rt))
(W^ . ‚âú . (‚Ñò W))
(‚ü¶F‚üß^ . ‚âú . (W ‚Ñì Œ¶^ Œû:co Œ£ ‚Üí (‚Ñò Œû)))
(?R . ‚âú . (Option R))
(#|Size-change Graph|# SCG . ‚âú . (Immutable-HashTable (Pairof Integer Integer) Ch))
(Ch . ::= . '‚Üì '‚Üß)

(#|Value|# V . ::= . (-‚óè (‚Ñò P))
                     -prim
                     (St -ùíæ (Listof Œ±))
                     (Vect (Listof Œ±))
                     (Vect^ [content : Œ±] [length : V^])
                     (Hash^ [key : Œ±] [val : Œ±] [immut? : Boolean])
                     (Set^ [elems : Œ±] [bimmut? : Boolean])
                     Fn
                     (X/G [ctx : Ctx] [guard : Prox/C] [val : Œ±])
                     (Sealed Œ±)
                     C
                     P #|hack in prim DSL|#) 
(#|Symbolic value|# S . ::= . -b -o (S:Œ± Œ±) (S:@ S (Listof S)))
(#|Predicates|# P . ::= . -o (P:‚â§ Real) (P:< Real) (P:‚â• Real) (P:> Real) (P:‚â° Base) (P:¬¨ P) (P:arity-includes Arity))

(#|Non-primitive function|# Fn . ::= . (Clo -formals ‚ü¶E‚üß Œ°)
                                       (Case-Clo (Listof Clo)))

(#|Contract|# C . ::= . (And/C [flat? : Boolean] Œ±‚Ñì Œ±‚Ñì)
                        (Or/C [flat? : Boolean] Œ±‚Ñì Œ±‚Ñì)
                        (Not/C Œ±‚Ñì)
                        (One-Of/C (Listof Base))
                        (X/C Œ±)
                        Prox/C
                        (Seal/C Symbol H -l))
(#|Proxies|# Prox/C . ::= . Fn/C
                            (St/C [flat? : Boolean] -ùíæ (Listof Œ±‚Ñì))
                            (Vectof Œ±‚Ñì)
                            (Vect/C (Listof Œ±‚Ñì))
                            (Hash/C [key : Œ±‚Ñì] [val : Œ±‚Ñì])
                            (Set/C [elems : Œ±‚Ñì]))
(#|Func. contract|# Fn/C . ::= . (==> [doms : (-var Œ±‚Ñì)] [rng : (Option (Listof Œ±‚Ñì))])
                                 (==>i [doms : (Listof Dom)] [mk-rng : Dom])
                                 (‚àÄ/C (Listof Symbol) ‚ü¶E‚üß Œ°)
                                 (Case-=> (Listof ==>))
                                 'scv:terminating/c)

(#|Blame|# Blm . ::= . (Blm [violator : -l]
                            [site : ‚Ñì]
                            [origin : ‚Ñì]
                            [ctc : (Listof (U V P V^))]
                            [val : W]))
(#|Contract field access|# Œ±‚Ñì . ::= . (Œ±‚Ñì Œ± ‚Ñì))
(#|Named domain|# Dom . ::= . (Dom [name : Symbol] [ctc : (U Clo Œ±)] [src : ‚Ñì]))
(#|Compiled domain|# ‚ü¶dom‚üß . ::= . (‚ü¶dom‚üß [name : Symbol]
                                          [dependency : (Option (Listof Symbol))]
                                          [ctx : ‚ü¶E‚üß]
                                          [src : ‚Ñì]))
(#|Context tag for havoc|# HV-Tag . ‚âú . (Option -l))
(#|Monitor context|# Ctx . ::= . (Ctx [pos : -l] [neg : -l] [origin : ‚Ñì] [site : ‚Ñì]))
(Cardinality . ::= . 0 1 'N)
(Dec . ::= . '‚úì '‚úó)
(?Dec . ‚âú . (Option Dec))
(Ord . ::= . '< '> '=)
(?Ord . ‚âú . (Option Ord))
((?Cmp X) . ‚âú . (X X ‚Üí ?Ord))
((?Joiner X) . ‚âú . (X X ‚Üí (Option X)))

(define-interner Œ± -Œ±
  #:intern-function-name mk-Œ±
  #:unintern-function-name inspect-Œ±)
(define-interner H -H
  #:intern-function-name mk-H
  #:unintern-function-name inspect-H)

;; Convenient patterns
(define-syntax-rule (define-St-matcher (P Œ± ...) St-id)
  (define-match-expander P
    (syntax-rules () [(_ Œ± ...) (St (== St-id) (list Œ± ...))])
    (syntax-rules () [(_ Œ± ...) (St St-id (list Œ± ...))])))
(define-syntax-rule (define-St/G-matcher P St-id)
  (define-match-expander P
    (syntax-rules () [(_ Œ±) (X/G _ (St/C _ (== St-id) _) Œ±)])))
(define-St-matcher (Cons Œ±‚Çï Œ±‚Çú) -ùíæ-cons)
(define-St/G-matcher Cons/G -ùíæ-cons)
(define-St-matcher (Box Œ±) -ùíæ-box)
(define-St/G-matcher Box/G -ùíæ-box)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Some instantiations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(#|Value address   |# -Œ± . ::= . (-Œ±:top -ùíæ)
                                 (-Œ±:wrp -ùíæ)
  
                                 ; for binding
                                 (-Œ±:x Symbol H)
                                 ; for struct field
                                 (-Œ±:fld -ùíæ ‚Ñì H Index)
                                 ; for Cons/varargs
                                 ; idx prevents infinite list
                                 (-Œ±:var:car (U ‚Ñì Symbol) H (Option Natural))
                                 (-Œ±:var:cdr (U ‚Ñì Symbol) H (Option Natural))
  
                                 ;; for wrapped mutable struct
                                 (-Œ±:st -ùíæ Ctx H)
  
                                 ;; for vector indices
                                 (-Œ±:idx ‚Ñì H Natural)
  
                                 ;; for vector^ content
                                 (-Œ±:vct ‚Ñì H)
  
                                 ;; for hash^ content
                                 (-Œ±:hash:key ‚Ñì H)
                                 (-Œ±:hash:val ‚Ñì H)
  
                                 ;; for set^ content
                                 (-Œ±:set:elem ‚Ñì H)
  
                                 ;; for wrapped vector
                                 (-Œ±:unvct Ctx H)

                                 ;; for wrapped hash
                                 (-Œ±:unhsh Ctx H)

                                 ;; for wrapped set
                                 (-Œ±:unset Ctx H)

                                 ;; for contract components
                                 (-Œ±:and/c:l ‚Ñì H)
                                 (-Œ±:and/c:r ‚Ñì H)
                                 (-Œ±:or/c:l ‚Ñì H)
                                 (-Œ±:or/c:r ‚Ñì H)
                                 (-Œ±:not/c ‚Ñì H)
                                 (-Œ±:x/c Symbol H)
                                 (-Œ±:vect/c ‚Ñì H Natural)
                                 (-Œ±:vectof ‚Ñì H)
                                 (-Œ±:hash/c:key ‚Ñì H)
                                 (-Œ±:hash/c:val ‚Ñì H)
                                 (-Œ±:set/c:elem ‚Ñì H)
                                 (-Œ±:struct/c -ùíæ ‚Ñì H Natural)
                                 (-Œ±:dom ‚Ñì H Natural)
                                 (-Œ±:rst ‚Ñì H)
                                 (-Œ±:rng ‚Ñì H Natural)

                                 ;; for wrapped function
                                 (-Œ±:fn Ctx H Arity)

                                 ;; For values wrapped in seals
                                 (-Œ±:sealed Symbol H) ; points to wrapped objects

                                 ;; HACK
                                 (-Œ±:hv (U (Pairof -l H) #f))
                                 (-Œ±:mon-x/c Symbol H -l)
                                 (-Œ±:fc-x/c Symbol H)

                                 ;; Only use this in the prim DSL where all values are finite
                                 ;; with purely syntactic components
                                 (-Œ±:imm #|restricted|# V)
                                 ;; indirection for `listof` to keep in-sync with regular listof contracts
                                 (-Œ±:imm:listof     Symbol #|elem, ok with care|# V ‚Ñì)
                                 (-Œ±:imm:ref-listof Symbol #|elem, ok with care|# V ‚Ñì))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Simple helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

(: concat-ord : Ord ?Ord ‚Üí ?Ord)
(define (concat-ord o‚ÇÅ o‚ÇÇ)
  (case o‚ÇÇ
    [(>) (case o‚ÇÅ [(<) #f] [else '>])]
    [(<) (case o‚ÇÅ [(>) #f] [else '<])]
    [(=) o‚ÇÅ]
    [else #f]))

(define Œû:co-ctx : (Œû:co ‚Üí H) (compose1 Œ±‚Çñ-ctx (compose1 K-rest Œû:co-frames)))

(define-syntax Ord:*
  (syntax-rules ()
    [(_) '=]
    [(_ e) e]
    [(_ e‚ÇÅ e ...)
     (let ([o‚ÇÅ e‚ÇÅ])
       (and o‚ÇÅ (concat-ord o‚ÇÅ (Ord:* e ...))))]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Signatures
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-signature sto^
  ([‚ä•Œ£ : (‚Üí Œ£)]
   [‚ä•Œ£·µ• : Œ£·µ•]
   [‚ä•Œ£‚Çñ : Œ£‚Çñ]
   [‚ä•Œ£‚Çê : Œ£‚Çê]
   [Œ£·µ•@ : ((U Œ£ Œ£·µ•) Œ±  ‚Üí V^)] 
   [Œ£‚Çñ@ : ((U Œ£ Œ£‚Çñ) Œ±‚Çñ ‚Üí Rt^)]
   [Œ£‚Çê@ : ((U Œ£ Œ£‚Çê) Œû:co ‚Üí R^)]
   [Œ£·µ•@* : ((U Œ£ Œ£·µ•) (Listof Œ±) ‚Üí W)]
   ;; Old
   #;[alloc-rest-args : ([-Œ£ ‚Ñì -H -œÜ (Listof -V^)] [#:end -V] . ->* . (Values -V -œÜ))]
   #;[unalloc : (-œÉ -Œ¥œÉ -V ‚Üí (‚Ñò (Listof -V^)))]
   #;[unalloc-prefix : (-œÉ -Œ¥œÉ -V Natural ‚Üí (‚Ñò (Pairof (Listof -V^) -V)))]
   #;[cardinality : (-œÉ -Œ¥œÉ ‚ü™Œ±‚ü´ ‚Üí Cardinality)]
   ))

(define-signature env^
  ([‚ä•Œ° : Œ°]
   [Œ°@ : (Œ° Symbol ‚Üí Œ±)]
   [Œ°@* : (Œ° (Listof Symbol) ‚Üí (Listof Œ±))]
   [Œ°+ : (Œ° Symbol Œ± ‚Üí Œ°)]
   [-x-dummy : Symbol]))

(define-signature val^
  (#;[fresh-sym! : (‚Üí -s)]
   [C-flat? : (V ‚Üí Boolean)]
   [C^-flat? : (T^ ‚Üí Boolean)]
   [with-negative-party : (-l V ‚Üí V)]
   [with-positive-party : (-l V ‚Üí V)]
   [behavioral? : ((U Œ£ Œ£·µ•) V ‚Üí Boolean)]
   [guard-arity : (case->
                   [==> ‚Üí Arity]
                   [Fn/C ‚Üí (Option Arity)])]
   [blm-arity : (-l ‚Ñì ‚Ñì Arity W ‚Üí Blm)]
   [K+ : (F Œû:co ‚Üí Œû:co)]
   [in-scope? : ((U Œ± S) (‚Ñò Œ±) ‚Üí Boolean)]
   [cmp-sets : (?Cmp (‚Ñò Any))]
   [set-lift-cmp : (‚àÄ (X) (?Cmp X) ‚Üí (?Cmp (‚Ñò X)))]
   [fold-cmp : (‚àÄ (X) (?Cmp X) (Listof X) (Listof X) ‚Üí ?Ord)]
   [join-by-max : (‚àÄ (X) (?Cmp X) ‚Üí (?Joiner X))]
   [compact-with : (‚àÄ (X) (?Joiner X) ‚Üí (‚Ñò X) X ‚Üí (‚Ñò X))]
   [iter-‚äî : (‚àÄ (X) ((‚Ñò X) X ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X) (‚Ñò X) ‚Üí (‚Ñò X))]
   [Ctx-flip : (Ctx ‚Üí Ctx)]
   [Ctx-with-site : (Ctx ‚Ñì ‚Üí Ctx)]
   [Ctx-with-origin : (Ctx ‚Ñì ‚Üí Ctx)]
   [X/C->binder : (X/C ‚Üí Symbol)]
   [estimate-list-lengths : ((U Œ£ Œ£·µ•) V ‚Üí (‚Ñò (U #f Arity)))]
   ))

(define-signature evl^
  ([‚ä§Œ® : Œ®]
   [‚ä§Œ¶ : Œ¶]
   [‚ä•Œ¶^ : Œ¶^]
   [Œ®@ : ((U Œ¶^ Œ¶ Œ®) (Listof T) ‚Üí (‚Ñò P))]
   [$@* : (Œ¶^ Œ± ‚Üí R^)] 
   [$+ : (case-> [Œ¶ Œ± S ‚Üí Œ¶]
                 [Œ¶^ Œ± S ‚Üí Œ¶^])]
   [T->R : ((U T T^) Œ¶^ ‚Üí R)]
   [filter/arity : (R^ Natural ‚Üí (Values R^ W^))]
   [collapse-R^ : (R^ ‚Üí (Values W^ Œ¶^))]
   [collapse-R^/Œ¶^ : (R^ ‚Üí Œ¶^)]
   [collapse-R^/W^ : (R^ ‚Üí W^)]
   [with-2-paths/collapse : (‚àÄ (X) (‚Üí (Values R^ R^)) (Œ¶^ ‚Üí (‚Ñò X)) (Œ¶^ ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X))]
   [with-3-paths/collapse : (‚àÄ (X) (‚Üí (Values R^ R^ R^)) (Œ¶^ ‚Üí (‚Ñò X)) (Œ¶^ ‚Üí (‚Ñò X)) (Œ¶^ ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X))]
   [with-2-paths : (‚àÄ (X) (‚Üí (Values R^ R^)) (R^ ‚Üí (‚Ñò X)) (R^ ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X))]
   [with-3-paths : (‚àÄ (X) (‚Üí (Values R^ R^ R^)) (R^ ‚Üí (‚Ñò X)) (R^ ‚Üí (‚Ñò X)) (R^ ‚Üí (‚Ñò X)) ‚Üí (‚Ñò X))] 
   [cmp-T^/$ : ((Option (‚Ñò $)) (Option (‚Ñò $)) ‚Üí (?Cmp T^))]
   [R^‚äî : (R^ R ‚Üí R^)]
   [Œ¶^‚äî : (Œ¶^ Œ¶ ‚Üí Œ¶^)]
   [Œ®‚Üì : (Œ® (‚Ñò Œ±) ‚Üí Œ®)]
   [$‚Üì : ($ (‚Ñò Œ±) ‚Üí $)]))

(define-signature pretty-print^
  ([show-Œ± : (Œ± ‚Üí Sexp)]
   [show-blm-reason : ((U V P V^) ‚Üí Sexp)]
   [show-T : ((U T T^) ‚Üí Sexp)])) 
