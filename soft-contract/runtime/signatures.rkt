#lang typed/racket/base

(provide (all-defined-out))

(require racket/match
         racket/set
         syntax/parse/define
         typed/racket/unit
         bnf
         unreachable
         intern
         set-extras
         "../utils/bijection.rkt"
         "../ast/signatures.rkt"
         )

(#|State sans store|# Œû . ::= . (Œû K H))
(#|Continuation    |# K . ::= . #:TBD)
(#|Instrumentation |# -H . ::= . #:TBD)
(#|Stack address   |# Œ±‚Çñ . ::= . (Œ±‚Çñ ‚ü¶E‚üß Œ°))
(#|Value address   |# -Œ± . ::= . #:TBD)
(#|Compiled expr   |# ‚ü¶E‚üß . ‚âú . (Œ° Œ¶^ K H ‚Üí Œû))
(#|Result          |# R . ::= . (R A Œ¶))
(#|Answer          |# A . ::= . Blm [#:reuse (Listof V^)]) 
(#|Path-condition  |# Œ¶ . ::= . [#:reuse (‚Ñò S)])
(#|Environment     |# Œ°  . ‚âú . (Immutable-HashTable Symbol Œ±))
(#|Store           |# Œ£  . ::= . (Œ£ [val : Œ£·µ•] [kon : Œ£‚Çñ] [evl : Œ£‚Çê]))
(#|Value store     |# Œ£·µ• . ‚âú . (Immutable-HashTable Œ± V^))
(#|Kont. store     |# Œ£‚Çñ . ‚âú . (Immutable-HashTable Œ±‚Çñ K^))
(#|Eval. store     |# Œ£‚Çê . ‚âú . (Immutable-HashTable K R^))
;; Approximated versions of things
(#|Path-condition^ |# Œ¶^ . ::= . [#:reuse (‚Ñò Œ¶)])
(#|Value^          |# V^ . ::= . [#:reuse (‚Ñò V)])
(#|Result^         |# R^ . ::= . [#:reuse (‚Ñò R)])
(#|Kontinuation^   |# K^ . ::= . [#:reuse (‚Ñò K)])

(#|Value|# V . ::= . (-‚óè (‚Ñò P))
                     -prim
                     (St -ùíæ (Listof Œ±))
                     (Vect (Listof Œ±))
                     (Vect^ [content : Œ±] [length : V^])
                     (Hash^ [key : Œ±] [val : Œ±] [immut? : Boolean])
                     (Set^ [elems : Œ±] [immut? : Boolean])
                     Fn
                     X/G
                     (Sealed Œ±))
(#|Guarded value|# struct X/G ([ctx : Ctx] [guard : Prox/C] [val : Œ±]) #:transparent)
(#|Proxies|# Prox/C . ::= . Fn/C St/C Vect/C Hash/C Set/C)
(#|Symbolic value|# S . ::= . (S:Œ± Œ±) (S:@ -o (Listof S)))
(#|Predicates|# P . ::= . #:TBD)

(#|Non-primitive function|# Fn . ::= . (Clo -formals ‚ü¶E‚üß Œ°)
                                       (Case-Clo (Listof Clo))
                                       (Fn:‚óè Arity HV-Tag))

(#|Contract|# C . ::= . (And/C [flat? : Boolean] Œ±‚Ñì Œ±‚Ñì)
                        (Or/C [flat? : Boolean] Œ±‚Ñì Œ±‚Ñì)
                        (Not/C Œ±‚Ñì)
                        (One-Of/C (Listof Base))
                        (X/C Œ±)
                        Fn/C
                        (St/C [flat? : Boolean] -ùíæ (Listof Œ±‚Ñì))
                        (Vectof Œ±‚Ñì)
                        (Vect/C (Listof Œ±‚Ñì))
                        (Hash/C [key : Œ±‚Ñì] [val : Œ±‚Ñì])
                        (Set/C [elems : Œ±‚Ñì])
                        (Seal/C Symbol H -l))

(#|Func. contract|# Fn/C . ::= . (==> [doms : (-maybe-var Œ±‚Ñì)] [rng : (Option (Listof Œ±‚Ñì))])
                                 (==>i [doms : (Listof Dom)] [mk-rng : Dom])
                                 (‚àÄ/C (Listof Symbol) ‚ü¶E‚üß Œ°)
                                 (Case=> (Listof Fn/C)))

(#|Strict -> |# struct ==>/‚áì  ==> () #:transparent)
(#|Strict ->i|# struct ==>i/‚áì ==> () #:transparent)
(#|Blame|# Blm . ::= . (Blm [violator : ‚Ñì]
                            [origin : -l]
                            [ctc : (Listof (U V P V^))]
                            [val : (Listof V^)]))
(#|Contract field access|# Œ±‚Ñì . ::= . (Œ±‚Ñì Œ± ‚Ñì))
(#|Named domain|# Dom . ::= . (Dom [name : Symbol] [ctc : (U Clo Œ±)] [src : ‚Ñì]))
(#|Compiled domain|# ‚ü¶dom‚üß . ::= . (‚ü¶dom‚üß [name : Symbol]
                                          [dependency : (Option (Listof Symbol))]
                                          [ctx : ‚ü¶E‚üß]
                                          [src : ‚Ñì]))
(#|Context tag for havoc|# HV-Tag . ::= . '‚Ä† [#:reuse (Pairof -l H)])
(#|Monitor context|# Ctx . ::= . (Ctx [pos : -l] [neg : -l] [src : -l] [loc : ‚Ñì]))
(Cardinality . ::= . 0 1 'N)
(Valid . ::= . '‚úì '‚úó '?)

(define-interner Œ± -Œ±
  #:intern-function-name mk-Œ±
  #:unintern-function-name inspect-Œ±)
(define-interner H -H
  #:intern-function-name mk-H
  #:unintern-function-name inspect-H)

;; Convenient patterns
(define-syntax-rule (define-St-matcher (P Œ± ...) St-id)
  (define-match-expander P
    (syntax-rules () [(_ Œ± ...) (St (== St-id) (list Œ± ...))])
    (syntax-rules () [(_ Œ± ...) (St St-id (list Œ± ...))])))
(define-syntax-rule (define-St/G-matcher P St-id)
  (define-match-expander P
    (syntax-rules () [(_ Œ±) (St/G (St/C _ (== St-id) _) Œ± _)])))
(define-St-matcher (Cons Œ±‚Çï Œ±‚Çú) -ùíæ-cons)
(define-St/G-matcher Cons/G -ùíæ-cons)
(define-St-matcher (Box Œ±) -ùíæ-box)
(define-St/G-matcher Box/G -ùíæ-box)
(define-syntax-rule (Blm/simp ‚Ñì+ lo C V) (Blm (strip-‚Ñì ‚Ñì) lo C V))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Simple helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define Ctx-flip : (Ctx ‚Üí Ctx)
  (match-lambda
    [(Ctx l+ l- lo ‚Ñì) (Ctx l- l+ lo ‚Ñì)]))
(define Ctx-with-‚Ñì : (Ctx ‚Ñì ‚Üí Ctx)
  (match-lambda**
    [((Ctx l+ l- lo _) ‚Ñì) (Ctx l+ l- lo ‚Ñì)]))

