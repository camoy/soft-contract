#lang typed/racket/base

(provide prover@)

(require (for-syntax racket/base
                     racket/syntax
                     syntax/parse)
         racket/match
         (except-in racket/set for/set for*/set for/seteq for*/seteq)
         racket/string
         racket/list
         racket/bool
         racket/vector
         racket/splicing
         typed/racket/unit
         syntax/parse/define
         set-extras
         unreachable
         typed-racket-hacks
         "../utils/main.rkt"
         "../ast/signatures.rkt"
         "../signatures.rkt"
         "signatures.rkt"
         )

(define-type S (U T -b))

(define-unit prover@
  (import static-info^ meta-functions^
          sto^ val^
          prims^)
  (export prover^)

  (: sat : Œ£ V V^ * ‚Üí ?Dec)
  (define (sat Œ£ P . Vs)
    (match Vs
      [(list V) (sat^‚ÇÅ (Œª (V) (sat‚ÇÅ Œ£ P V)) V)]
      [(list V‚ÇÅ V‚ÇÇ) (sat^‚ÇÇ (Œª (V‚ÇÅ V‚ÇÇ) (sat‚ÇÇ Œ£ P V‚ÇÅ V‚ÇÇ)) V‚ÇÅ V‚ÇÇ)]
      [_ #f]))

  (: Œì-sat? : Œì ‚Üí Boolean)
  ;; Check if envronment/path-condition is satisfiable.
  ;; - `#f` means "definitely unsat"
  ;; - `#f` means "maybe sat"
  (define (Œì-sat? Œì)
    (define-values (eqs diseqs) (Œì->eqs/diseqs Œì))
    (sat/extra? eqs diseqs))

  (: maybe=? : Œ£ Integer V^ ‚Üí Boolean)
  ;; Check if value `V` can possibly be integer `i`
  (define (maybe=? Œ£ i Vs)
    (set-ormap (Œª ([V : V]) (and (memq (sat‚ÇÇ Œ£ 'equal? (-b i) V) '(‚úì #f)) #t)) Vs))

  (: check-plaus : Œ£ V W ‚Üí (Values (Option (Pairof W ŒîŒ£)) (Option (Pairof W ŒîŒ£))))
  (define (check-plaus Œ£ P W)
    (match W
      [(list V    ) (collect‚ÇÅ Œ£ P V)]
      [(list V‚ÇÅ V‚ÇÇ) (collect‚ÇÇ Œ£ P V‚ÇÅ V‚ÇÇ)]
      [_ (let ([r (cons W ‚ä•ŒîŒ£)])
           (values r r))]))

  (: reify : (‚Ñò P) ‚Üí V^)
  (define (reify Ps)
    (cond [(set-ormap ?concretize Ps) => values]
          [(‚àã Ps (P:¬¨ 'values)) {set -ff}]
          [(and (‚àã Ps 'values) (‚àã Ps 'boolean?)) {set -tt}]
          [else {set (-‚óè (set-filter P? Ps))}]))
  
  (: ?concretize : P ‚Üí (Option V^))
  (define ?concretize
    (match-lambda
      ['null? {set -null}]
      ['not {set -ff}]
      ['set-empty? {set (Empty-Set)}]
      ['hash-empty? {set (Empty-Hash)}]
      ['void? {set -void}]
      ;[(-st-p ùíæ) #:when (zero? (count-struct-fields ùíæ)) {set (St ùíæ '() ‚àÖ)}]
      [(P:‚â° b) {set (-b b)}]
      [_ #f]))

  (: refine : V^ (U V (‚Ñò P)) Œ£ ‚Üí (Values V^ ŒîŒ£))
  (define (refine Vs P* Œ£)
    (if (set? P*)
        ;; refine by conjunction of predicates
        (for*/fold ([Vs : V^ Vs] [ŒîŒ£ : ŒîŒ£ ‚ä•ŒîŒ£]) ([P (in-set P*)])
          (define-values (Vs* ŒîŒ£*) (refine Vs P Œ£))
          (values Vs* (‚ß∫ ŒîŒ£ ŒîŒ£*)))
        (let-values ([(acc ŒîŒ£*)
                      (for*/fold ([acc : V^ ‚àÖ] [ŒîŒ£ : (Option ŒîŒ£) #f])
                                 ([V (in-set Vs)]
                                  [P (if (Œ±? P*) (in-set (unpack P* Œ£)) (in-value P*))])
                        (case (sat‚ÇÅ Œ£ P V)
                          [(‚úì) (values (set-add acc V) (?ŒîŒ£‚äî ŒîŒ£ ‚ä•ŒîŒ£))]
                          [(‚úó) (values acc (?ŒîŒ£‚äî ŒîŒ£ ‚ä•ŒîŒ£))]
                          [else (define-values (V* ŒîŒ£*) (refine‚ÇÅ V P Œ£))
                                (values (‚à™ acc V*) (?ŒîŒ£‚äî ŒîŒ£ ŒîŒ£*))]))])
          (values acc (assert ŒîŒ£*)))))

  (: refine-not : V^ V Œ£ ‚Üí (Values V^ ŒîŒ£))
  (define (refine-not Vs P Œ£)
    (define-values (acc ŒîŒ£*)
      (for*/fold ([acc : V^ ‚àÖ] [ŒîŒ£ : (Option ŒîŒ£) #f])
                 ([V (in-set Vs)]
                  [P (if (Œ±? P) (in-set (unpack P Œ£)) (in-value P))])
        (case (sat‚ÇÅ Œ£ P V)
          [(‚úì) (values acc (?ŒîŒ£‚äî ŒîŒ£ ‚ä•ŒîŒ£))]
          [(‚úó) (values (set-add acc V) (?ŒîŒ£‚äî ŒîŒ£ ‚ä•ŒîŒ£))]
          [else (define-values (V* ŒîŒ£*) (refine-not‚ÇÅ V P Œ£))
                (values (‚à™ acc V*) (?ŒîŒ£‚äî ŒîŒ£ ŒîŒ£*))])))
    (values acc (assert ŒîŒ£*)))

  (: refine‚ÇÅ : V V Œ£ ‚Üí (Values V^ ŒîŒ£))
  (define (refine‚ÇÅ V P Œ£)
    (match V
      [(or (? -‚óè?) (? St?)) (values (refine-V V P Œ£) ‚ä•ŒîŒ£)]
      [(? T? T) (values {set T} (refine-T T P Œ£))]
      [_ (values {set V} ‚ä•ŒîŒ£)]))

  (: refine-T : T V Œ£ ‚Üí ŒîŒ£)
  (define (refine-T T‚ÇÄ P‚ÇÄ Œ£)
    (match-define (cons Œû Œì) Œ£)
    (if (P? P‚ÇÄ)
        (let go ([T : T T‚ÇÄ] [P : P P‚ÇÄ])
          (match T
            [(T:@ (? -st-ac? ac) (list T*)) (go (assert T* T?) (P:St ac P))]
            [_ (cons ‚ä•Œû (hash T (refine-V^ (unpack T Œ£) P Œ£)))]))
        ‚ä•ŒîŒ£))

  (: refine-not‚ÇÅ : V V Œ£ ‚Üí (Values V^ ŒîŒ£))
  (define (refine-not‚ÇÅ V P Œ£)
    (define (default) (values {set V} ‚ä•ŒîŒ£))
    (cond [(not (P? P)) (default)]
          [(?negate P) => (Œª (P*) (refine‚ÇÅ V P* Œ£))]
          [else (default)]))

  (define ?negate : (P ‚Üí (Option P))
    (match-lambda
      [(P:¬¨ Q) Q]
      [(P:St ac P) (match (?negate P)
                     [(? values P*) (P:St ac P*)]
                     [_ #f])]
      [(? Q? Q) (P:¬¨ Q)]
      [_ #f]))

  (: refine‚ÇÇ : V V V Œ£ ‚Üí (Values V^ V^ ŒîŒ£))
  (define (refine‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£)
    (match P
      ['<  (refine-both real? (K:‚â§) -ff V‚ÇÇ P:> V‚ÇÅ P:< Œ£)] ; V‚ÇÅ < V‚ÇÇ ‚áî ¬¨ (V‚ÇÅ ‚â• V‚ÇÇ) ‚áî ¬¨ (V‚ÇÇ ‚â§ V‚ÇÅ)
      ['<= (refine-both real? (K:‚â§) -tt V‚ÇÅ P:‚â§ V‚ÇÇ P:‚â• Œ£)]
      ['>  (refine-both real? (K:‚â§) -ff V‚ÇÅ P:> V‚ÇÇ P:< Œ£)] ; V‚ÇÅ > V‚ÇÇ ‚áî ¬¨ (V‚ÇÅ ‚â§ V‚ÇÇ)
      ['>= (refine-both real? (K:‚â§) -tt V‚ÇÇ P:‚â§ V‚ÇÅ P:‚â• Œ£)]
      ['=  (refine-both number? (K:=) -tt V‚ÇÅ P:= V‚ÇÇ P:= Œ£)]
      [(or 'equal? 'eq? 'eqv? 'char=? 'string=?)
       (refine-both base? (K:‚â°) -tt V‚ÇÅ P:‚â° V‚ÇÇ P:‚â° Œ£)]
      [_ (values {set V‚ÇÅ} {set V‚ÇÇ} ‚ä•ŒîŒ£)]))

  (: refine-not‚ÇÇ : V V V Œ£ ‚Üí (Values V^ V^ ŒîŒ£))
  (define (refine-not‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£)
    (define (refine [P* : Q]) (refine‚ÇÇ V‚ÇÅ V‚ÇÇ P* Œ£))
    (match P
      ['<  (refine '>=)]
      ['<= (refine '>)]
      ['>  (refine '<=)]
      ['>= (refine '<)]
      ['=
       (refine-both number? (K:=) -ff V‚ÇÅ (compose P:¬¨ P:=) V‚ÇÇ (compose P:¬¨ P:=) Œ£)]
      [(or 'equal? 'eq? 'eqv? 'char=? 'string=?)
       (refine-both base? (K:‚â°) -ff V‚ÇÅ (compose P:¬¨ P:‚â°) V‚ÇÇ (compose P:¬¨ P:‚â°) Œ£)]
      [_ (values {set V‚ÇÅ} {set V‚ÇÇ} ‚ä•ŒîŒ£)]))

  (: refine-V^ : V^ (U V V^) Œ£ ‚Üí V^)
  (define (refine-V^ Vs P* Œ£)
    (define (go [P : V] [Vs : V^])
      (for/fold ([acc : V^ ‚àÖ]) ([V (in-set Vs)])
        (case (sat‚ÇÅ Œ£ P V)
          [(‚úì) (set-add acc V)]
          [(‚úó) acc]
          [else (‚à™ acc (refine-V V P Œ£))])))
    (if (set? P*) (set-fold go Vs P*) (go P* Vs)))

  (: refine-V : V V Œ£ ‚Üí V^)
  (define (refine-V V P Œ£)
    (match V
      [(-‚óè Ps)
       ;; TODO reduce hack. This comes from `one-of/c` not recognized as a refinement
       (match P
         [(One-Of/C bs) (refine-V^ (map/set -b bs) Ps Œ£)]
         [_ (reify (refine-Ps Ps P))])]
      [(St Œ± Ps) {set (St Œ± (refine-Ps Ps P))}]
      [_ {set V}]))

  (: refine-Ps : (‚Ñò P) V ‚Üí (‚Ñò P))
  ;; Strengthen refinement set with new predicate
  (define (refine-Ps Ps‚ÇÄ P‚ÇÄ)
    ;; Combine 2 predicates for a more precise one.
    ;; Return `#f` if there's no single predicate that refines both
    (define P+ : (P P ‚Üí (Option (Listof P)))
      (match-lambda**/symmetry
       [(P Q) #:when (equal? '‚úì (P‚ä¢P P Q)) (list P)]
       [((or 'exact-integer? 'exact-nonnegative-integer?)
         (P:‚â• (and (? (between/c 0 1)) (not 0))))
        (list 'exact-positive-integer?)]
       [((or 'exact-integer? 'exact-nonnegative-integer?)
         (P:> (and (? (between/c 0 1)) (not 1))))
        (list 'exact-positive-integer?)]
       [('exact-integer? (P:‚â• (and (? (between/c -1 0)) (not -1))))
        (list 'exact-nonnegative-integer?)]
       [('exact-integer? (P:> (and (? (between/c -1 0)) (not 0))))
        (list 'exact-nonnegative-integer?)]
       [((or 'exact-integer? 'exact-nonnegative-integer?) 'zero?)
        (list (P:‚â° 0))]
       [('exact-nonnegative-integer? (or (P:¬¨ (or 'zero? (P:= 0) (P:‚â§ 0)))
                                         (P:> 0)))
        (list 'exact-positive-integer?)]
       [('list? (P:¬¨ 'null?)) (list 'list? -cons?)]
       [('list? (P:¬¨ -cons?)) (list 'null?)]
       [((and P (or (? P:>?) (? P:‚â•?) (? P:<?) (? P:‚â§?))) 'number?)
        (list P 'real?)]
       #:else
       [(P‚ÇÄ Q‚ÇÄ)
        (match* (P‚ÇÄ Q‚ÇÄ)
          [((P:St ac P*) (P:St ac Q*))
           (match (P+ P* Q*)
             [(? values Ps) (map (Œª ([P : P]) (P:St ac P)) Ps)]
             [_ #f])]
          [(_ _) #f])]))
    (if (P? P‚ÇÄ) (merge/compact P+ P‚ÇÄ Ps‚ÇÄ) Ps‚ÇÄ))

  (: sat‚ÇÅ : Œ£ V V ‚Üí ?Dec)
  (define (sat‚ÇÅ Œ£ P V‚ÇÄ)
    (match V‚ÇÄ
      [(-‚óè Ps) (Ps‚ä¢P Ps P)]
      [(? Œ±? Œ±) (sat^‚ÇÅ (Œª (V) (sat‚ÇÅ Œ£ P V)) (unpack Œ± Œ£))]
      [(and T (T:@ k _)) (or (and (symbol? k) (P‚ä¢P (get-conservative-range k) P))
                             (sat^‚ÇÅ (Œª (V) (sat‚ÇÅ Œ£ P V)) (unpack T Œ£)))]
      [_ (match P
           [(-st-p ùíæ)
            (match V‚ÇÄ
              [(or (St (Œ±:dyn (Œ≤:st-elems _ ùíæ*) _) _)
                   (Guarded _ (? St/C? (app St/C-tag ùíæ*)) _))
               (bool->Dec (and ùíæ* (ùíæ* . substruct? . ùíæ)))]
              [_ '‚úó])]
           [(One-Of/C bs) (bool->Dec (and (-b? V‚ÇÄ) (‚àã bs (-b-unboxed V‚ÇÄ))))]
           [(P:St (-st-ac ùíæ i) P*)
            (match V‚ÇÄ
              [(St Œ± Ps)
               (or (Ps‚ä¢P Ps P)
                   (sat^‚ÇÅ (Œª (V·µ¢) (sat‚ÇÅ Œ£ P* V·µ¢)) (vector-ref (Œ£@/blob Œ± Œ£) i)))]
              [(? -‚óè?) !!!]
              [_ '‚úó])]
           [(P:¬¨ Q) (neg (sat‚ÇÅ Œ£ Q V‚ÇÄ))]
           [(P:‚â• b) (sat‚ÇÇ Œ£ '>= V‚ÇÄ (-b b))]
           [(P:> b) (sat‚ÇÇ Œ£ '>  V‚ÇÄ (-b b))]
           [(P:‚â§ b) (sat‚ÇÇ Œ£ '<= V‚ÇÄ (-b b))]
           [(P:< b) (sat‚ÇÇ Œ£ '<  V‚ÇÄ (-b b))]
           [(P:= b) (sat‚ÇÇ Œ£ '=  V‚ÇÄ (-b b))]
           [(P:‚â° b) (sat‚ÇÇ Œ£ 'equal? V‚ÇÄ (-b b))]
           [(P:arity-includes a)
            (match (arity V‚ÇÄ)
              [(? values V‚ÇÄ:a) (bool->Dec (arity-includes? V‚ÇÄ:a a))]
              [#f '‚úó])]
           [(P:vec-len n)
            (match V‚ÇÄ
              [(Vect (Œ±:dyn (Œ≤:vect-elems _ m) _)) (bool->Dec (= n m))]
              [(Vect-Of _ V‚Çô) (sat^‚ÇÇ (Œª (V‚ÇÅ V‚ÇÇ) (sat‚ÇÇ Œ£ '= V‚ÇÅ V‚ÇÇ)) {set (-b n)} V‚Çô)]
              [(Guarded _ G _)
               (match G
                 [(? Vect/C?) (define-values (_‚ÇÅ _‚ÇÇ m) (Vect/C-fields G))
                              (bool->Dec (= n m))]
                 [(Vectof/C _ _) #f]
                 [_ '‚úó])]
              [_ '‚úó])]
           [(? symbol?)
            (define-simple-macro (with-base-predicates ([g:id ... o?] ...)
                                   c ...)
              (case P
                [(o?) (bool->Dec (and (-b? V‚ÇÄ) (let ([V* (-b-unboxed V‚ÇÄ)])
                                                 (and (g V*) ... (o? V*)))))]
                ...
                c ...))
            (: check-among : (V ‚Üí Boolean) * ‚Üí ?Dec)
            (define (check-among . ps)
              (or (for/or : (Option '‚úì) ([p (in-list ps)] #:when (p V‚ÇÄ)) '‚úì) '‚úó))
            (: with-guard : (V ‚Üí Boolean) * ‚Üí (V ‚Üí Boolean))
            (define (with-guard . ps)
              (match-lambda [(Guarded _ G _)
                             (for/or : Boolean ([p? (in-list ps)]) (p? G))]
                            [_ #f]))
            (: proper-flat-contract? : V ‚Üí Boolean)
            (define proper-flat-contract?
              (match-lambda
                [(-st-mk ùíæ) (= 1 (count-struct-fields ùíæ))]
                [(or (? -st-p?) (? -st-ac?)) #t]
                [(? symbol? o) (arity-includes? (prim-arity o) 1)]
                [(? Not/C?) #t]
                [(? One-Of/C?) #t]
                [(and C (or (? And/C?) (? Or/C?) (? St/C?))) (C-flat? C Œ£)]
                [(Clo xs _ _) (arity-includes? (shape xs) 1)]
                [(-Œª xs _ _) (arity-includes? (shape xs) 1)]
                [(Case-Clo clos _) (ormap proper-flat-contract? clos)]
                [(Guarded _ (? Fn/C? C) _) (arity-includes? (guard-arity C) 1)]
                [_ #f]))
            ;; Order matters. More specific ones come first.
            (with-base-predicates ([not]
                                   [byte?]
                                   [fixnum?]
                                   [exact-positive-integer?]
                                   [exact-nonnegative-integer?]
                                   [exact-integer? even?]
                                   [exact-integer? odd?]
                                   [exact-integer?]
                                   [real? positive?]
                                   [real? negative?]
                                   [number? zero?]
                                   [number? exact?]
                                   [number? inexact?]
                                   [integer?]
                                   [inexact-real?]
                                   [real?]
                                   [number?]
                                   [null?]
                                   [boolean?]
                                   [non-empty-string?]
                                   [path-string?]
                                   [string?]
                                   [char?]
                                   [symbol?]
                                   [void?]
                                   [eof-object?]
                                   [regexp?]
                                   [pregexp?]
                                   [byte-regexp?]
                                   [byte-pregexp?])
              ;; Manual cases
              [(values) (bool->Dec (or (not (-b? V‚ÇÄ)) (not (not (-b-unboxed V‚ÇÄ)))))]
              [(procedure?) ; FIXME make sure `and/c` and friends are flat
               (check-among -o? Fn? (with-guard Fn/C?) proper-flat-contract?)]
              [(vector?)
               (check-among Vect? Vect-Of? (with-guard Vect/C? Vectof/C?))]
              [(hash-empty?)
               (match V‚ÇÄ
                 [(Empty-Hash) '‚úì]
                 [(Guarded _ (? Hash/C?) _) #f]
                 [_ '‚úó])]
              [(hash?) (check-among Empty-Hash? Hash-Of? (with-guard Hash/C?))]
              [(set? generic-set?) (check-among Empty-Set? Set-Of? (with-guard Set/C?))]
              [(set-empty?)
               (match V‚ÇÄ
                 [(Empty-Set) '‚úì]
                 [(Guarded _ (? Set/C?) _) #f]
                 [_ '‚úó])]
              [(contract?)
               (check-among Fn/C? And/C? Or/C? Not/C? X/C?
                            Vectof/C? Vect/C? St/C? Hash/C? Set/C? proper-flat-contract?
                            ‚àÄ/C? Seal/C? -b?)]
              [(flat-contract?) (check-among -b? proper-flat-contract?)]
              ;; Take more conservative view of sealed value than standard Racket.
              ;; `sealed` is the lack of type information.
              ;; Can't assume a sealed value is `any/c`,
              ;; even when it's the top of the only type hierarchy there is.
              ;; This prevents sealed values from being inspected even by
              ;; "total" predicates and ensures that codes with and without
              ;; parametric contracts behave the same.
              [(any/c) (if (Sealed? V‚ÇÄ) #f '‚úì)]
              [(none/c) '‚úó]
              [(immutable?)
               (define go : (V ‚Üí ?Dec)
                 (match-lambda
                   [(-b b) (bool->Dec (immutable? b))]
                   [(or (? Empty-Hash?) (? Hash-Of?) (? Empty-Set?) (? Set-Of?)) '‚úì]
                   [(Guarded _ (or (? Hash/C?) (? Set/C?)) Œ±) (go-Œ± Œ±)]
                   [(or (? Vect?) (? Vect-Of?) (Guarded _ (or (? Vect/C?) (? Vectof/C?)) _)) '‚úó]
                   [(-‚óè Ps) (Ps‚ä¢P Ps 'immutable?)]
                   [_ #f]))
               (: go-Œ± : Œ± ‚Üí ?Dec)
               (define (go-Œ± Œ±) (sat^‚ÇÅ go (unpack (Œ£@ Œ± Œ£) Œ£)))
               (go V‚ÇÄ)]
              [(list?) (check-proper-list Œ£ V‚ÇÄ)]
              [(port? input-port? output-port?) '‚úó] ; ports can't reach here
              [else (and (bool-excludes? (get-conservative-range P)) '‚úì)])]
           [_ #f])]))

  (: sat‚ÇÇ : Œ£ V V V ‚Üí ?Dec)
  (define (sat‚ÇÇ Œ£ P V‚ÇÅ V‚ÇÇ)
    (define (go [V‚ÇÅ : V] [V‚ÇÇ : V]) : ?Dec
      (case P
        [(equal? eq? char=? string=?) (check-equal? Œ£ V‚ÇÅ V‚ÇÇ)]
        [(=) (check-= Œ£ V‚ÇÅ V‚ÇÇ)]
        [(<=) (check-‚â§ Œ£ V‚ÇÅ V‚ÇÇ)]
        [(<) (neg (check-‚â§ Œ£ V‚ÇÇ V‚ÇÅ))]
        [(>=) (check-‚â§ Œ£ V‚ÇÇ V‚ÇÅ)]
        [(>) (neg (check-‚â§ Œ£ V‚ÇÅ V‚ÇÇ))]
        [(arity-includes?)
         (match* (V‚ÇÅ V‚ÇÇ)
           [((-b (? Arity? a)) (-b (? Arity? b))) (bool->Dec (arity-includes? a b))]
           [(_ _) #f])]
        [else #f]))
    (cond [(go V‚ÇÅ V‚ÇÇ) => values]
          [(and (T? V‚ÇÅ) (-b? V‚ÇÇ)) (sat^‚ÇÇ go (unpack V‚ÇÅ Œ£) {set V‚ÇÇ})]
          [(and (-b? V‚ÇÅ) (T? V‚ÇÇ)) (sat^‚ÇÇ go {set V‚ÇÅ} (unpack V‚ÇÇ Œ£))]
          [(and (T? V‚ÇÅ) (T? V‚ÇÇ)) (or (sat^‚ÇÇ go (unpack V‚ÇÅ Œ£) {set V‚ÇÇ})
                                     (sat^‚ÇÇ go {set V‚ÇÅ} (unpack V‚ÇÇ Œ£))
                                     (sat^‚ÇÇ go (unpack V‚ÇÅ Œ£) (unpack V‚ÇÇ Œ£)))]
          [else #f]))

  (: check-= : Œ£ V V ‚Üí ?Dec)
  (define (check-= Œ£ V‚ÇÅ V‚ÇÇ)
    (: check-Ps-= : (‚Ñò P) Real ‚Üí ?Dec)
    (define (check-Ps-= Ps x)
      (define check-P : (P ‚Üí ?Dec)
        (match-lambda
          ['exact-nonnegative-integer? (if (< x 0) '‚úó #f)]
          ['exact-positive-integer? (if (< x 1) '‚úó #f)]
          ['zero? (bool->Dec (= x 0))]
          [(or (P:= (? real? y))
               (P:‚â° (? real? y)))
           (bool->Dec (= x (assert y)))]
          [(P:¬¨ (P:= (== x))) '‚úó]
          [_ #f]))
      (set-ormap check-P Ps))
    (match* (V‚ÇÅ V‚ÇÇ)
      [((-b (? real? x)) (-b (? real? y))) (bool->Dec (= x y))]
      [((-‚óè Ps) (-b (? real? x))) (check-Ps-= Ps x)]
      [((-b (? real? x)) (-‚óè Ps)) (check-Ps-= Ps x)]
      [(_ _) (check-equal? Œ£ V‚ÇÅ V‚ÇÇ)]))

  (: check-‚â§ : Œ£ V V ‚Üí ?Dec)
  (define (check-‚â§ Œ£ V‚ÇÅ V‚ÇÇ)
    (match* (V‚ÇÅ V‚ÇÇ)
      [((-b (? real? x)) (-b (? real? y))) (bool->Dec (<= x y))]
      [((-b (? real? x)) (-‚óè Ps))
       (for/or : ?Dec ([P (in-set Ps)])
         (match P
           [(or (P:‚â• y) (P:> y)) #:when (and y (>= y x)) '‚úì]
           [(P:< y) #:when (<= y x) '‚úó]
           ['exact-nonnegative-integer? #:when (<= x 0) '‚úì]
           ['exact-positive-integer? #:when (<= x 1) '‚úì]
           [_ #f]))]
      [((-‚óè Ps) (-b (? real? y)))
       (for/or : ?Dec ([P (in-set Ps)])
         (match P
           [(P:< x) (and (<= x y) '‚úì)]
           [(P:‚â§ x) (and (<= x y) '‚úì)]
           [(P:> x) (and (>= x y) '‚úó)]
           [(P:‚â• x) (and (>  x y) '‚úó)]
           [(P:= (? real? x)) (bool->Dec (<= x y))]
           ['exact-nonnegaive-integer? #:when (< y 0) '‚úó]
           ['exact-positive-integer? #:when (< y 1) '‚úó]
           [_ #f]))]
      ;; More special cases to avoid SMT
      [((T:@ 'sub1 (list T)) T) '‚úì]
      [(T (T:@ 'sub1 (list T))) '‚úó]
      [((T:@ '- (list T (-b (? (>=/c 0))))) T) '‚úì]
      [(T (T:@ '- (list T (-b (? (>/c 0)))))) '‚úó]
      [((T:@ '+ (list T (-b (? (<=/c 0))))) T) '‚úì]
      [((T:@ '+ (list (-b (? (<=/c 0))) T)) T) '‚úì]
      [(T (T:@ '+ (list T (-b (? (</c 0)))))) '‚úó]
      [(T (T:@ '+ (list (-b (? (</c 0))) T))) '‚úó]
      [((and T‚ÇÅ (or (? -b?) (? T?))) (and T‚ÇÇ (or (? -b?) (? T?))))
       (match (hash-ref (cdr Œ£) (T:@ (K:‚â§) (list T‚ÇÅ T‚ÇÇ)) #f)
         [{singleton-set (-b b)} (if b '‚úì '‚úó)]
         [_
          (match (hash-ref (cdr Œ£) (T:@ (K:‚â§) (list T‚ÇÇ T‚ÇÅ)) #f)
            [{singleton-set (-b #f)} '‚úì]
            [_ #f])])]
      [(_ _) #f]))

  (: check-equal? : Œ£ V V ‚Üí ?Dec)
  (define (check-equal? Œ£ V‚ÇÅ V‚ÇÇ)

    (: singleton-pred : (‚Ñò P) ‚Üí (Option P))
    (define (singleton-pred Ps)
      (for/or : (Option P) ([P (in-set Ps)] #:when (?concretize P))
        P))

    (: go-V^ : V^ V^ ‚Üí ?Dec)
    (define (go-V^ Vs‚ÇÅ Vs‚ÇÇ) (sat^‚ÇÇ go-V Vs‚ÇÅ Vs‚ÇÇ))

    (define-set seen : (Pairof Œ± Œ±) #:mutable? #t)
    (: go-blob : Œ± Œ± ‚Üí ?Dec)
    (define (go-blob Œ±‚ÇÅ Œ±‚ÇÇ)
      (define k (cons Œ±‚ÇÅ Œ±‚ÇÇ))
      (cond [(seen-has? k) '‚úì]
            [else
             (seen-add! k)
             (for/fold ([acc : ?Dec '‚úì])
                       ([Vs‚ÇÅ (in-vector (Œ£@/blob Œ±‚ÇÅ Œ£))]
                        [Vs‚ÇÇ (in-vector (Œ£@/blob Œ±‚ÇÇ Œ£))]
                        #:break (eq? acc '‚úó))
               (case (go-V^ Vs‚ÇÅ Vs‚ÇÇ)
                 [(‚úì) acc]
                 [(‚úó) '‚úó]
                 [(#f) #f]))]))

    (: go-V : V V ‚Üí ?Dec)
    (define go-V
      (match-lambda**
       [((? -prim? x) (? -prim? y)) (bool->Dec (equal? x y))]
       [((-‚óè Ps) (-b b)) (Ps‚ä¢P Ps (P:‚â° b))]
       [((-b b) (-‚óè Ps)) (Ps‚ä¢P Ps (P:‚â° b))]
       [((? -prim?) (not (or (? -‚óè?) (? T?) (? -prim?)))) '‚úó]
       [((-‚óè Ps) (-‚óè Qs))
        (match* ((singleton-pred Ps) (singleton-pred Qs))
          [(#f _) #f]
          [(_ #f) #f]
          [(P Q) (bool->Dec (equal? P Q))])]
       [((not (or (? -‚óè?) (? T?) (? -prim?))) (? -prim?)) '‚úó]
       [((St (and Œ±‚ÇÅ (Œ±:dyn (Œ≤:st-elems _ ùíæ‚ÇÅ) _)) _)
         (St (and Œ±‚ÇÇ (Œ±:dyn (Œ≤:st-elems _ ùíæ‚ÇÇ) _)) _))
        (and (equal? ùíæ‚ÇÅ ùíæ‚ÇÇ) (go-blob Œ±‚ÇÅ Œ±‚ÇÇ))]
       [((T:@ o (list T‚ÇÅ (T:@ o (list T‚ÇÇ T‚ÇÉ))))
         (T:@ o (list (T:@ o (list T‚ÇÅ T‚ÇÇ)) T‚ÇÉ)))
        #:when (memq o '(+ *)) '‚úì]
       [((T:@ o (list (T:@ o (list T‚ÇÅ T‚ÇÇ)) T‚ÇÉ))
         (T:@ o (list T‚ÇÅ (T:@ o (list T‚ÇÇ T‚ÇÉ)))))
        #:when (memq o '(+ *)) '‚úì]
       [((? T? T‚ÇÅ) (? T? T‚ÇÇ)) (check-equal?/congruence (cdr Œ£) T‚ÇÅ T‚ÇÇ)]
       [((? T? T) V) (go-V^ (unpack T Œ£) (unpack V Œ£))]
       [(V (? T? T)) (go-V^ (unpack V Œ£) (unpack T Œ£))]
       [(_ _) #f]))

    (go-V V‚ÇÅ V‚ÇÇ))

  (: check-equal?/congruence : Œì (U T -b) (U T -b) ‚Üí ?Dec)
  (define (check-equal?/congruence Œì T‚ÇÅ T‚ÇÇ)
    (define-values (eqs diseqs) (Œì->eqs/diseqs Œì))
    (cond [(not (sat/extra? eqs (cons (cons T‚ÇÅ T‚ÇÇ) diseqs))) '‚úì]
          [(not (sat/extra? (cons (cons T‚ÇÅ T‚ÇÇ) eqs) diseqs)) '‚úó]
          [else #f]))

  (: Œì->eqs/diseqs : Œì ‚Üí (Values (Listof (Pairof S S)) (Listof (Pairof S S))))
  (define (Œì->eqs/diseqs Œì)
    (for/fold ([eqs : (Listof (Pairof S S)) '()]
               [diseqs : (Listof (Pairof S S)) (list (cons -tt -ff))])
              ([(T D) (in-hash Œì)])
      (match* (T D)
        [((T:@ (K:‚â°) (list T‚ÇÅ T‚ÇÇ)) {singleton-set (-b b)})
         (if b
             (values (cons (cons T‚ÇÅ T‚ÇÇ) eqs) diseqs)
             (values eqs (cons (cons T‚ÇÅ T‚ÇÇ) diseqs)))]
        [(_ {singleton-set (and T* (or (? -b?) (? T?)))})
         (values (cons (cons T T*) eqs) diseqs)]
        [(_ _) (values eqs diseqs)])))

  (:* Ps‚ä¢P simple-Ps‚ä¢P : (‚Ñò P) V ‚Üí ?Dec)
  (define (Ps‚ä¢P Ps Q)
    (define Q* (canonicalize Q))
    (if (set? Q*)
        (summarize-conj (map/set (Œª ([Q : P]) (simple-Ps‚ä¢P Ps Q)) Q*))
        (simple-Ps‚ä¢P Ps Q*)))
  (define (simple-Ps‚ä¢P Ps Q)
    (cond [(‚àã Ps Q) '‚úì]
          [(and (equal? Q -cons?) (‚àã Ps (P:¬¨ 'null?)) (‚àã Ps 'list?)) '‚úì]
          [(equal? Q 'none/c) '‚úó]
          [(equal? Q 'any/c) '‚úì]
          [else (for/or : ?Dec ([P (in-set Ps)]) (P‚ä¢P P Q))]))

  (:* P‚ä¢P simple-P‚ä¢P : V V ‚Üí ?Dec)
  (define (P‚ä¢P P‚ÇÄ Q‚ÇÄ)
    (define P* (canonicalize P‚ÇÄ))
    (define Q* (canonicalize Q‚ÇÄ))
    (cond [(and (set? P*) (set? Q*))
           (summarize-conj (map/set (Œª ([Q : P]) (simple-Ps‚ä¢P P* Q)) Q*))]
          [(set? Q*)
           (summarize-conj (map/set (Œª ([Q : P]) (simple-P‚ä¢P P* Q)) Q*))]
          [(set? P*) (simple-Ps‚ä¢P P* Q*)]
          [else (simple-P‚ä¢P P* Q*)]))
  (define (simple-P‚ä¢P P Q)
    (match* (P Q)
      ;; Base
      [(_ 'any/c) '‚úì]
      [('none/c _) '‚úì]
      [(_ 'none/c) '‚úó]
      [('any/c _) #f]
      [(P P) '‚úì]
      [((P:St ac P*) (P:St ac Q*)) (simple-P‚ä¢P P* Q*)]
      [((? symbol? P) (? symbol? Q)) (o‚ä¢o P Q)]
      [((? -o? P) 'values) (match P ; TODO generalize
                             ['not '‚úó]
                             [_ #|TODO careful|# '‚úì])]
      [((-st-p ùíæ‚ÇÅ) (-st-p ùíæ‚ÇÇ)) (bool->Dec (ùíæ‚ÇÅ . substruct? . ùíæ‚ÇÇ))]
      [((? base-only?) (? -st-p?)) '‚úó]
      [((? -st-p?) (? base-only?)) '‚úó]
      [((One-Of/C bs) (P:‚â° b))
       (if (‚àã bs b)
           (if (> (set-count bs) 1) #f '‚úì)
           '‚úó)]
      [((P:‚â° b) (One-Of/C bs)) (bool->Dec (‚àã bs b))]
      [((P:‚â° _) (or (? -st-p?) 'vector? 'set? 'hash?)) '‚úó]
      [((or (? -st-p?) 'vector? 'set? 'hash?) (P:‚â° _)) '‚úó]
      [((or (? P:>?) (? P:‚â•?) (? P:<?) (? P:‚â§?) (? P:=?)) (or 'number? 'real?)) '‚úì]
      ;; Negate
      [((P:¬¨ P) (P:¬¨ Q)) (case (simple-P‚ä¢P Q P)
                           [(‚úì) '‚úì]
                           [else #f])]
      [(P (P:¬¨ Q)) (neg (simple-P‚ä¢P P Q))]
      [((P:¬¨ P) Q) (case (simple-P‚ä¢P Q P)
                     [(‚úì) '‚úó]
                     [else #f])]
      ;; Special rules for numbers
      ; < and <
      [((P:‚â§ a) (P:< b))
       (and (<  a b) '‚úì)]
      [((or (P:< a) (P:‚â§ a))
        (or (P:< b) (P:‚â§ b)))
       (and a b (<= a b) '‚úì)]
      ; > and >
      [((P:‚â• a) (P:> b))
       (and (>  a b) '‚úì)]
      [((or (P:> a) (P:‚â• a))
        (or (P:> b) (P:‚â• b)))
       (and a b (>= a b) '‚úì)]
      ; < and >
      [((P:‚â§ a) (P:‚â• b))
       (and (<  a b) '‚úó)]
      [((or (P:< a) (P:‚â§ a))
        (or (P:> b) (P:‚â• b)))
       (and a b (<= a b) '‚úó)]
      ; > and <
      [((P:‚â• a) (P:‚â§ b))
       (and (>  a b) '‚úó)]
      [((or (P:> a) (P:‚â• a))
        (or (P:< b) (P:‚â§ b)))
       (and a b (>= a b) '‚úó)]
      ; _ -> real?
      ;; `(P T)` subsuming `real?` causes problem when `(P T)` gets dropped
      ;; due to `T` going out of scope
      #;[((or (? P:<?) (? P:‚â§?) (? P:>?) (? P:‚â•?) (? P:=?)) (or 'real? 'number?)) '‚úì]
      [((P:= b) Q) (sat‚ÇÅ ‚ä•Œ£ Q (-b b))]
      ; equal?
      [((P:= x) (P:= y)) (bool->Dec (= x y))]
      [((P:< a) (P:= (? real? b))) #:when (<= a b) '‚úó]
      [((P:‚â§ a) (P:= (? real? b))) #:when (<  a b) '‚úó]
      [((P:> a) (P:= (? real? b))) #:when (>= a b) '‚úó]
      [((P:‚â• a) (P:= (? real? b))) #:when (>  a b) '‚úó]
      [((P:= (? real? a)) (P:< b)) (bool->Dec (<  a b))]
      [((P:= (? real? a)) (P:‚â§ b)) (bool->Dec (<= a b))]
      [((P:= (? real? a)) (P:> b)) (bool->Dec (>  a b))]
      [((P:= (? real? a)) (P:‚â• b)) (bool->Dec (>= a b))]
      ;; Exclusion
      [((P:‚â§ T) (P:> T)) '‚úó]
      [((P:< T) (P:‚â• T)) '‚úó]
      [((P:‚â• T) (P:< T)) '‚úó]
      [((P:> T) (P:‚â§ T)) '‚úó]
      [((P:< T) (P:‚â§ T)) '‚úì]
      [((P:> T) (P:‚â• T)) '‚úì]
      ;; Arities
      [((P:arity-includes a‚ÇÅ) (P:arity-includes a‚ÇÇ))
       (bool->Dec (arity-includes? a‚ÇÅ a‚ÇÇ))]
      ;; Default
      [(_ _) #f]))

  ;; Whether predicate `P` only covers base types
  (define (base-only? [P : V])
    (and (symbol? P) (not (memq P '(list? struct?)))))
  
  (: bool->Dec : Boolean ‚Üí Dec)
  (define (bool->Dec b) (if b '‚úì '‚úó))

  (: neg : ?Dec ‚Üí ?Dec)
  (define (neg d)
    (case d
      [(‚úì) '‚úó]
      [(‚úó) '‚úì]
      [else #f]))

  (: canonicalize : V ‚Üí (U V (‚Ñò P)))
  (define canonicalize
    (match-lambda
      ['exact-nonnegative-integer? {set 'exact? 'integer? (P:‚â• 0)}]
      ['exact-positive-integer? {set 'exact? 'integer? (P:> 0)}]
      ['exact-integer? {set 'exact? 'integer?}]
      ['positive? (P:> 0)]
      ['negative? (P:< 0)]
      ['zero? (P:= 0)]
      [(P:¬¨ 'even?) 'odd?]
      [(P:¬¨ 'odd?) 'even?]
      [(and P‚ÇÄ (P:St ac P*))
       (define P** (canonicalize P*))
       (cond [(eq? P** P*) P‚ÇÄ] ; try to re-use old instance
             [(set? P**) (map/set (Œª ([P : P]) (P:St ac P)) P**)]
             [(P? P**) (P:St ac P**)]
             [else P‚ÇÄ])]
      [P P]))

  (splicing-let ([list-excl? ; TODO use prim-runtime
                  (set->predicate
                   {set 'number? 'integer? 'real? 'exact-nonnegative-integer?
                        'string? 'symbol?})])
    (: check-proper-list : Œ£ V ‚Üí ?Dec)
    (define (check-proper-list Œ£ V‚ÇÄ)
      (define-set seen : Œ± #:mutable? #t)

      (: go-Œ± : Œ± ‚Üí ?Dec)
      (define (go-Œ± Œ±)
        (cond [(seen-has? Œ±) '‚úì]
              [else (seen-add! Œ±)
                    (match (Œ£@/raw Œ± Œ£)
                      [(vector _ V) (go* V)]
                      [(? set? V) (go* V)])]))

      (: go* : V^ ‚Üí ?Dec)
      (define (go* Vs)
        (summarize-disj
         (for/fold ([acc : (‚Ñò ?Dec) ‚àÖ])
                   ([V (in-set Vs)] #:break (> (set-count acc) 1))
           (set-add acc (go V)))))

      (define go : (V ‚Üí ?Dec)
        (match-lambda
          [(St (and Œ± (Œ±:dyn (Œ≤:st-elems _ (== -ùíæ-cons)) _)) _) (go-Œ± Œ±)]
          [(Guarded _ (? St/C? (app St/C-tag (== -ùíæ-cons))) Œ±) (go-Œ± Œ±)]
          [(-b b) (bool->Dec (null? b))]
          [(-‚óè Ps) (cond [(‚àã Ps 'list?) '‚úì]
                         [(set-ormap list-excl? Ps) '‚úó]
                         [else #f])]
          [(? Œ±? Œ±) (go-Œ± Œ±)]
          [(? T:@? T) (go* (unpack T Œ£))]
          [_ '‚úó]))
      
      (go V‚ÇÄ)))

  (: join-Dec : (U #t ?Dec) ?Dec ‚Üí ?Dec)
  (define (join-Dec d d*)
    (cond [(eq? d d*) d*]
          [(eq? d #t) d*]
          [else #f]))

  (: summarize-disj : (‚Ñò ?Dec) ‚Üí ?Dec)
  ;; Summarize result of `((‚à® P ...) ‚Üí Q)` from results `(P ‚Üí Q) ...`
  (define (summarize-disj ds)
    (case (set-count ds)
      [(1) (set-first ds)]
      [(2 3) #f]
      [else (error 'summarize-Decs "~a" ds)]))

  (: summarize-conj : (‚Ñò ?Dec) ‚Üí ?Dec)
  ;; Summarize result of `(P ‚Üí (‚àß Q ...))` from results `(P ‚Üí Q) ...`
  (define (summarize-conj ds)
    (cond [(= 1 (set-count ds)) (set-first ds)]
          [(‚àã ds '‚úó) '‚úó]
          [else #f]))

  (define bool-excludes? (set->predicate (get-exclusions 'boolean?)))

  (splicing-local
      ((define (ensure-?Dec [d : (U #t ?Dec)]) : ?Dec
         (case d
           [(#t) !!!]
           [else d])))
    (: sat^‚ÇÅ : (V ‚Üí ?Dec) V^ ‚Üí ?Dec)
    (define (sat^‚ÇÅ check V)
      (ensure-?Dec
       (for/fold ([d : (U #t ?Dec) #t]) ([V·µ¢ (in-set V)] #:when d)
         (join-Dec d (check V·µ¢)))))
    (: sat^‚ÇÇ : (V V ‚Üí ?Dec) V^ V^ ‚Üí ?Dec)
    (define (sat^‚ÇÇ check V‚ÇÅ V‚ÇÇ)
      (ensure-?Dec
       (for*/fold ([d : (U #t ?Dec) #t]) ([V·µ¢ (in-set V‚ÇÅ)] [V‚±º (in-set V‚ÇÇ)] #:when d)
         (join-Dec d (check V·µ¢ V‚±º))))))

  (: collect‚ÇÅ : Œ£ V V^ ‚Üí (Values (Option (Pairof W ŒîŒ£)) (Option (Pairof W ŒîŒ£))))
  (define (collect‚ÇÅ Œ£ P Vs)
    (define-values (Vs:t Vs:f ŒîŒ£:t ŒîŒ£:f)
      (for/fold ([Vs:t : V^ ‚àÖ]
                 [Vs:f : V^ ‚àÖ]
                 [ŒîŒ£:t : (Option ŒîŒ£) #f]
                 [ŒîŒ£:f : (Option ŒîŒ£) #f])
                ([V (in-set Vs)])
        (case (sat‚ÇÅ Œ£ P V)
          [(‚úì)
           (define-values (V* ŒîŒ£:t*) (refine‚ÇÅ V P Œ£))
           (values (‚à™ Vs:t V*) Vs:f (?ŒîŒ£‚äî ŒîŒ£:t ŒîŒ£:t*) (?ŒîŒ£‚äî ŒîŒ£:f ‚ä•ŒîŒ£))]
          [(‚úó)
           (define-values (V* ŒîŒ£:f*) (refine-not‚ÇÅ V P Œ£))
           (values Vs:t (‚à™ Vs:f V*) (?ŒîŒ£‚äî ŒîŒ£:t ‚ä•ŒîŒ£) (?ŒîŒ£‚äî ŒîŒ£:f ŒîŒ£:f*))]
          [else (define-values (V:t ŒîŒ£:t*) (refine‚ÇÅ V P Œ£))
                (define-values (V:f ŒîŒ£:f*) (refine-not‚ÇÅ V P Œ£))
                (values (‚à™ Vs:t V:t) (‚à™ Vs:f V:f) (?ŒîŒ£‚äî ŒîŒ£:t ŒîŒ£:t*) (?ŒîŒ£‚äî ŒîŒ£:f ŒîŒ£:f*))])))
    (values (and (not (set-empty? Vs:t)) (cons (list Vs:t) (assert ŒîŒ£:t)))
            (and (not (set-empty? Vs:f)) (cons (list Vs:f) (assert ŒîŒ£:f)))))

  (: collect‚ÇÇ : Œ£ V V^ V^ ‚Üí (Values (Option (Pairof W ŒîŒ£)) (Option (Pairof W ŒîŒ£))))
  (define (collect‚ÇÇ Œ£ P Vs‚ÇÅ Vs‚ÇÇ)
    (define-values (Vs‚ÇÅ:t Vs‚ÇÇ:t Vs‚ÇÅ:f Vs‚ÇÇ:f ŒîŒ£:t ŒîŒ£:f)
      (for*/fold ([Vs‚ÇÅ:t : V^ ‚àÖ] [Vs‚ÇÇ:t : V^ ‚àÖ]
                  [Vs‚ÇÅ:f : V^ ‚àÖ] [Vs‚ÇÇ:f : V^ ‚àÖ]
                  [ŒîŒ£:t : (Option ŒîŒ£) #f]
                  [ŒîŒ£:f : (Option ŒîŒ£) #f])
                 ([V‚ÇÅ (in-set Vs‚ÇÅ)]
                  [V‚ÇÇ (in-set Vs‚ÇÇ)])
        (case (sat‚ÇÇ Œ£ P V‚ÇÅ V‚ÇÇ)
          [(‚úì)
           (define-values (V‚ÇÅ:t V‚ÇÇ:t ŒîŒ£:t*) (refine‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£))
           (values (‚à™ Vs‚ÇÅ:t V‚ÇÅ:t) (‚à™ Vs‚ÇÇ:t V‚ÇÇ:t)
                   Vs‚ÇÅ:f Vs‚ÇÇ:f
                   (?ŒîŒ£‚äî ŒîŒ£:t ŒîŒ£:t*) (?ŒîŒ£‚äî ŒîŒ£:f ‚ä•ŒîŒ£))]
          [(‚úó)
           (define-values (V‚ÇÅ:f V‚ÇÇ:f ŒîŒ£:f*) (refine-not‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£))
           (values Vs‚ÇÅ:t Vs‚ÇÇ:t
                   (‚à™ Vs‚ÇÅ:f V‚ÇÅ:f) (‚à™ Vs‚ÇÇ:f V‚ÇÇ:f)
                   (?ŒîŒ£‚äî ŒîŒ£:t ‚ä•ŒîŒ£) (?ŒîŒ£‚äî ŒîŒ£:f ŒîŒ£:f*))]
          [else (define-values (V‚ÇÅ:t V‚ÇÇ:t ŒîŒ£:t*) (refine‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£))
                (define-values (V‚ÇÅ:f V‚ÇÇ:f ŒîŒ£:f*) (refine-not‚ÇÇ V‚ÇÅ V‚ÇÇ P Œ£))
                (values (‚à™ Vs‚ÇÅ:t V‚ÇÅ:t) (‚à™ Vs‚ÇÇ:t V‚ÇÇ:t)
                        (‚à™ Vs‚ÇÅ:f V‚ÇÅ:f) (‚à™ Vs‚ÇÇ:f V‚ÇÇ:f)
                        (?ŒîŒ£‚äî ŒîŒ£:t ŒîŒ£:t*) (?ŒîŒ£‚äî ŒîŒ£:f ŒîŒ£:f*))])))
    (values (and (not (or (set-empty? Vs‚ÇÅ:t) (set-empty? Vs‚ÇÇ:t)))
                 (cons (list Vs‚ÇÅ:t Vs‚ÇÇ:t) (assert ŒîŒ£:t)))
            (and (not (or (set-empty? Vs‚ÇÅ:f) (set-empty? Vs‚ÇÇ:f)))
                 (cons (list Vs‚ÇÅ:f Vs‚ÇÇ:f) (assert ŒîŒ£:f)))))

  (: refine-both (‚àÄ (X) (Base ‚Üí Boolean : X) K -b V (X ‚Üí P) V (X ‚Üí P) Œ£ ‚Üí (Values V^ V^ ŒîŒ£)))
  (define (refine-both ub? P b V‚ÇÅ P‚ÇÅ V‚ÇÇ P‚ÇÇ Œ£)
    (match* (V‚ÇÅ V‚ÇÇ)
      [((? T? V‚ÇÅ) (? T? V‚ÇÇ))
       (define T-prop (T:@ P (list V‚ÇÅ V‚ÇÇ)))
       (values {set V‚ÇÅ} {set V‚ÇÇ} ((inst cons ŒîŒû ŒîŒì) ‚ä•Œû (hash T-prop {set b})))]
      [((? T? V‚ÇÅ) (-b (? ub? u‚ÇÇ)))
       (define-values (V‚ÇÅ* ŒîŒ£) (refine‚ÇÅ V‚ÇÅ (P‚ÇÅ u‚ÇÇ) Œ£))
       (values V‚ÇÅ* {set V‚ÇÇ} ŒîŒ£)]
      [((-b (? ub? u‚ÇÅ)) (? T? V‚ÇÇ))
       (define-values (V‚ÇÇ* ŒîŒ£) (refine‚ÇÅ V‚ÇÇ (P‚ÇÇ u‚ÇÅ) Œ£))
       (values {set V‚ÇÅ} V‚ÇÇ* ŒîŒ£)]
      [(_ _) (values {set V‚ÇÅ} {set V‚ÇÇ} ‚ä•ŒîŒ£)]))

  (: ?ŒîŒ£‚äî : (Option ŒîŒ£) ŒîŒ£ ‚Üí ŒîŒ£)
  (define (?ŒîŒ£‚äî ?ŒîŒ£ ŒîŒ£)
    (if ?ŒîŒ£ (ŒîŒ£‚äî ?ŒîŒ£ ŒîŒ£) ŒîŒ£))

  ;;;;; Congruence closure stuff
  ;;FIXME: refactor
  (splicing-local
      (;; Return list of term successors
       (define succ : (S ‚Üí (Listof S))
         (match-lambda
           [(T:@ _ Ts) Ts]
           [_ '()]))

       ;; Return node label for term
       (define lab : (S ‚Üí Any)
         (match-lambda
           [(T:@ K _) K]
           [S S]))

       ;; Generate additional axioms for appropriate terms
       (define gen-eqs : (S ‚Üí (‚Ñò (Pairof S S)))
         (match-lambda
           ;; e.g. (car (cons x y)) ‚â° x
           ;; FIXME do properly for substructs
           [(and T (T:@ (-st-mk ùíæ) Ts))
            (for/set: : (‚Ñò (Pairof S S)) ([T·µ¢ (in-list Ts)]
                                          [i (in-range (count-struct-fields ùíæ))])
              (cons (T:@ (-st-ac ùíæ (assert i index?)) (list T)) T·µ¢))]
           [(T:@ (-st-ac ùíæ _) (and arg (list T*)))
            (define fields (build-list (count-struct-fields ùíæ)
                                       (Œª ([i : Index]) (T:@ (-st-ac ùíæ i) arg))))
            {set (cons T* (T:@ (-st-mk ùíæ) fields))}]
           ;; e.g. 0 + x = x
           [(T:@ '+ (list T‚ÇÅ T‚ÇÇ))
            {set (cons (T:@ '+ (list T‚ÇÅ -zero)) T‚ÇÅ)
                 (cons (T:@ '+ (list -zero T‚ÇÅ)) T‚ÇÅ)
                 (cons (T:@ '+ (list T‚ÇÇ -zero)) T‚ÇÇ)
                 (cons (T:@ '+ (list -zero T‚ÇÇ)) T‚ÇÇ)}]
           [_ ‚àÖ]))

       (: make-congruence-closer : (S ‚Üí (‚Ñò S)) ‚Üí (Values (S S ‚Üí Void) (S S ‚Üí Boolean)))
       ;; https://dl.acm.org/citation.cfm?id=322198 , section 2
       (define (make-congruence-closer preds)
         (define-values (union! find) ((inst make-union-find S)))
         (define equivs : (Mutable-HashTable S (‚Ñò S)) (make-hash))
         (define (equivs-of [x : S]) #;(assert (equal? x (find x))) (hash-ref equivs x (Œª () {set x})))
         (define (preds-of [xs : (‚Ñò S)])
           (for/union : (‚Ñò S) ([x (in-set xs)])
             (preds x)))

         (: merge! : S S ‚Üí Void)
         ;; Mark `u` and `v` as being in the same partition and extend congruence closure
         (define (merge! u v)
           (define u* (find u))
           (define v* (find v))
           (unless (equal? u* v*)
             (define u*:equivs (equivs-of u*))
             (define v*:equivs (equivs-of v*))
             (define P·µ§ (preds-of u*:equivs))
             (define P·µ• (preds-of v*:equivs))
             (union! u v)
             (begin ; clean up `equivs` just for easy debugging later
               (hash-remove! equivs u*)
               (hash-remove! equivs v*)
               (hash-set! equivs (find u) (‚à™ u*:equivs v*:equivs)))
             (for* ([x (in-set P·µ§)]
                    [y (in-set P·µ•)]
                    #:when (congruent? x y))
               (merge! x y))))

         (: congruent? : S S ‚Üí Boolean)
         (define (congruent? x y)
           (and (equal? (lab x) (lab y))
                (let ([us (succ x)]
                      [vs (succ y)])
                  (and (equal? (length us) (length vs))
                       (for/and : Boolean ([u (in-list us)] [v (in-list vs)])
                         (equal? (find u) (find v)))))))

         (values merge! (Œª (x y) (equal? (find x) (find y)))))

       (: fold-terms (‚àÄ (A)
                        (S A ‚Üí A)
                        A
                        (Listof (Pairof S S))
                        (Listof (Pairof S S)) ‚Üí A))
       (define (fold-terms step acc eqs diseqs)
         (: on-x : S A ‚Üí A)
         (define (on-x x a) (foldl on-x (step x a) (succ x)))
         (: on-xx : (Pairof S S) A ‚Üí A)
         (define (on-xx xx xs) (on-x (cdr xx) (on-x (car xx) xs)))
         (foldl on-xx (foldl on-xx acc eqs) diseqs))

       (: sat? : (Listof (Pairof S S)) (Listof (Pairof S S)) ‚Üí Boolean)
       ;; Check if given equalities and dis-equalities are satisfiable
       ;; https://dl.acm.org/citation.cfm?id=322198, section 3
       (define (sat? eqs diseqs)
         (define-values (merge! ‚â°)
           (let ([m
                  ((inst fold-terms (HashTable S (‚Ñò S)))
                   (Œª (x m)
                     (foldl (Œª ([x* : S] [m : (HashTable S (‚Ñò S))])
                              (hash-update m x* (Œª ([xs : (‚Ñò S)]) (set-add xs x)) mk-‚àÖ))
                            m
                            (succ x)))
                   (hash) eqs diseqs)])
             (make-congruence-closer (Œª (x) (hash-ref m x mk-‚àÖ)))))
         (for ([eq (in-list eqs)])
           (merge! (car eq) (cdr eq)))
         (not (for/or : Boolean ([diseq (in-list diseqs)])
                (‚â° (car diseq) (cdr diseq))))))
    (: sat/extra? : (Listof (Pairof S S)) (Listof (Pairof S S)) ‚Üí Boolean)
    ;; Given extra assumptions generated by `gen-eqs`, check if given equalities
    ;; and dis-equalities are satisfiable
    ;; https://dl.acm.org/citation.cfm?id=322198, section 4
    (define (sat/extra? eqs diseqs)
      (define all-eqs
        (let ([more-eqs
               ((inst fold-terms (‚Ñò (Pairof S S)))
                (Œª (x acc) (set-union acc (gen-eqs x)))
                ‚àÖ eqs diseqs)])
          (append (set->list more-eqs) eqs)))
      (sat? all-eqs diseqs)))

    (: base? : Base ‚Üí Boolean : Base)
    (define (base? _) #t)
  )
